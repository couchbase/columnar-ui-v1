{"version":3,"file":"angular-ui-tree.js","sources":["../node_modules/angular-ui-tree/dist/angular-ui-tree.js","../node_modules/angular-ui-tree/index.js"],"sourcesContent":["/**\n * @license Angular UI Tree v2.22.6\n * (c) 2010-2017. https://github.com/angular-ui-tree/angular-ui-tree\n * License: MIT\n */\n(function () {\n  'use strict';\n\n  angular.module('ui.tree', [])\n    .constant('treeConfig', {\n      treeClass: 'angular-ui-tree',\n      emptyTreeClass: 'angular-ui-tree-empty',\n      dropzoneClass: 'angular-ui-tree-dropzone',\n      hiddenClass: 'angular-ui-tree-hidden',\n      nodesClass: 'angular-ui-tree-nodes',\n      nodeClass: 'angular-ui-tree-node',\n      handleClass: 'angular-ui-tree-handle',\n      placeholderClass: 'angular-ui-tree-placeholder',\n      dragClass: 'angular-ui-tree-drag',\n      dragThreshold: 3,\n      defaultCollapsed: false,\n      appendChildOnHover: true\n    });\n\n})();\n\n(function () {\n  'use strict';\n\n  angular.module('ui.tree')\n\n    .controller('TreeHandleController', ['$scope', '$element',\n      function ($scope, $element) {\n        this.scope = $scope;\n\n        $scope.$element = $element;\n        $scope.$nodeScope = null;\n        $scope.$type = 'uiTreeHandle';\n\n      }\n    ]);\n})();\n\n(function () {\n  'use strict';\n\n  angular.module('ui.tree')\n    .controller('TreeNodeController', ['$scope', '$element',\n      function ($scope, $element) {\n        this.scope = $scope;\n\n        $scope.$element = $element;\n        $scope.$modelValue = null; // Model value for node;\n        $scope.$parentNodeScope = null; // uiTreeNode Scope of parent node;\n        $scope.$childNodesScope = null; // uiTreeNodes Scope of child nodes.\n        $scope.$parentNodesScope = null; // uiTreeNodes Scope of parent nodes.\n        $scope.$treeScope = null; // uiTree scope\n        $scope.$handleScope = null; // it's handle scope\n        $scope.$type = 'uiTreeNode';\n        $scope.$$allowNodeDrop = false;\n        $scope.collapsed = false;\n        $scope.expandOnHover = false;\n\n        //Called by uiTreeNode Directive on load.\n        $scope.init = function (controllersArr) {\n          var treeNodesCtrl = controllersArr[0];\n          $scope.$treeScope = controllersArr[1] ? controllersArr[1].scope : null;\n\n          //Find the scope of it's parent node.\n          $scope.$parentNodeScope = treeNodesCtrl.scope.$nodeScope;\n\n          //modelValue for current node.\n          $scope.$modelValue = treeNodesCtrl.scope.$modelValue[$scope.$index];\n          $scope.$parentNodesScope = treeNodesCtrl.scope;\n\n          //Init sub nodes.\n          treeNodesCtrl.scope.initSubNode($scope);\n\n          $element.on('$destroy', function () {\n\n            //Destroy sub nodes.\n            treeNodesCtrl.scope.destroySubNode($scope);\n          });\n        };\n\n        //Return the index of child node in parent node (nodesScope).\n        $scope.index = function () {\n          return $scope.$parentNodesScope.$modelValue.indexOf($scope.$modelValue);\n        };\n\n        $scope.dragEnabled = function () {\n          return !($scope.$treeScope && !$scope.$treeScope.dragEnabled);\n        };\n\n        $scope.isSibling = function (targetNode) {\n          return $scope.$parentNodesScope == targetNode.$parentNodesScope;\n        };\n\n        $scope.isChild = function (targetNode) {\n          var nodes = $scope.childNodes();\n          return nodes && nodes.indexOf(targetNode) > -1;\n        };\n\n        //TODO(jcarter): This method is on uiTreeHelper already.\n        $scope.prev = function () {\n          var index = $scope.index();\n          if (index > 0) {\n            return $scope.siblings()[index - 1];\n          }\n          return null;\n        };\n\n        //Calls childNodes on parent.\n        $scope.siblings = function () {\n          return $scope.$parentNodesScope.childNodes();\n        };\n\n        $scope.childNodesCount = function () {\n          return $scope.childNodes() ? $scope.childNodes().length : 0;\n        };\n\n        $scope.hasChild = function () {\n          return $scope.childNodesCount() > 0;\n        };\n\n        $scope.childNodes = function () {\n          return $scope.$childNodesScope && $scope.$childNodesScope.$modelValue ?\n            $scope.$childNodesScope.childNodes() :\n            null;\n        };\n\n        $scope.accept = function (sourceNode, destIndex) {\n          return $scope.$childNodesScope &&\n            $scope.$childNodesScope.$modelValue &&\n            $scope.$childNodesScope.accept(sourceNode, destIndex);\n        };\n\n        $scope.remove = function () {\n          return $scope.$parentNodesScope.removeNode($scope);\n        };\n\n        $scope.toggle = function () {\n          $scope.collapsed = !$scope.collapsed;\n          $scope.$treeScope.$callbacks.toggle($scope.collapsed, $scope);\n        };\n\n        $scope.collapse = function () {\n          $scope.collapsed = true;\n        };\n\n        $scope.expand = function () {\n          $scope.collapsed = false;\n        };\n\n        $scope.depth = function () {\n          var parentNode = $scope.$parentNodeScope;\n          if (parentNode) {\n            return parentNode.depth() + 1;\n          }\n          return 1;\n        };\n\n        /**\n        * Returns the depth of the deepest subtree under this node\n        * @param scope a TreeNodesController scope object\n        * @returns Depth of all nodes *beneath* this node. If scope belongs to a leaf node, the\n        *   result is 0 (it has no subtree).\n        */\n        function countSubTreeDepth(scope) {\n          if (!scope) {\n            return 0;\n          }\n          var thisLevelDepth = 0,\n              childNodes = scope.childNodes(),\n              childNode,\n              childDepth,\n              i;\n          if (!childNodes || childNodes.length === 0) {\n            return 0;\n          }\n          for (i = childNodes.length - 1; i >= 0 ; i--) {\n            childNode = childNodes[i],\n            childDepth = 1 + countSubTreeDepth(childNode);\n            thisLevelDepth = Math.max(thisLevelDepth, childDepth);\n          }\n          return thisLevelDepth;\n        }\n\n        $scope.maxSubDepth = function () {\n          return $scope.$childNodesScope ? countSubTreeDepth($scope.$childNodesScope) : 0;\n        };\n      }\n    ]);\n})();\n\n(function () {\n  'use strict';\n\n  angular.module('ui.tree')\n\n    .controller('TreeNodesController', ['$scope', '$element', '$timeout',\n      function ($scope, $element, $timeout) {\n        this.scope = $scope;\n\n        $scope.$element = $element;\n        $scope.$modelValue = null;\n        $scope.$nodeScope = null; // the scope of node which the nodes belongs to\n        $scope.$treeScope = null;\n        $scope.$type = 'uiTreeNodes';\n        $scope.$nodesMap = {};\n\n        $scope.nodropEnabled = false;\n        $scope.maxDepth = 0;\n        $scope.cloneEnabled = false;\n\n        $scope.initSubNode = function (subNode) {\n          if (!subNode.$modelValue) {\n            return null;\n          }\n          $scope.$nodesMap[subNode.$modelValue.$$hashKey] = subNode;\n        };\n\n        $scope.destroySubNode = function (subNode) {\n          if (!subNode.$modelValue) {\n            return null;\n          }\n          $scope.$nodesMap[subNode.$modelValue.$$hashKey] = null;\n        };\n\n        $scope.accept = function (sourceNode, destIndex) {\n          return $scope.$treeScope.$callbacks.accept(sourceNode, $scope, destIndex);\n        };\n\n        $scope.beforeDrag = function (sourceNode) {\n          return $scope.$treeScope.$callbacks.beforeDrag(sourceNode);\n        };\n\n        $scope.isParent = function (node) {\n          return node.$parentNodesScope == $scope;\n        };\n\n        $scope.hasChild = function () {\n          return $scope.$modelValue.length > 0;\n        };\n\n        //Called in apply method of UiTreeHelper.dragInfo.\n        $scope.removeNode = function (node) {\n          var index = $scope.$modelValue.indexOf(node.$modelValue);\n          if (index > -1) {\n            $timeout(function () {\n              $scope.$modelValue.splice(index, 1)[0];\n            });\n            return $scope.$treeScope.$callbacks.removed(node);\n          }\n          return null;\n        };\n\n        //Called in apply method of UiTreeHelper.dragInfo.\n        $scope.insertNode = function (index, nodeData) {\n          $timeout(function () {\n            $scope.$modelValue.splice(index, 0, nodeData);\n          });\n        };\n\n        $scope.childNodes = function () {\n          var i, nodes = [];\n          if ($scope.$modelValue) {\n            for (i = 0; i < $scope.$modelValue.length; i++) {\n              nodes.push($scope.$nodesMap[$scope.$modelValue[i].$$hashKey]);\n            }\n          }\n          return nodes;\n        };\n\n        $scope.depth = function () {\n          if ($scope.$nodeScope) {\n            return $scope.$nodeScope.depth();\n          }\n          return 0; // if it has no $nodeScope, it's root\n        };\n\n        // check if depth limit has reached\n        $scope.outOfDepth = function (sourceNode) {\n          var maxDepth = $scope.maxDepth || $scope.$treeScope.maxDepth;\n          if (maxDepth > 0) {\n            return $scope.depth() + sourceNode.maxSubDepth() + 1 > maxDepth;\n          }\n          return false;\n        };\n\n      }\n    ]);\n})();\n\n(function () {\n  'use strict';\n\n  angular.module('ui.tree')\n\n    .controller('TreeController', ['$scope', '$element',\n      function ($scope, $element) {\n        this.scope = $scope;\n\n        $scope.$element = $element;\n        $scope.$nodesScope = null; // root nodes\n        $scope.$type = 'uiTree';\n        $scope.$emptyElm = null;\n        $scope.$dropzoneElm = null;\n        $scope.$callbacks = null;\n\n        $scope.dragEnabled = true;\n        $scope.emptyPlaceholderEnabled = true;\n        $scope.maxDepth = 0;\n        $scope.dragDelay = 0;\n        $scope.cloneEnabled = false;\n        $scope.nodropEnabled = false;\n        $scope.dropzoneEnabled = false;\n\n        // Check if it's a empty tree\n        $scope.isEmpty = function () {\n          return ($scope.$nodesScope && $scope.$nodesScope.$modelValue\n          && $scope.$nodesScope.$modelValue.length === 0);\n        };\n\n        // add placeholder to empty tree\n        $scope.place = function (placeElm) {\n          $scope.$nodesScope.$element.append(placeElm);\n          $scope.$emptyElm.remove();\n        };\n\n        this.resetEmptyElement = function () {\n          if ((!$scope.$nodesScope.$modelValue || $scope.$nodesScope.$modelValue.length === 0) &&\n            $scope.emptyPlaceholderEnabled) {\n            $element.append($scope.$emptyElm);\n          } else {\n            $scope.$emptyElm.remove();\n          }\n        };\n\n        this.resetDropzoneElement = function () {\n          if ((!$scope.$nodesScope.$modelValue || $scope.$nodesScope.$modelValue.length !== 0) &&\n            $scope.dropzoneEnabled) {\n            $element.append($scope.$dropzoneElm);\n          } else {\n            $scope.$dropzoneElm.remove();\n          }\n        };\n\n        $scope.resetEmptyElement = this.resetEmptyElement;\n        $scope.resetDropzoneElement = this.resetDropzoneElement;\n      }\n    ]);\n})();\n\n(function () {\n  'use strict';\n\n  angular.module('ui.tree')\n    .directive('uiTree', ['treeConfig', '$window',\n      function (treeConfig, $window) {\n        return {\n          restrict: 'A',\n          scope: true,\n          controller: 'TreeController',\n          link: function (scope, element, attrs, ctrl) {\n            var callbacks = {\n              accept: null,\n              beforeDrag: null\n            },\n            config = {},\n            tdElm,\n            $trElm,\n            emptyElmColspan;\n\n            //Adding configured class to uiTree.\n            angular.extend(config, treeConfig);\n\n            if (config.treeClass) {\n              element.addClass(config.treeClass);\n            }\n\n            //Determining if uiTree is on a table.\n            if (element.prop('tagName').toLowerCase() === 'table') {\n              scope.$emptyElm = angular.element($window.document.createElement('tr'));\n              $trElm = element.find('tr');\n              \n              //If we can find a tr, then we can use its td children as the empty element colspan.\n              if ($trElm.length > 0) {\n                emptyElmColspan = angular.element($trElm).children().length;\n              } else {\n                \n                //If not, by setting a huge colspan we make sure it takes full width.\n                //TODO(jcarter): Check for negative side effects.\n                emptyElmColspan = 1000000;\n              }\n              tdElm = angular.element($window.document.createElement('td'))\n                .attr('colspan', emptyElmColspan);\n              scope.$emptyElm.append(tdElm);\n            } else {\n              scope.$emptyElm = angular.element($window.document.createElement('div'));\n              scope.$dropzoneElm = angular.element($window.document.createElement('div'));\n            }\n\n            if (config.emptyTreeClass) {\n              scope.$emptyElm.addClass(config.emptyTreeClass);\n            }\n            if (config.dropzoneClass) {\n              scope.$dropzoneElm.addClass(config.dropzoneClass);\n            }\n\n            scope.$watch('$nodesScope.$modelValue.length', function (val) {\n              if (!angular.isNumber(val)) {\n                return;\n              }\n\n              ctrl.resetEmptyElement();\n              ctrl.resetDropzoneElement();\n            }, true);\n\n            scope.$watch(attrs.dragEnabled, function (val) {\n              if ((typeof val) == 'boolean') {\n                scope.dragEnabled = val;\n              }\n            });\n\n            scope.$watch(attrs.emptyPlaceholderEnabled, function (val) {\n              if ((typeof val) == 'boolean') {\n                scope.emptyPlaceholderEnabled = val;\n                ctrl.resetEmptyElement();\n              }\n            });\n\n            scope.$watch(attrs.nodropEnabled, function (val) {\n              if ((typeof val) == 'boolean') {\n                scope.nodropEnabled = val;\n              }\n            });\n\n            scope.$watch(attrs.dropzoneEnabled, function (val) {\n              if ((typeof val) == 'boolean') {\n                scope.dropzoneEnabled = val;\n                ctrl.resetDropzoneElement();\n              }\n            });\n\n            scope.$watch(attrs.cloneEnabled, function (val) {\n              if ((typeof val) == 'boolean') {\n                scope.cloneEnabled = val;\n              }\n            });\n\n            scope.$watch(attrs.maxDepth, function (val) {\n              if ((typeof val) == 'number') {\n                scope.maxDepth = val;\n              }\n            });\n\n            scope.$watch(attrs.dragDelay, function (val) {\n              if ((typeof val) == 'number') {\n                scope.dragDelay = val;\n              }\n            });\n\n            /**\n             * Callback checks if the destination node can accept the dragged node.\n             * By default, ui-tree will check that 'data-nodrop-enabled' is not set for the\n             * destination ui-tree-nodes, and that the 'max-depth' attribute will not be exceeded\n             * if it is set on the ui-tree or ui-tree-nodes.\n             * This callback can be overridden, but callers must manually enforce nodrop and max-depth\n             * themselves if they need those to be enforced.\n             * @param sourceNodeScope Scope of the ui-tree-node being dragged\n             * @param destNodesScope Scope of the ui-tree-nodes where the node is hovering\n             * @param destIndex Index in the destination nodes array where the source node will drop\n             * @returns {boolean} True if the node is permitted to be dropped here\n             */\n            callbacks.accept = function (sourceNodeScope, destNodesScope, destIndex) {\n              return !(destNodesScope.nodropEnabled || destNodesScope.$treeScope.nodropEnabled || destNodesScope.outOfDepth(sourceNodeScope));\n            };\n\n            callbacks.beforeDrag = function (sourceNodeScope) {\n              return true;\n            };\n\n            callbacks.expandTimeoutStart = function()\n            {\n\n            };\n\n            callbacks.expandTimeoutCancel = function()\n            {\n\n            };\n\n            callbacks.expandTimeoutEnd = function()\n            {\n\n            };\n\n            callbacks.removed = function (node) {\n\n            };\n\n            /**\n             * Callback is fired when a node is successfully dropped in a new location\n             * @param event\n             */\n            callbacks.dropped = function (event) {\n\n            };\n\n            /**\n             * Callback is fired each time the user starts dragging a node\n             * @param event\n             */\n            callbacks.dragStart = function (event) {\n\n            };\n\n            /**\n             * Callback is fired each time a dragged node is moved with the mouse/touch.\n             * @param event\n             */\n            callbacks.dragMove = function (event) {\n\n            };\n\n            /**\n             * Callback is fired when the tree exits drag mode. If the user dropped a node, the drop may have been\n             * accepted or reverted.\n             * @param event\n             */\n            callbacks.dragStop = function (event) {\n\n            };\n\n            /**\n             * Callback is fired when a user drops a node (but prior to processing the drop action)\n             * beforeDrop can return a Promise, truthy, or falsy (returning nothing is falsy).\n             * If it returns falsy, or a resolve Promise, the node move is accepted\n             * If it returns truthy, or a rejected Promise, the node move is reverted\n             * @param event\n             * @returns {Boolean|Promise} Truthy (or rejected Promise) to cancel node move; falsy (or resolved promise)\n             */\n            callbacks.beforeDrop = function (event) {\n\n            };\n\n            /**\n             * Callback is fired when a user toggles node (but after processing the toggle action)\n             * @param sourceNodeScope\n             * @param collapsed\n             */\n            callbacks.toggle = function (collapsed, sourceNodeScope) {\n\n            };\n\n            scope.$watch(attrs.uiTree, function (newVal, oldVal) {\n              angular.forEach(newVal, function (value, key) {\n                if (callbacks[key]) {\n                  if (typeof value === 'function') {\n                    callbacks[key] = value;\n                  }\n                }\n              });\n\n              scope.$callbacks = callbacks;\n            }, true);\n\n\n          }\n        };\n      }\n    ]);\n})();\n\n(function () {\n  'use strict';\n\n  angular.module('ui.tree')\n    .directive('uiTreeHandle', ['treeConfig',\n      function (treeConfig) {\n        return {\n          require: '^uiTreeNode',\n          restrict: 'A',\n          scope: true,\n          controller: 'TreeHandleController',\n          link: function (scope, element, attrs, treeNodeCtrl) {\n            var config = {};\n            angular.extend(config, treeConfig);\n            if (config.handleClass) {\n              element.addClass(config.handleClass);\n            }\n            // connect with the tree node.\n            if (scope != treeNodeCtrl.scope) {\n              scope.$nodeScope = treeNodeCtrl.scope;\n              treeNodeCtrl.scope.$handleScope = scope;\n            }\n          }\n        };\n      }\n    ]);\n})();\n\n(function () {\n  'use strict';\n\n  angular.module('ui.tree')\n\n    .directive('uiTreeNode', ['treeConfig', 'UiTreeHelper', '$window', '$document', '$timeout', '$q',\n      function (treeConfig, UiTreeHelper, $window, $document, $timeout, $q) {\n        return {\n          require: ['^uiTreeNodes', '^uiTree'],\n          restrict: 'A',\n          controller: 'TreeNodeController',\n          link: function (scope, element, attrs, controllersArr) {\n            var config = {},\n              hasTouch = 'ontouchstart' in window,\n              firstMoving,\n              dragInfo,\n              pos,\n              placeElm,\n              hiddenPlaceElm,\n              dragElm,\n              scrollContainerElm,\n              unhover,\n              treeScope = null,\n              elements, // As a parameter for callbacks\n              dragDelaying = true,\n              dragStarted = false,\n              dragTimer = null,\n              body = document.body,\n              html = document.documentElement,\n              document_height,\n              document_width,\n              dragStart,\n              tagName,\n              dragMove,\n              dragEnd,\n              dragStartEvent,\n              dragMoveEvent,\n              dragEndEvent,\n              dragCancelEvent,\n              dragDelay,\n              bindDragStartEvents,\n              bindDragMoveEvents,\n              unbindDragMoveEvents,\n              keydownHandler,\n              isHandleChild,\n              el,\n              isUiTreeRoot,\n              treeOfOrigin;\n\n            //Adding configured class to ui-tree-node.\n            angular.extend(config, treeConfig);\n\n            if (config.nodeClass) {\n              element.addClass(config.nodeClass);\n            }\n\n            //Call init function in nodeCtrl, sets parent node and sets up sub nodes.\n            scope.init(controllersArr);\n\n            scope.collapsed = !!UiTreeHelper.getNodeAttribute(scope, 'collapsed') || treeConfig.defaultCollapsed;\n            scope.expandOnHover = !!UiTreeHelper.getNodeAttribute(scope, 'expandOnHover');\n            scope.scrollContainer = UiTreeHelper.getNodeAttribute(scope, 'scrollContainer') || attrs.scrollContainer || null;\n            scope.sourceOnly = scope.nodropEnabled || scope.$treeScope.nodropEnabled;\n\n            scope.$watch(attrs.collapsed, function (val) {\n              if ((typeof val) == 'boolean') {\n                scope.collapsed = val;\n              }\n            });\n\n            //Watches to trigger behavior based on actions and settings.\n            scope.$watch('collapsed', function (val) {\n              UiTreeHelper.setNodeAttribute(scope, 'collapsed', val);\n              attrs.$set('collapsed', val);\n            });\n\n            scope.$watch(attrs.expandOnHover, function(val) {\n              if ((typeof val) === 'boolean' || (typeof val) === 'number') {\n                scope.expandOnHover = val;\n              }\n            });\n\n            scope.$watch('expandOnHover', function (val) {\n              UiTreeHelper.setNodeAttribute(scope, 'expandOnHover', val);\n              attrs.$set('expandOnHover', val);\n            });\n\n            attrs.$observe('scrollContainer', function(val) {\n              if ((typeof val) === 'string') {\n                scope.scrollContainer = val;\n              }\n            });\n\n            scope.$watch('scrollContainer', function(val) {\n              UiTreeHelper.setNodeAttribute(scope, 'scrollContainer', val);\n              attrs.$set('scrollContainer', val);\n              scrollContainerElm = document.querySelector(val);\n            });\n\n            scope.$on('angular-ui-tree:collapse-all', function () {\n              scope.collapsed = true;\n            });\n\n            scope.$on('angular-ui-tree:expand-all', function () {\n              scope.collapsed = false;\n            });\n\n            /**\n             * Called when the user has grabbed a node and started dragging it.\n             *\n             * @param {MouseEvent} e event that is triggered by DOM.\n             * @return undefined?\n             */\n            dragStart = function (e) {\n\n              //Disable right click.\n              if (!hasTouch && (e.button === 2 || e.which === 3)) {\n                return;\n              }\n\n              //Event has already fired in other scope.\n              if (e.uiTreeDragging || (e.originalEvent && e.originalEvent.uiTreeDragging)) {\n                return;\n              }\n\n              //The node being dragged.\n              var eventElm = angular.element(e.target),\n                isHandleChild,\n                cloneElm,\n                eventElmTagName,\n                tagName,\n                eventObj,\n                tdElm,\n                hStyle,\n                isTreeNode,\n                isTreeNodeHandle;\n\n              //If the target element is a child element of a ui-tree-handle,\n              // use the containing handle element as target element.\n              isHandleChild = UiTreeHelper.treeNodeHandlerContainerOfElement(eventElm);\n              if (isHandleChild) {\n                eventElm = angular.element(isHandleChild);\n              }\n\n              cloneElm = element.clone();\n              isTreeNode = UiTreeHelper.elementIsTreeNode(eventElm);\n              isTreeNodeHandle = UiTreeHelper.elementIsTreeNodeHandle(eventElm);\n\n              //If we are not triggering mousedown on our uiTree or any of it's parts, return.\n              if (!isTreeNode && !isTreeNodeHandle) {\n                return;\n              }\n\n              //If we are not triggering mousedown on our uiTree or any of it's parts, return.\n              if (isTreeNode && UiTreeHelper.elementContainsTreeNodeHandler(eventElm)) {\n                return;\n              }\n\n              //Dragging not allowed on inputs or buttons.\n              eventElmTagName = eventElm.prop('tagName').toLowerCase();\n              if (eventElmTagName == 'input' ||\n                  eventElmTagName == 'textarea' ||\n                  eventElmTagName == 'button' ||\n                  eventElmTagName == 'select') {\n                return;\n              }\n\n              //Check if it or it's parents has a 'data-nodrag' attribute\n              el = angular.element(e.target);\n              isUiTreeRoot = el[0].attributes['ui-tree'];\n              while (el && el[0] && el[0] !== element && !isUiTreeRoot) {\n\n                //Checking that I can access attributes.\n                if (el[0].attributes) {\n                  isUiTreeRoot = el[0].attributes['ui-tree'];\n                }\n\n                //If the node mark as `nodrag`, DONOT drag it.\n                if (UiTreeHelper.nodrag(el)) {\n                  return;\n                }\n                el = el.parent();\n              }\n\n              //If users beforeDrag calback returns falsey, do not initiate.\n              if (!scope.beforeDrag(scope)) {\n                return;\n              }\n\n              //Set property checked at start of function to prevent running logic again.\n              e.uiTreeDragging = true;\n              if (e.originalEvent) {\n                e.originalEvent.uiTreeDragging = true;\n              }\n              e.preventDefault();\n\n              //Get original event if TouchEvent.\n              eventObj = UiTreeHelper.eventObj(e);\n\n              //Set boolean used to specify beginning of move.\n              firstMoving = true;\n\n              //Setting drag info properties and methods in scope of node being moved.\n              dragInfo = UiTreeHelper.dragInfo(scope);\n\n              //Setting original tree to adjust horizontal behavior in drag move.\n              treeOfOrigin = dragInfo.source.$treeScope.$id;\n\n              //Determine tage name of element ui-tree-node is on.\n              tagName = element.prop('tagName');\n\n              if (tagName.toLowerCase() === 'tr') {\n\n                //Create a new table column as placeholder.\n                placeElm = angular.element($window.document.createElement(tagName));\n\n                //Create a column placeholder and set colspan to whole row length.\n                tdElm = angular.element($window.document.createElement('td'))\n                    .addClass(config.placeholderClass)\n                    .attr('colspan', element[0].children.length);\n                placeElm.append(tdElm);\n              } else {\n\n                //If not a table just duplicate element and add placeholder class.\n                placeElm = angular.element($window.document.createElement(tagName))\n                    .addClass(config.placeholderClass);\n              }\n\n              //Create a hidden placeholder and add class from config.\n              hiddenPlaceElm = angular.element($window.document.createElement(tagName));\n              if (config.hiddenClass) {\n                hiddenPlaceElm.addClass(config.hiddenClass);\n              }\n\n              //Getting starting position of element being moved.\n              pos = UiTreeHelper.positionStarted(eventObj, element);\n              placeElm.css('height', element.prop('offsetHeight') + 'px');\n\n              //Creating drag element to represent node.\n              dragElm = angular.element($window.document.createElement(scope.$parentNodesScope.$element.prop('tagName')))\n                  .addClass(scope.$parentNodesScope.$element.attr('class')).addClass(config.dragClass);\n              dragElm.css('width', UiTreeHelper.width(element) + 'px');\n              dragElm.css('z-index', 9999);\n\n              //Prevents cursor to change rapidly in Opera 12.16 and IE when dragging an element.\n              hStyle = (element[0].querySelector('.angular-ui-tree-handle') || element[0]).currentStyle;\n              if (hStyle) {\n                document.body.setAttribute('ui-tree-cursor', $document.find('body').css('cursor') || '');\n                $document.find('body').css({'cursor': hStyle.cursor + '!important'});\n              }\n\n              //If tree is sourceOnly (noDragDrop) don't show placeholder when moving about it.\n              if (scope.sourceOnly) {\n                placeElm.css('display', 'none');\n              }\n\n              //Insert placeholder.\n              element.after(placeElm);\n              element.after(hiddenPlaceElm);\n              if (dragInfo.isClone() && scope.sourceOnly) {\n                dragElm.append(cloneElm);\n              } else {\n                dragElm.append(element);\n              }\n\n              //Create drag element.\n              $document.find('body').append(dragElm);\n\n              //Set drag elements position on screen.\n              dragElm.css({\n                'left': eventObj.pageX - pos.offsetX + 'px',\n                'top': eventObj.pageY - pos.offsetY + 'px'\n              });\n              elements = {\n                placeholder: placeElm,\n                dragging: dragElm\n              };\n\n              //Create all drag/move bindings.\n              bindDragMoveEvents();\n\n              //Fire dragStart callback.\n              scope.$apply(function () {\n                scope.$treeScope.$callbacks.dragStart(dragInfo.eventArgs(elements, pos));\n              });\n\n              //Get bounds of document.\n              document_height = Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight);\n              document_width = Math.max(body.scrollWidth, body.offsetWidth, html.clientWidth, html.scrollWidth, html.offsetWidth);\n            };\n\n            dragMove = function (e) {\n              var eventObj = UiTreeHelper.eventObj(e),\n                prev,\n                next,\n                leftElmPos,\n                topElmPos,\n                top_scroll,\n                bottom_scroll,\n                scrollContainerElmRect,\n                target,\n                targetX,\n                targetY,\n                displayElm,\n                targetNode,\n                targetElm,\n                isEmpty,\n                scrollDownBy,\n                scrollUpBy,\n                targetOffset,\n                targetBefore,\n                moveWithinTree,\n                targetBeforeBuffer,\n                targetHeight,\n                targetChildElm,\n                targetChildHeight,\n                isDropzone;\n\n              //If check ensures that drag element was created.\n              if (dragElm) {\n                e.preventDefault();\n\n                //Deselect anything (text, etc.) that was selected when move began.\n                if ($window.getSelection) {\n                  $window.getSelection().removeAllRanges();\n                } else if ($window.document.selection) {\n                  $window.document.selection.empty();\n                }\n\n                //Get top left positioning of element being moved.\n                leftElmPos = eventObj.pageX - pos.offsetX;\n                topElmPos = eventObj.pageY - pos.offsetY;\n\n                //dragElm can't leave the screen on the left.\n                if (leftElmPos < 0) {\n                  leftElmPos = 0;\n                }\n\n                //dragElm can't leave the screen on the top.\n                if (topElmPos < 0) {\n                  topElmPos = 0;\n                }\n\n                //dragElm can't leave the screen on the bottom.\n                if ((topElmPos + 10) > document_height) {\n                  topElmPos = document_height - 10;\n                }\n\n                //dragElm can't leave the screen on the right.\n                if ((leftElmPos + 10) > document_width) {\n                  leftElmPos = document_width - 10;\n                }\n\n                //Updating element being moved css.\n                dragElm.css({\n                  'left': leftElmPos + 'px',\n                  'top': topElmPos + 'px'\n                });\n\n                if (scrollContainerElm) {\n                  //Getting position to top and bottom of container element.\n                  scrollContainerElmRect = scrollContainerElm.getBoundingClientRect();\n                  top_scroll = scrollContainerElm.scrollTop;\n                  bottom_scroll = top_scroll + scrollContainerElm.clientHeight;\n\n                  //To scroll down if cursor y-position is greater than the bottom position of the container vertical scroll\n                  if (scrollContainerElmRect.bottom < eventObj.clientY && bottom_scroll < scrollContainerElm.scrollHeight) {\n                    scrollDownBy = Math.min(scrollContainerElm.scrollHeight - bottom_scroll, 10);\n                    scrollContainerElm.scrollTop += scrollDownBy;\n                  }\n\n                  //To scroll top if cursor y-position is less than the top position of the container vertical scroll\n                  if (scrollContainerElmRect.top > eventObj.clientY && top_scroll > 0) {\n                    scrollUpBy = Math.min(top_scroll, 10);\n                    scrollContainerElm.scrollTop -= scrollUpBy;\n                  }\n                } else {\n                  //Getting position to top and bottom of page.\n                  top_scroll = window.pageYOffset || $window.document.documentElement.scrollTop;\n                  bottom_scroll = top_scroll + (window.innerHeight || $window.document.clientHeight || $window.document.clientHeight);\n\n                  //To scroll down if cursor y-position is greater than the bottom position of the window vertical scroll\n                  if (bottom_scroll < eventObj.pageY && bottom_scroll < document_height) {\n                    scrollDownBy = Math.min(document_height - bottom_scroll, 10);\n                    window.scrollBy(0, scrollDownBy);\n                  }\n\n                  //To scroll top if cursor y-position is less than the top position of the window vertical scroll\n                  if (top_scroll > eventObj.pageY) {\n                    scrollUpBy = Math.min(top_scroll, 10);\n                    window.scrollBy(0, -scrollUpBy);\n                  }\n                }\n\n                //Calling service to update position coordinates based on move.\n                UiTreeHelper.positionMoved(e, pos, firstMoving);\n                if (firstMoving) {\n                  firstMoving = false;\n                  return;\n                }\n\n                //Setting X point for elementFromPoint.\n                targetX = eventObj.pageX - ($window.pageXOffset ||\n                    $window.document.body.scrollLeft ||\n                    $window.document.documentElement.scrollLeft) -\n                    ($window.document.documentElement.clientLeft || 0);\n\n                targetY = eventObj.pageY - ($window.pageYOffset ||\n                    $window.document.body.scrollTop ||\n                    $window.document.documentElement.scrollTop) -\n                    ($window.document.documentElement.clientTop || 0);\n\n                //Select the drag target. Because IE does not support CSS 'pointer-events: none', it will always\n                // pick the drag element itself as the target. To prevent this, we hide the drag element while\n                // selecting the target.\n                if (angular.isFunction(dragElm.hide)) {\n                  dragElm.hide();\n                } else {\n                  displayElm = dragElm[0].style.display;\n                  dragElm[0].style.display = 'none';\n                }\n\n                //When using elementFromPoint() inside an iframe, you have to call\n                // elementFromPoint() twice to make sure IE8 returns the correct value\n                //MDN: The elementFromPoint() method of the Document interface returns the topmost element at the specified coordinates.\n                $window.document.elementFromPoint(targetX, targetY);\n\n                //Set target element (element in specified x/y coordinates).\n                targetElm = angular.element($window.document.elementFromPoint(targetX, targetY));\n\n                //If the target element is a child element of a ui-tree-handle,\n                // use the containing handle element as target element\n                isHandleChild = UiTreeHelper.treeNodeHandlerContainerOfElement(targetElm);\n                if (isHandleChild) {\n                  targetElm = angular.element(isHandleChild);\n                }\n\n                if (angular.isFunction(dragElm.show)) {\n                  dragElm.show();\n                } else {\n                  dragElm[0].style.display = displayElm;\n                }\n\n                //Assigning scope to target you are moving draggable over.\n                if (UiTreeHelper.elementIsTree(targetElm)) {\n                  targetNode = targetElm.controller('uiTree').scope;\n                } else if (UiTreeHelper.elementIsTreeNodeHandle(targetElm)) {\n                  targetNode = targetElm.controller('uiTreeHandle').scope;\n                } else if (UiTreeHelper.elementIsTreeNode(targetElm)) {\n                  targetNode = targetElm.controller('uiTreeNode').scope;\n                } else if (UiTreeHelper.elementIsTreeNodes(targetElm)) {\n                  targetNode = targetElm.controller('uiTreeNodes').scope;\n                } else if (UiTreeHelper.elementIsPlaceholder(targetElm)) {\n                  targetNode = targetElm.controller('uiTreeNodes').scope;\n                } else if (UiTreeHelper.elementIsDropzone(targetElm)) {\n                  targetNode = targetElm.controller('uiTree').scope;\n                  isDropzone = true;\n                } else if (targetElm.controller('uiTreeNode')) {\n                  //Is a child element of a node.\n                  targetNode = targetElm.controller('uiTreeNode').scope;\n                }\n\n                moveWithinTree =  (targetNode && targetNode.$treeScope && targetNode.$treeScope.$id && targetNode.$treeScope.$id === treeOfOrigin);\n\n                /* (jcarter) Notes to developers:\n                 *  pos.dirAx is either 0 or 1\n                 *  1 means horizontal movement is happening\n                 *  0 means vertical movement is happening\n                 */\n\n                // Move nodes up and down in nesting level.\n                if (moveWithinTree && pos.dirAx) {\n\n                  // increase horizontal level if previous sibling exists and is not collapsed\n                  // example 1.1.1 becomes 1.2\n                  if (pos.distX > 0) {\n                    prev = dragInfo.prev();\n                    if (prev && !prev.collapsed\n                      && prev.accept(scope, prev.childNodesCount())) {\n                      prev.$childNodesScope.$element.append(placeElm);\n                      dragInfo.moveTo(prev.$childNodesScope, prev.childNodes(), prev.childNodesCount());\n                    }\n                  }\n\n                  // decrease horizontal level\n                  // example 1.2 become 1.1.1\n                  if (pos.distX < 0) {\n                    // we can't decrease a level if an item preceeds the current one\n                    next = dragInfo.next();\n                    if (!next) {\n                      target = dragInfo.parentNode(); // As a sibling of it's parent node\n                      if (target\n                        && target.$parentNodesScope.accept(scope, target.index() + 1)) {\n                        target.$element.after(placeElm);\n                        dragInfo.moveTo(target.$parentNodesScope, target.siblings(), target.index() + 1);\n                      }\n                    }\n                  }\n                } else { //Either in origin tree and moving horizontally OR you are moving within a new tree.\n\n                  //Check it's new position.\n                  isEmpty = false;\n\n                  //Exit if target is not a uiTree or child of one.\n                  if (!targetNode) {\n                    return;\n                  }\n\n                  //Show the placeholder if it was hidden for nodrop-enabled and this is a new tree\n                  if (targetNode.$treeScope && !targetNode.$parent.nodropEnabled && !targetNode.$treeScope.nodropEnabled) {\n                    placeElm.css('display', '');\n                  }\n\n                  //Set whether target tree is empty or not.\n                  if (targetNode.$type === 'uiTree' && targetNode.dragEnabled) {\n                    isEmpty = targetNode.isEmpty();\n                  }\n\n                  //If target is a handle set new target to handle's node.\n                  if (targetNode.$type === 'uiTreeHandle') {\n                    targetNode = targetNode.$nodeScope;\n                  }\n\n                  //Check if it is a uiTreeNode or it's an empty tree or it's a dropzone.\n                  if (targetNode.$type !== 'uiTreeNode' && !isEmpty && !isDropzone) {\n\n                    // Allow node to return to its original position if no longer hovering over target\n                    if (config.appendChildOnHover) {\n                      next = dragInfo.next();\n                      if (!next && unhover) {\n                        target = dragInfo.parentNode();\n                        target.$element.after(placeElm);\n                        dragInfo.moveTo(target.$parentNodesScope, target.siblings(), target.index() + 1);\n                        unhover = false;\n                      }\n                    }\n                    return;\n                  }\n\n                  //If placeholder move from empty tree, reset it.\n                  if (treeScope && placeElm.parent()[0] != treeScope.$element[0]) {\n                    treeScope.resetEmptyElement();\n                    treeScope.resetDropzoneElement();\n                    treeScope = null;\n                  }\n\n                  //It's an empty tree\n                  if (isEmpty) {\n                    treeScope = targetNode;\n                    if (targetNode.$nodesScope.accept(scope, 0)) {\n                      dragInfo.moveTo(targetNode.$nodesScope, targetNode.$nodesScope.childNodes(), 0);\n                    }\n                  //It's a dropzone\n                  } else if (isDropzone) {\n                    treeScope = targetNode;\n                    if (targetNode.$nodesScope.accept(scope, targetNode.$nodesScope.childNodes().length)) {\n                      dragInfo.moveTo(targetNode.$nodesScope, targetNode.$nodesScope.childNodes(), targetNode.$nodesScope.childNodes().length);\n                    }\n                  //Not empty and drag enabled.\n                  } else if (targetNode.dragEnabled()) {\n\n                      //Setting/Resetting data for exanding on hover.\n                      if (angular.isDefined(scope.expandTimeoutOn) && scope.expandTimeoutOn !== targetNode.id) {\n                        $timeout.cancel(scope.expandTimeout);\n                        delete scope.expandTimeout;\n                        delete scope.expandTimeoutOn;\n\n                        scope.$callbacks.expandTimeoutCancel();\n                      }\n\n                      //Determining if expansion is needed.\n                      if (targetNode.collapsed) {\n                        if (scope.expandOnHover === true || (angular.isNumber(scope.expandOnHover) && scope.expandOnHover === 0)) {\n                          targetNode.collapsed = false;\n                          targetNode.$treeScope.$callbacks.toggle(false, targetNode);\n                        } else if (scope.expandOnHover !== false && angular.isNumber(scope.expandOnHover) && scope.expandOnHover > 0) {\n\n                          //Triggering expansion.\n                          if (angular.isUndefined(scope.expandTimeoutOn)) {\n                            scope.expandTimeoutOn = targetNode.$id;\n\n                            scope.$callbacks.expandTimeoutStart();\n                            scope.expandTimeout = $timeout(function()\n                            {\n                              scope.$callbacks.expandTimeoutEnd();\n                              targetNode.collapsed = false;\n                              targetNode.$treeScope.$callbacks.toggle(false, targetNode);\n                            }, scope.expandOnHover);\n                          }\n                        }\n                      }\n\n                    //Get the element of ui-tree-node\n                    targetElm = targetNode.$element;\n                    targetOffset = UiTreeHelper.offset(targetElm);\n                    targetHeight = UiTreeHelper.height(targetElm);\n                    targetChildElm = targetNode.$childNodesScope ? targetNode.$childNodesScope.$element : null;\n                    targetChildHeight = targetChildElm ? UiTreeHelper.height(targetChildElm) : 0;\n                    targetHeight -= targetChildHeight;\n                    targetBeforeBuffer = config.appendChildOnHover ? targetHeight * 0.25 : UiTreeHelper.height(targetElm) / 2;\n                    targetBefore = eventObj.pageY < (targetOffset.top + targetBeforeBuffer);\n\n                    if (targetNode.$parentNodesScope.accept(scope, targetNode.index())) {\n                      if (targetBefore) {\n                        targetElm[0].parentNode.insertBefore(placeElm[0], targetElm[0]);\n                        dragInfo.moveTo(targetNode.$parentNodesScope, targetNode.siblings(), targetNode.index());\n                      } else {\n                        // Try to append as a child if dragged upwards onto targetNode\n                        if (config.appendChildOnHover && targetNode.accept(scope, targetNode.childNodesCount())) {\n                          targetNode.$childNodesScope.$element.prepend(placeElm);\n                          dragInfo.moveTo(targetNode.$childNodesScope, targetNode.childNodes(), 0);\n                          unhover = true;\n                        } else {\n                          targetElm.after(placeElm);\n                          dragInfo.moveTo(targetNode.$parentNodesScope, targetNode.siblings(), targetNode.index() + 1);\n                        }\n                      }\n\n                    //We have to check if it can add the dragging node as a child.\n                    } else if (!targetBefore && targetNode.accept(scope, targetNode.childNodesCount())) {\n                      targetNode.$childNodesScope.$element.append(placeElm);\n                      dragInfo.moveTo(targetNode.$childNodesScope, targetNode.childNodes(), targetNode.childNodesCount());\n                    }\n                  }\n                }\n\n                //Triggering dragMove callback.\n                scope.$apply(function () {\n                  scope.$treeScope.$callbacks.dragMove(dragInfo.eventArgs(elements, pos));\n                });\n              }\n            };\n\n            dragEnd = function (e) {\n\n              var dragEventArgs = dragInfo.eventArgs(elements, pos);\n\n              e.preventDefault();\n\n              //TODO(jcarter): Is dragStart need to be unbound?\n              unbindDragMoveEvents();\n\n              //This cancel the collapse/expand login running.\n              $timeout.cancel(scope.expandTimeout);\n\n              scope.$treeScope.$apply(function () {\n                $q.when(scope.$treeScope.$callbacks.beforeDrop(dragEventArgs))\n\n                     //Promise resolved (or callback didn't return false)\n                    .then(function (allowDrop) {\n                      if (allowDrop !== false && scope.$$allowNodeDrop) {\n                        //Node drop accepted.\n                        dragInfo.apply();\n\n                        //Fire the dropped callback only if the move was successful.\n                        scope.$treeScope.$callbacks.dropped(dragEventArgs);\n                      } else {\n                        //Drop canceled - revert the node to its original position.\n                        bindDragStartEvents();\n                      }\n                    })\n\n                    //Promise rejected - revert the node to its original position.\n                    .catch(function () {\n                      bindDragStartEvents();\n                    })\n                    .finally(function () {\n\n                      //Replace placeholder with newly dropped element.\n                      hiddenPlaceElm.replaceWith(scope.$element);\n                      placeElm.remove();\n\n                      //Remove drag element if still in DOM.\n                      if (dragElm) {\n                        dragElm.remove();\n                        dragElm = null;\n                      }\n\n                      //Fire dragStope callback.\n                      scope.$treeScope.$callbacks.dragStop(dragEventArgs);\n                      scope.$$allowNodeDrop = false;\n                      dragInfo = null;\n\n                      //Restore cursor in Opera 12.16 and IE\n                      var oldCur = document.body.getAttribute('ui-tree-cursor');\n                      if (oldCur !== null) {\n                        $document.find('body').css({'cursor': oldCur});\n                        document.body.removeAttribute('ui-tree-cursor');\n                      }\n                    });\n              });\n            };\n\n            dragStartEvent = function (e) {\n              if (scope.dragEnabled()) {\n                dragStart(e);\n              }\n            };\n\n            dragMoveEvent = function (e) {\n              dragMove(e);\n            };\n\n            dragEndEvent = function (e) {\n              scope.$$allowNodeDrop = true;\n              dragEnd(e);\n            };\n\n            dragCancelEvent = function (e) {\n              dragEnd(e);\n            };\n\n            dragDelay = (function () {\n              var to;\n\n              return {\n                exec: function (fn, ms) {\n                  if (!ms) {\n                    ms = 0;\n                  }\n                  this.cancel();\n                  to = $timeout(fn, ms);\n                },\n                cancel: function () {\n                  $timeout.cancel(to);\n                }\n              };\n            })();\n\n            keydownHandler = function (e) {\n              if (e.keyCode === 27) {\n                dragEndEvent(e);\n              }\n            };\n\n            /**\n             * Binds the mouse/touch events to enable drag start for this node.\n             */\n            //This is outside of bindDragMoveEvents because of the potential for a delay setting.\n            bindDragStartEvents = function () {\n              element.bind('touchstart mousedown', function (e) {\n                //Don't call drag delay if no delay was specified.\n                if (scope.dragDelay > 0) {\n                  dragDelay.exec(function () {\n                    dragStartEvent(e);\n                  }, scope.dragDelay);\n                } else {\n                  dragStartEvent(e);\n                }\n              });\n              element.bind('touchend touchcancel mouseup', function () {\n                if (scope.dragDelay > 0) {\n                  dragDelay.cancel();\n                }\n              });\n            };\n            bindDragStartEvents();\n\n            /**\n             * Binds mouse/touch events that handle moving/dropping this dragged node\n             */\n            bindDragMoveEvents = function () {\n              angular.element($document).bind('touchend', dragEndEvent);\n              angular.element($document).bind('touchcancel', dragEndEvent);\n              angular.element($document).bind('touchmove', dragMoveEvent);\n              angular.element($document).bind('mouseup', dragEndEvent);\n              angular.element($document).bind('mousemove', dragMoveEvent);\n              angular.element($document).bind('mouseleave', dragCancelEvent);\n              angular.element($document).bind('keydown', keydownHandler);\n            };\n\n            /**\n             * Unbinds mouse/touch events that handle moving/dropping this dragged node.\n             */\n            unbindDragMoveEvents = function () {\n              angular.element($document).unbind('touchend', dragEndEvent);\n              angular.element($document).unbind('touchcancel', dragEndEvent);\n              angular.element($document).unbind('touchmove', dragMoveEvent);\n              angular.element($document).unbind('mouseup', dragEndEvent);\n              angular.element($document).unbind('mousemove', dragMoveEvent);\n              angular.element($document).unbind('mouseleave', dragCancelEvent);\n              angular.element($document).unbind('keydown', keydownHandler);\n            };\n          }\n        };\n      }\n    ]);\n})();\n\n(function () {\n  'use strict';\n\n  angular.module('ui.tree')\n    .directive('uiTreeNodes', ['treeConfig', '$window',\n      function (treeConfig) {\n        return {\n          require: ['ngModel', '?^uiTreeNode', '^uiTree'],\n          restrict: 'A',\n          scope: true,\n          controller: 'TreeNodesController',\n          link: function (scope, element, attrs, controllersArr) {\n\n            var config = {},\n                ngModel = controllersArr[0],\n                treeNodeCtrl = controllersArr[1],\n                treeCtrl = controllersArr[2];\n\n            angular.extend(config, treeConfig);\n            if (config.nodesClass) {\n              element.addClass(config.nodesClass);\n            }\n\n            if (treeNodeCtrl) {\n              treeNodeCtrl.scope.$childNodesScope = scope;\n              scope.$nodeScope = treeNodeCtrl.scope;\n            } else {\n              // find the root nodes if there is no parent node and have a parent ui-tree\n              treeCtrl.scope.$nodesScope = scope;\n            }\n            scope.$treeScope = treeCtrl.scope;\n\n            if (ngModel) {\n              ngModel.$render = function () {\n                scope.$modelValue = ngModel.$modelValue;\n              };\n            }\n\n            scope.$watch(function () {\n              return attrs.maxDepth;\n            }, function (val) {\n              if ((typeof val) == 'number') {\n                scope.maxDepth = val;\n              }\n            });\n\n            scope.$watch(function () {\n              return attrs.nodropEnabled;\n            }, function (newVal) {\n              if ((typeof newVal) != 'undefined') {\n                scope.nodropEnabled = true;\n              }\n            }, true);\n\n          }\n        };\n      }\n    ]);\n})();\n\n(function () {\n  'use strict';\n\n  angular.module('ui.tree')\n\n  /**\n   * @ngdoc service\n   * @name ui.tree.service:UiTreeHelper\n   * @requires ng.$document\n   * @requires ng.$window\n   *\n   * @description\n   * angular-ui-tree.\n   */\n    .factory('UiTreeHelper', ['$document', '$window', 'treeConfig',\n      function ($document, $window, treeConfig) {\n        return {\n\n          /**\n           * A hashtable used to storage data of nodes\n           * @type {Object}\n           */\n          nodesData: {},\n\n          setNodeAttribute: function (scope, attrName, val) {\n            if (!scope.$modelValue) {\n              return null;\n            }\n            var data = this.nodesData[scope.$modelValue.$$hashKey];\n            if (!data) {\n              data = {};\n              this.nodesData[scope.$modelValue.$$hashKey] = data;\n            }\n            data[attrName] = val;\n          },\n\n          getNodeAttribute: function (scope, attrName) {\n            if (!scope.$modelValue) {\n              return null;\n            }\n            var data = this.nodesData[scope.$modelValue.$$hashKey];\n            if (data) {\n              return data[attrName];\n            }\n            return null;\n          },\n\n          /**\n           * @ngdoc method\n           * @methodOf ui.tree.service:$nodrag\n           * @param  {Object} targetElm angular element\n           * @return {Bool} check if the node can be dragged.\n           */\n          nodrag: function (targetElm) {\n            if (typeof targetElm.attr('data-nodrag') != 'undefined') {\n              return targetElm.attr('data-nodrag') !== 'false';\n            }\n            return false;\n          },\n\n          /**\n           * Get the event object for touches.\n           * \n           * @param  {MouseEvent|TouchEvent} e MouseEvent or TouchEvent that kicked off dragX method.\n           * @return {MouseEvent|TouchEvent} Object returned as original event object.\n           */\n          eventObj: function (e) {\n            var obj = e;\n            if (e.targetTouches !== undefined) {\n              //Set obj equal to the first Touch object in the TouchList.\n              obj = e.targetTouches.item(0);\n            //Logic to set obj to original TouchEvent.\n            } else if (e.originalEvent !== undefined && e.originalEvent.targetTouches !== undefined) {\n              obj = e.originalEvent.targetTouches.item(0);\n            }\n            return obj;\n          },\n\n          /**\n           * Generate object used to store data about node being moved.\n           * \n           * {angular.$scope} node Scope of the node that is being moved.\n           */\n          dragInfo: function (node) {\n            return {\n              source: node,\n              sourceInfo: {\n                cloneModel: node.$treeScope.cloneEnabled === true ? angular.copy(node.$modelValue) : undefined,\n                nodeScope: node,\n                index: node.index(),\n                nodesScope: node.$parentNodesScope\n              },\n              index: node.index(),\n\n              //Slice(0) just duplicates an array.\n              siblings: node.siblings().slice(0),\n              parent: node.$parentNodesScope,\n\n              //Reset parent to source parent.\n              resetParent: function() {\n                this.parent = node.$parentNodesScope;\n              },\n\n              //Move the node to a new position, determining where the node will be inserted to when dropped happens here.\n              moveTo: function (parent, siblings, index) {\n                this.parent = parent;\n\n                //Duplicate siblings array.\n                this.siblings = siblings.slice(0);\n\n                //If source node is in the target nodes\n                var i = this.siblings.indexOf(this.source);\n                if (i > -1) {\n                  this.siblings.splice(i, 1);\n                  if (this.source.index() < index) {\n                    index--;\n                  }\n                }\n\n                this.siblings.splice(index, 0, this.source);\n                this.index = index;\n              },\n\n              //Get parent nodes nodeScope.\n              parentNode: function () {\n                return this.parent.$nodeScope;\n              },\n\n              //Get previous sibling node.\n              prev: function () {\n                if (this.index > 0) {\n                  return this.siblings[this.index - 1];\n                }\n\n                return null;\n              },\n\n              //Get next sibling node.\n              next: function () {\n                if (this.index < this.siblings.length - 1) {\n                  return this.siblings[this.index + 1];\n                }\n\n                return null;\n              },\n\n              //Return what cloneEnabled is set to on uiTree.\n              isClone: function () {\n                return this.source.$treeScope.cloneEnabled === true;\n              },\n\n              //Returns a copy of node passed in.\n              clonedNode: function (node) {\n                return angular.copy(node);\n              },\n\n              //Returns true if parent or index have changed (move happened within any uiTree).\n              isDirty: function () {\n                return this.source.$parentNodesScope != this.parent ||\n                  this.source.index() != this.index;\n              },\n\n              //Return whether node has a new parent (set on moveTo method).\n              isForeign: function () {\n                return this.source.$treeScope !== this.parent.$treeScope;\n              },\n\n              //Sets arguments passed to user callbacks.\n              eventArgs: function (elements, pos) {\n                return {\n                  source: this.sourceInfo,\n                  dest: {\n                    index: this.index,\n                    nodesScope: this.parent\n                  },\n                  elements: elements,\n                  pos: pos\n                };\n              },\n\n              //Method that actually manipulates the node being moved.\n              apply: function () {\n\n                var nodeData = this.source.$modelValue;\n\n                //Nodrop enabled on tree or parent\n                if (this.parent.nodropEnabled || this.parent.$treeScope.nodropEnabled) {\n                  return;\n                }\n\n                //Node was dropped in the same place - do nothing.\n                if (!this.isDirty()) {\n                  return;\n                }\n\n                //CloneEnabled and cross-tree so copy and do not remove from source.\n                if (this.isClone() && this.isForeign()) {\n                  this.parent.insertNode(this.index, this.sourceInfo.cloneModel);\n                //Any other case, remove and reinsert.\n                } else {\n                  this.source.remove();\n                  this.parent.insertNode(this.index, nodeData);\n                }\n              }\n            };\n          },\n\n          /**\n           * @ngdoc method\n           * @name ui.tree#height\n           * @methodOf ui.tree.service:UiTreeHelper\n           *\n           * @description\n           * Get the height of an element.\n           *\n           * @param {Object} element Angular element.\n           * @returns {String} Height\n           */\n          height: function (element) {\n            return element.prop('scrollHeight');\n          },\n\n          /**\n           * @ngdoc method\n           * @name ui.tree#width\n           * @methodOf ui.tree.service:UiTreeHelper\n           *\n           * @description\n           * Get the width of an element.\n           *\n           * @param {Object} element Angular element.\n           * @returns {String} Width\n           */\n          width: function (element) {\n            return element.prop('scrollWidth');\n          },\n\n          /**\n           * @ngdoc method\n           * @name ui.tree#offset\n           * @methodOf ui.nestedSortable.service:UiTreeHelper\n           *\n           * @description\n           * Get the offset values of an element.\n           *\n           * @param {Object} element Angular element.\n           * @returns {Object} Object with properties width, height, top and left\n           */\n          offset: function (element) {\n            var boundingClientRect = element[0].getBoundingClientRect();\n\n            return {\n              width: element.prop('offsetWidth'),\n              height: element.prop('offsetHeight'),\n              top: boundingClientRect.top + ($window.pageYOffset || $document[0].body.scrollTop || $document[0].documentElement.scrollTop),\n              left: boundingClientRect.left + ($window.pageXOffset || $document[0].body.scrollLeft || $document[0].documentElement.scrollLeft)\n            };\n          },\n\n          /**\n           * @ngdoc method\n           * @name ui.tree#positionStarted\n           * @methodOf ui.tree.service:UiTreeHelper\n           *\n           * @description\n           * Get the start position of the target element according to the provided event properties.\n           *\n           * @param {Object} e Event\n           * @param {Object} target Target element\n           * @returns {Object} Object with properties offsetX, offsetY, startX, startY, nowX and dirX.\n           */\n          positionStarted: function (e, target) {\n            var pos = {},\n            pageX = e.pageX,\n            pageY = e.pageY;\n\n            //Check to set correct data for TouchEvents\n            if (e.originalEvent && e.originalEvent.touches && (e.originalEvent.touches.length > 0)) {\n              pageX = e.originalEvent.touches[0].pageX;\n              pageY = e.originalEvent.touches[0].pageY;\n            }\n            pos.offsetX = pageX - this.offset(target).left;\n            pos.offsetY = pageY - this.offset(target).top;\n            pos.startX = pos.lastX = pageX;\n            pos.startY = pos.lastY = pageY;\n            pos.nowX = pos.nowY = pos.distX = pos.distY = pos.dirAx = 0;\n            pos.dirX = pos.dirY = pos.lastDirX = pos.lastDirY = pos.distAxX = pos.distAxY = 0;\n            return pos;\n          },\n\n          positionMoved: function (e, pos, firstMoving) {\n\n            var pageX = e.pageX,\n            pageY = e.pageY,\n            newAx;\n\n            //If there are multiple touch points, choose one to use as X and Y.\n            if (e.originalEvent && e.originalEvent.touches && (e.originalEvent.touches.length > 0)) {\n              pageX = e.originalEvent.touches[0].pageX;\n              pageY = e.originalEvent.touches[0].pageY;\n            }\n\n            //Mouse position last event.\n            pos.lastX = pos.nowX;\n            pos.lastY = pos.nowY;\n\n            //Mouse position this event.\n            pos.nowX = pageX;\n            pos.nowY = pageY;\n\n            //Distance mouse moved between events.          \n            pos.distX = pos.nowX - pos.lastX;\n            pos.distY = pos.nowY - pos.lastY;\n\n            //Direction mouse was moving.           \n            pos.lastDirX = pos.dirX;\n            pos.lastDirY = pos.dirY;\n\n            //Direction mouse is now moving (on both axis).          \n            pos.dirX = pos.distX === 0 ? 0 : pos.distX > 0 ? 1 : -1;\n            pos.dirY = pos.distY === 0 ? 0 : pos.distY > 0 ? 1 : -1;\n\n            //Axis mouse is now moving on.         \n            newAx = Math.abs(pos.distX) > Math.abs(pos.distY) ? 1 : 0;\n\n            //Do nothing on first move.\n            if (firstMoving) {\n              pos.dirAx = newAx;\n              pos.moving = true;\n              return;\n            }\n\n            //Calc distance moved on this axis (and direction).          \n            if (pos.dirAx !== newAx) {\n              pos.distAxX = 0;\n              pos.distAxY = 0;\n            } else {\n              pos.distAxX += Math.abs(pos.distX);\n              if (pos.dirX !== 0 && pos.dirX !== pos.lastDirX) {\n                pos.distAxX = 0;\n              }\n              pos.distAxY += Math.abs(pos.distY);\n              if (pos.dirY !== 0 && pos.dirY !== pos.lastDirY) {\n                pos.distAxY = 0;\n              }\n            }\n            pos.dirAx = newAx;\n          },\n\n          elementIsTreeNode: function (element) {\n            return typeof element.attr('ui-tree-node') !== 'undefined';\n          },\n\n          elementIsTreeNodeHandle: function (element) {\n            return typeof element.attr('ui-tree-handle') !== 'undefined';\n          },\n          elementIsTree: function (element) {\n            return typeof element.attr('ui-tree') !== 'undefined';\n          },\n          elementIsTreeNodes: function (element) {\n            return typeof element.attr('ui-tree-nodes') !== 'undefined';\n          },\n          elementIsPlaceholder: function (element) {\n            return element.hasClass(treeConfig.placeholderClass);\n          },\n          elementIsDropzone: function (element) {\n            return element.hasClass(treeConfig.dropzoneClass);\n          },\n          elementContainsTreeNodeHandler: function (element) {\n            return element[0].querySelectorAll('[ui-tree-handle]').length >= 1;\n          },\n          treeNodeHandlerContainerOfElement: function (element) {\n            return findFirstParentElementWithAttribute('ui-tree-handle', element[0]);\n          }\n        };\n      }\n    ]);\n\n  // TODO: optimize this loop\n  //(Jcarter): Suggest adding a parent element property on uiTree, then all these bubble\n  // to <html> can trigger to stop when they reach the parent.\n  function findFirstParentElementWithAttribute(attributeName, childObj) {\n    //Undefined if the mouse leaves the browser window\n    if (childObj === undefined) {\n      return null;\n    }\n    var testObj = childObj.parentNode,\n    count = 1,\n    //Check for setAttribute due to exception thrown by Firefox when a node is dragged outside the browser window\n    res = (typeof testObj.setAttribute === 'function' && testObj.hasAttribute(attributeName)) ? testObj : null;\n    while (testObj && typeof testObj.setAttribute === 'function' && !testObj.hasAttribute(attributeName)) {\n      testObj = testObj.parentNode;\n      res = testObj;\n      //Stop once we reach top of page.\n      if (testObj === document.documentElement) {\n        res = null;\n        break;\n      }\n      count++;\n    }\n    return res;\n  }\n\n})();","require('./dist/angular-ui-tree');\nmodule.exports = 'ui.tree';\n"],"names":["angular","module","constant","treeClass","emptyTreeClass","dropzoneClass","hiddenClass","nodesClass","nodeClass","handleClass","placeholderClass","dragClass","dragThreshold","defaultCollapsed","appendChildOnHover","controller","$scope","$element","this","scope","$nodeScope","$type","$modelValue","$parentNodeScope","$childNodesScope","$parentNodesScope","$treeScope","$handleScope","$$allowNodeDrop","collapsed","expandOnHover","init","controllersArr","treeNodesCtrl","$index","initSubNode","on","destroySubNode","index","indexOf","dragEnabled","isSibling","targetNode","isChild","nodes","childNodes","prev","siblings","childNodesCount","length","hasChild","accept","sourceNode","destIndex","remove","removeNode","toggle","$callbacks","collapse","expand","depth","parentNode","maxSubDepth","countSubTreeDepth","childDepth","i","thisLevelDepth","Math","max","$timeout","$nodesMap","nodropEnabled","maxDepth","cloneEnabled","subNode","$$hashKey","beforeDrag","isParent","node","splice","removed","insertNode","nodeData","push","outOfDepth","$nodesScope","$emptyElm","$dropzoneElm","emptyPlaceholderEnabled","dragDelay","dropzoneEnabled","isEmpty","place","placeElm","append","resetEmptyElement","resetDropzoneElement","directive","treeConfig","$window","restrict","link","element","attrs","ctrl","tdElm","$trElm","emptyElmColspan","callbacks","config","extend","addClass","prop","toLowerCase","document","createElement","find","children","attr","$watch","val","isNumber","sourceNodeScope","destNodesScope","expandTimeoutStart","expandTimeoutCancel","expandTimeoutEnd","dropped","event","dragStart","dragMove","dragStop","beforeDrop","uiTree","newVal","oldVal","forEach","value","key","require","treeNodeCtrl","UiTreeHelper","$document","$q","firstMoving","dragInfo","pos","hiddenPlaceElm","dragElm","scrollContainerElm","unhover","elements","document_height","document_width","dragEnd","dragStartEvent","dragMoveEvent","dragEndEvent","dragCancelEvent","bindDragStartEvents","bindDragMoveEvents","unbindDragMoveEvents","keydownHandler","isHandleChild","el","isUiTreeRoot","treeOfOrigin","to","hasTouch","window","treeScope","body","html","documentElement","getNodeAttribute","scrollContainer","sourceOnly","setNodeAttribute","$set","$observe","querySelector","$on","e","button","which","uiTreeDragging","originalEvent","cloneElm","eventElmTagName","tagName","eventObj","hStyle","isTreeNode","isTreeNodeHandle","eventElm","target","treeNodeHandlerContainerOfElement","clone","elementIsTreeNode","elementIsTreeNodeHandle","elementContainsTreeNodeHandler","attributes","nodrag","parent","preventDefault","source","$id","positionStarted","css","width","currentStyle","setAttribute","cursor","after","isClone","left","pageX","offsetX","top","pageY","offsetY","placeholder","dragging","$apply","eventArgs","scrollHeight","offsetHeight","clientHeight","scrollWidth","offsetWidth","clientWidth","leftElmPos","topElmPos","top_scroll","bottom_scroll","scrollContainerElmRect","targetX","targetY","displayElm","targetElm","scrollDownBy","scrollUpBy","targetOffset","targetBefore","targetBeforeBuffer","targetHeight","targetChildElm","isDropzone","getSelection","removeAllRanges","selection","empty","getBoundingClientRect","scrollTop","bottom","clientY","min","pageYOffset","innerHeight","scrollBy","positionMoved","pageXOffset","scrollLeft","clientLeft","clientTop","isFunction","hide","style","display","elementFromPoint","show","elementIsTree","elementIsTreeNodes","elementIsPlaceholder","elementIsDropzone","dirAx","distX","moveTo","next","$parent","isDefined","expandTimeoutOn","id","cancel","expandTimeout","isUndefined","offset","height","insertBefore","prepend","dragEventArgs","when","then","allowDrop","apply","catch","finally","replaceWith","oldCur","getAttribute","removeAttribute","exec","fn","ms","keyCode","bind","unbind","ngModel","treeCtrl","$render","factory","nodesData","attrName","data","obj","undefined","targetTouches","item","sourceInfo","cloneModel","copy","nodeScope","nodesScope","slice","resetParent","clonedNode","isDirty","isForeign","dest","boundingClientRect","touches","startX","lastX","startY","lastY","nowX","nowY","distY","dirX","dirY","lastDirX","lastDirY","distAxX","distAxY","newAx","abs","moving","hasClass","querySelectorAll","attributeName","childObj","testObj","res","hasAttribute","findFirstParentElementWithAttribute"],"mappings":"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"}