{"version":3,"file":"merge-4c74bf92.js","sources":["../../node_modules/rxjs/_esm5/internal/operators/refCount.js","../../node_modules/rxjs/_esm5/internal/observable/ConnectableObservable.js","../../node_modules/rxjs/_esm5/internal/operators/mergeAll.js","../../node_modules/rxjs/_esm5/internal/observable/merge.js"],"sourcesContent":["/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nexport function refCount() {\n    return function refCountOperatorFunction(source) {\n        return source.lift(new RefCountOperator(source));\n    };\n}\nvar RefCountOperator = /*@__PURE__*/ (function () {\n    function RefCountOperator(connectable) {\n        this.connectable = connectable;\n    }\n    RefCountOperator.prototype.call = function (subscriber, source) {\n        var connectable = this.connectable;\n        connectable._refCount++;\n        var refCounter = new RefCountSubscriber(subscriber, connectable);\n        var subscription = source.subscribe(refCounter);\n        if (!refCounter.closed) {\n            refCounter.connection = connectable.connect();\n        }\n        return subscription;\n    };\n    return RefCountOperator;\n}());\nvar RefCountSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(RefCountSubscriber, _super);\n    function RefCountSubscriber(destination, connectable) {\n        var _this = _super.call(this, destination) || this;\n        _this.connectable = connectable;\n        return _this;\n    }\n    RefCountSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (!connectable) {\n            this.connection = null;\n            return;\n        }\n        this.connectable = null;\n        var refCount = connectable._refCount;\n        if (refCount <= 0) {\n            this.connection = null;\n            return;\n        }\n        connectable._refCount = refCount - 1;\n        if (refCount > 1) {\n            this.connection = null;\n            return;\n        }\n        var connection = this.connection;\n        var sharedConnection = connectable._connection;\n        this.connection = null;\n        if (sharedConnection && (!connection || sharedConnection === connection)) {\n            sharedConnection.unsubscribe();\n        }\n    };\n    return RefCountSubscriber;\n}(Subscriber));\n//# sourceMappingURL=refCount.js.map\n","/** PURE_IMPORTS_START tslib,_Subject,_Observable,_Subscriber,_Subscription,_operators_refCount PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { SubjectSubscriber } from '../Subject';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\nvar ConnectableObservable = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(ConnectableObservable, _super);\n    function ConnectableObservable(source, subjectFactory) {\n        var _this = _super.call(this) || this;\n        _this.source = source;\n        _this.subjectFactory = subjectFactory;\n        _this._refCount = 0;\n        _this._isComplete = false;\n        return _this;\n    }\n    ConnectableObservable.prototype._subscribe = function (subscriber) {\n        return this.getSubject().subscribe(subscriber);\n    };\n    ConnectableObservable.prototype.getSubject = function () {\n        var subject = this._subject;\n        if (!subject || subject.isStopped) {\n            this._subject = this.subjectFactory();\n        }\n        return this._subject;\n    };\n    ConnectableObservable.prototype.connect = function () {\n        var connection = this._connection;\n        if (!connection) {\n            this._isComplete = false;\n            connection = this._connection = new Subscription();\n            connection.add(this.source\n                .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n            if (connection.closed) {\n                this._connection = null;\n                connection = Subscription.EMPTY;\n            }\n        }\n        return connection;\n    };\n    ConnectableObservable.prototype.refCount = function () {\n        return higherOrderRefCount()(this);\n    };\n    return ConnectableObservable;\n}(Observable));\nexport { ConnectableObservable };\nexport var connectableObservableDescriptor = /*@__PURE__*/ (function () {\n    var connectableProto = ConnectableObservable.prototype;\n    return {\n        operator: { value: null },\n        _refCount: { value: 0, writable: true },\n        _subject: { value: null, writable: true },\n        _connection: { value: null, writable: true },\n        _subscribe: { value: connectableProto._subscribe },\n        _isComplete: { value: connectableProto._isComplete, writable: true },\n        getSubject: { value: connectableProto.getSubject },\n        connect: { value: connectableProto.connect },\n        refCount: { value: connectableProto.refCount }\n    };\n})();\nvar ConnectableSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(ConnectableSubscriber, _super);\n    function ConnectableSubscriber(destination, connectable) {\n        var _this = _super.call(this, destination) || this;\n        _this.connectable = connectable;\n        return _this;\n    }\n    ConnectableSubscriber.prototype._error = function (err) {\n        this._unsubscribe();\n        _super.prototype._error.call(this, err);\n    };\n    ConnectableSubscriber.prototype._complete = function () {\n        this.connectable._isComplete = true;\n        this._unsubscribe();\n        _super.prototype._complete.call(this);\n    };\n    ConnectableSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (connectable) {\n            this.connectable = null;\n            var connection = connectable._connection;\n            connectable._refCount = 0;\n            connectable._subject = null;\n            connectable._connection = null;\n            if (connection) {\n                connection.unsubscribe();\n            }\n        }\n    };\n    return ConnectableSubscriber;\n}(SubjectSubscriber));\nvar RefCountOperator = /*@__PURE__*/ (function () {\n    function RefCountOperator(connectable) {\n        this.connectable = connectable;\n    }\n    RefCountOperator.prototype.call = function (subscriber, source) {\n        var connectable = this.connectable;\n        connectable._refCount++;\n        var refCounter = new RefCountSubscriber(subscriber, connectable);\n        var subscription = source.subscribe(refCounter);\n        if (!refCounter.closed) {\n            refCounter.connection = connectable.connect();\n        }\n        return subscription;\n    };\n    return RefCountOperator;\n}());\nvar RefCountSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(RefCountSubscriber, _super);\n    function RefCountSubscriber(destination, connectable) {\n        var _this = _super.call(this, destination) || this;\n        _this.connectable = connectable;\n        return _this;\n    }\n    RefCountSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (!connectable) {\n            this.connection = null;\n            return;\n        }\n        this.connectable = null;\n        var refCount = connectable._refCount;\n        if (refCount <= 0) {\n            this.connection = null;\n            return;\n        }\n        connectable._refCount = refCount - 1;\n        if (refCount > 1) {\n            this.connection = null;\n            return;\n        }\n        var connection = this.connection;\n        var sharedConnection = connectable._connection;\n        this.connection = null;\n        if (sharedConnection && (!connection || sharedConnection === connection)) {\n            sharedConnection.unsubscribe();\n        }\n    };\n    return RefCountSubscriber;\n}(Subscriber));\n//# sourceMappingURL=ConnectableObservable.js.map\n","/** PURE_IMPORTS_START _mergeMap,_util_identity PURE_IMPORTS_END */\nimport { mergeMap } from './mergeMap';\nimport { identity } from '../util/identity';\nexport function mergeAll(concurrent) {\n    if (concurrent === void 0) {\n        concurrent = Number.POSITIVE_INFINITY;\n    }\n    return mergeMap(identity, concurrent);\n}\n//# sourceMappingURL=mergeAll.js.map\n","/** PURE_IMPORTS_START _Observable,_util_isScheduler,_operators_mergeAll,_fromArray PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nimport { isScheduler } from '../util/isScheduler';\nimport { mergeAll } from '../operators/mergeAll';\nimport { fromArray } from './fromArray';\nexport function merge() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i] = arguments[_i];\n    }\n    var concurrent = Number.POSITIVE_INFINITY;\n    var scheduler = null;\n    var last = observables[observables.length - 1];\n    if (isScheduler(last)) {\n        scheduler = observables.pop();\n        if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {\n            concurrent = observables.pop();\n        }\n    }\n    else if (typeof last === 'number') {\n        concurrent = observables.pop();\n    }\n    if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable) {\n        return observables[0];\n    }\n    return mergeAll(concurrent)(fromArray(observables, scheduler));\n}\n//# sourceMappingURL=merge.js.map\n"],"names":["refCount","source","lift","RefCountOperator","connectable","this","prototype","call","subscriber","_refCount","refCounter","RefCountSubscriber","subscription","subscribe","closed","connection","connect","_super","destination","_this","tslib_1.__extends","_unsubscribe","sharedConnection","_connection","unsubscribe","Subscriber","ConnectableObservable","subjectFactory","_isComplete","_subscribe","getSubject","subject","_subject","isStopped","Subscription","add","ConnectableSubscriber","EMPTY","higherOrderRefCount","Observable","connectableObservableDescriptor","connectableProto","operator","value","writable","_error","err","_complete","SubjectSubscriber","mergeAll","concurrent","Number","POSITIVE_INFINITY","mergeMap","identity","merge","observables","_i","arguments","length","scheduler","last","isScheduler","pop","fromArray"],"mappings":"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"}