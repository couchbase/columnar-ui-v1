{"version":3,"file":"d3-hierarchy.js","sources":["../node_modules/d3-hierarchy/src/cluster.js","../node_modules/d3-hierarchy/src/hierarchy/count.js","../node_modules/d3-hierarchy/src/hierarchy/index.js","../node_modules/d3-hierarchy/src/hierarchy/each.js","../node_modules/d3-hierarchy/src/hierarchy/eachAfter.js","../node_modules/d3-hierarchy/src/hierarchy/eachBefore.js","../node_modules/d3-hierarchy/src/hierarchy/sum.js","../node_modules/d3-hierarchy/src/hierarchy/sort.js","../node_modules/d3-hierarchy/src/hierarchy/path.js","../node_modules/d3-hierarchy/src/hierarchy/ancestors.js","../node_modules/d3-hierarchy/src/hierarchy/descendants.js","../node_modules/d3-hierarchy/src/hierarchy/leaves.js","../node_modules/d3-hierarchy/src/hierarchy/links.js","../node_modules/d3-hierarchy/src/array.js","../node_modules/d3-hierarchy/src/pack/enclose.js","../node_modules/d3-hierarchy/src/pack/siblings.js","../node_modules/d3-hierarchy/src/accessors.js","../node_modules/d3-hierarchy/src/constant.js","../node_modules/d3-hierarchy/src/pack/index.js","../node_modules/d3-hierarchy/src/treemap/round.js","../node_modules/d3-hierarchy/src/treemap/dice.js","../node_modules/d3-hierarchy/src/partition.js","../node_modules/d3-hierarchy/src/stratify.js","../node_modules/d3-hierarchy/src/tree.js","../node_modules/d3-hierarchy/src/treemap/slice.js","../node_modules/d3-hierarchy/src/treemap/squarify.js","../node_modules/d3-hierarchy/src/treemap/index.js","../node_modules/d3-hierarchy/src/treemap/binary.js","../node_modules/d3-hierarchy/src/treemap/sliceDice.js","../node_modules/d3-hierarchy/src/treemap/resquarify.js"],"sourcesContent":["function defaultSeparation(a, b) {\n  return a.parent === b.parent ? 1 : 2;\n}\n\nfunction meanX(children) {\n  return children.reduce(meanXReduce, 0) / children.length;\n}\n\nfunction meanXReduce(x, c) {\n  return x + c.x;\n}\n\nfunction maxY(children) {\n  return 1 + children.reduce(maxYReduce, 0);\n}\n\nfunction maxYReduce(y, c) {\n  return Math.max(y, c.y);\n}\n\nfunction leafLeft(node) {\n  var children;\n  while (children = node.children) node = children[0];\n  return node;\n}\n\nfunction leafRight(node) {\n  var children;\n  while (children = node.children) node = children[children.length - 1];\n  return node;\n}\n\nexport default function() {\n  var separation = defaultSeparation,\n      dx = 1,\n      dy = 1,\n      nodeSize = false;\n\n  function cluster(root) {\n    var previousNode,\n        x = 0;\n\n    // First walk, computing the initial x & y values.\n    root.eachAfter(function(node) {\n      var children = node.children;\n      if (children) {\n        node.x = meanX(children);\n        node.y = maxY(children);\n      } else {\n        node.x = previousNode ? x += separation(node, previousNode) : 0;\n        node.y = 0;\n        previousNode = node;\n      }\n    });\n\n    var left = leafLeft(root),\n        right = leafRight(root),\n        x0 = left.x - separation(left, right) / 2,\n        x1 = right.x + separation(right, left) / 2;\n\n    // Second walk, normalizing x & y to the desired size.\n    return root.eachAfter(nodeSize ? function(node) {\n      node.x = (node.x - root.x) * dx;\n      node.y = (root.y - node.y) * dy;\n    } : function(node) {\n      node.x = (node.x - x0) / (x1 - x0) * dx;\n      node.y = (1 - (root.y ? node.y / root.y : 1)) * dy;\n    });\n  }\n\n  cluster.separation = function(x) {\n    return arguments.length ? (separation = x, cluster) : separation;\n  };\n\n  cluster.size = function(x) {\n    return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], cluster) : (nodeSize ? null : [dx, dy]);\n  };\n\n  cluster.nodeSize = function(x) {\n    return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], cluster) : (nodeSize ? [dx, dy] : null);\n  };\n\n  return cluster;\n}\n","function count(node) {\n  var sum = 0,\n      children = node.children,\n      i = children && children.length;\n  if (!i) sum = 1;\n  else while (--i >= 0) sum += children[i].value;\n  node.value = sum;\n}\n\nexport default function() {\n  return this.eachAfter(count);\n}\n","import node_count from \"./count.js\";\nimport node_each from \"./each.js\";\nimport node_eachBefore from \"./eachBefore.js\";\nimport node_eachAfter from \"./eachAfter.js\";\nimport node_sum from \"./sum.js\";\nimport node_sort from \"./sort.js\";\nimport node_path from \"./path.js\";\nimport node_ancestors from \"./ancestors.js\";\nimport node_descendants from \"./descendants.js\";\nimport node_leaves from \"./leaves.js\";\nimport node_links from \"./links.js\";\n\nexport default function hierarchy(data, children) {\n  var root = new Node(data),\n      valued = +data.value && (root.value = data.value),\n      node,\n      nodes = [root],\n      child,\n      childs,\n      i,\n      n;\n\n  if (children == null) children = defaultChildren;\n\n  while (node = nodes.pop()) {\n    if (valued) node.value = +node.data.value;\n    if ((childs = children(node.data)) && (n = childs.length)) {\n      node.children = new Array(n);\n      for (i = n - 1; i >= 0; --i) {\n        nodes.push(child = node.children[i] = new Node(childs[i]));\n        child.parent = node;\n        child.depth = node.depth + 1;\n      }\n    }\n  }\n\n  return root.eachBefore(computeHeight);\n}\n\nfunction node_copy() {\n  return hierarchy(this).eachBefore(copyData);\n}\n\nfunction defaultChildren(d) {\n  return d.children;\n}\n\nfunction copyData(node) {\n  node.data = node.data.data;\n}\n\nexport function computeHeight(node) {\n  var height = 0;\n  do node.height = height;\n  while ((node = node.parent) && (node.height < ++height));\n}\n\nexport function Node(data) {\n  this.data = data;\n  this.depth =\n  this.height = 0;\n  this.parent = null;\n}\n\nNode.prototype = hierarchy.prototype = {\n  constructor: Node,\n  count: node_count,\n  each: node_each,\n  eachAfter: node_eachAfter,\n  eachBefore: node_eachBefore,\n  sum: node_sum,\n  sort: node_sort,\n  path: node_path,\n  ancestors: node_ancestors,\n  descendants: node_descendants,\n  leaves: node_leaves,\n  links: node_links,\n  copy: node_copy\n};\n","export default function(callback) {\n  var node = this, current, next = [node], children, i, n;\n  do {\n    current = next.reverse(), next = [];\n    while (node = current.pop()) {\n      callback(node), children = node.children;\n      if (children) for (i = 0, n = children.length; i < n; ++i) {\n        next.push(children[i]);\n      }\n    }\n  } while (next.length);\n  return this;\n}\n","export default function(callback) {\n  var node = this, nodes = [node], next = [], children, i, n;\n  while (node = nodes.pop()) {\n    next.push(node), children = node.children;\n    if (children) for (i = 0, n = children.length; i < n; ++i) {\n      nodes.push(children[i]);\n    }\n  }\n  while (node = next.pop()) {\n    callback(node);\n  }\n  return this;\n}\n","export default function(callback) {\n  var node = this, nodes = [node], children, i;\n  while (node = nodes.pop()) {\n    callback(node), children = node.children;\n    if (children) for (i = children.length - 1; i >= 0; --i) {\n      nodes.push(children[i]);\n    }\n  }\n  return this;\n}\n","export default function(value) {\n  return this.eachAfter(function(node) {\n    var sum = +value(node.data) || 0,\n        children = node.children,\n        i = children && children.length;\n    while (--i >= 0) sum += children[i].value;\n    node.value = sum;\n  });\n}\n","export default function(compare) {\n  return this.eachBefore(function(node) {\n    if (node.children) {\n      node.children.sort(compare);\n    }\n  });\n}\n","export default function(end) {\n  var start = this,\n      ancestor = leastCommonAncestor(start, end),\n      nodes = [start];\n  while (start !== ancestor) {\n    start = start.parent;\n    nodes.push(start);\n  }\n  var k = nodes.length;\n  while (end !== ancestor) {\n    nodes.splice(k, 0, end);\n    end = end.parent;\n  }\n  return nodes;\n}\n\nfunction leastCommonAncestor(a, b) {\n  if (a === b) return a;\n  var aNodes = a.ancestors(),\n      bNodes = b.ancestors(),\n      c = null;\n  a = aNodes.pop();\n  b = bNodes.pop();\n  while (a === b) {\n    c = a;\n    a = aNodes.pop();\n    b = bNodes.pop();\n  }\n  return c;\n}\n","export default function() {\n  var node = this, nodes = [node];\n  while (node = node.parent) {\n    nodes.push(node);\n  }\n  return nodes;\n}\n","export default function() {\n  var nodes = [];\n  this.each(function(node) {\n    nodes.push(node);\n  });\n  return nodes;\n}\n","export default function() {\n  var leaves = [];\n  this.eachBefore(function(node) {\n    if (!node.children) {\n      leaves.push(node);\n    }\n  });\n  return leaves;\n}\n","export default function() {\n  var root = this, links = [];\n  root.each(function(node) {\n    if (node !== root) { // Don’t include the root’s parent, if any.\n      links.push({source: node.parent, target: node});\n    }\n  });\n  return links;\n}\n","export var slice = Array.prototype.slice;\n\nexport function shuffle(array) {\n  var m = array.length,\n      t,\n      i;\n\n  while (m) {\n    i = Math.random() * m-- | 0;\n    t = array[m];\n    array[m] = array[i];\n    array[i] = t;\n  }\n\n  return array;\n}\n","import {shuffle, slice} from \"../array.js\";\n\nexport default function(circles) {\n  var i = 0, n = (circles = shuffle(slice.call(circles))).length, B = [], p, e;\n\n  while (i < n) {\n    p = circles[i];\n    if (e && enclosesWeak(e, p)) ++i;\n    else e = encloseBasis(B = extendBasis(B, p)), i = 0;\n  }\n\n  return e;\n}\n\nfunction extendBasis(B, p) {\n  var i, j;\n\n  if (enclosesWeakAll(p, B)) return [p];\n\n  // If we get here then B must have at least one element.\n  for (i = 0; i < B.length; ++i) {\n    if (enclosesNot(p, B[i])\n        && enclosesWeakAll(encloseBasis2(B[i], p), B)) {\n      return [B[i], p];\n    }\n  }\n\n  // If we get here then B must have at least two elements.\n  for (i = 0; i < B.length - 1; ++i) {\n    for (j = i + 1; j < B.length; ++j) {\n      if (enclosesNot(encloseBasis2(B[i], B[j]), p)\n          && enclosesNot(encloseBasis2(B[i], p), B[j])\n          && enclosesNot(encloseBasis2(B[j], p), B[i])\n          && enclosesWeakAll(encloseBasis3(B[i], B[j], p), B)) {\n        return [B[i], B[j], p];\n      }\n    }\n  }\n\n  // If we get here then something is very wrong.\n  throw new Error;\n}\n\nfunction enclosesNot(a, b) {\n  var dr = a.r - b.r, dx = b.x - a.x, dy = b.y - a.y;\n  return dr < 0 || dr * dr < dx * dx + dy * dy;\n}\n\nfunction enclosesWeak(a, b) {\n  var dr = a.r - b.r + 1e-6, dx = b.x - a.x, dy = b.y - a.y;\n  return dr > 0 && dr * dr > dx * dx + dy * dy;\n}\n\nfunction enclosesWeakAll(a, B) {\n  for (var i = 0; i < B.length; ++i) {\n    if (!enclosesWeak(a, B[i])) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction encloseBasis(B) {\n  switch (B.length) {\n    case 1: return encloseBasis1(B[0]);\n    case 2: return encloseBasis2(B[0], B[1]);\n    case 3: return encloseBasis3(B[0], B[1], B[2]);\n  }\n}\n\nfunction encloseBasis1(a) {\n  return {\n    x: a.x,\n    y: a.y,\n    r: a.r\n  };\n}\n\nfunction encloseBasis2(a, b) {\n  var x1 = a.x, y1 = a.y, r1 = a.r,\n      x2 = b.x, y2 = b.y, r2 = b.r,\n      x21 = x2 - x1, y21 = y2 - y1, r21 = r2 - r1,\n      l = Math.sqrt(x21 * x21 + y21 * y21);\n  return {\n    x: (x1 + x2 + x21 / l * r21) / 2,\n    y: (y1 + y2 + y21 / l * r21) / 2,\n    r: (l + r1 + r2) / 2\n  };\n}\n\nfunction encloseBasis3(a, b, c) {\n  var x1 = a.x, y1 = a.y, r1 = a.r,\n      x2 = b.x, y2 = b.y, r2 = b.r,\n      x3 = c.x, y3 = c.y, r3 = c.r,\n      a2 = x1 - x2,\n      a3 = x1 - x3,\n      b2 = y1 - y2,\n      b3 = y1 - y3,\n      c2 = r2 - r1,\n      c3 = r3 - r1,\n      d1 = x1 * x1 + y1 * y1 - r1 * r1,\n      d2 = d1 - x2 * x2 - y2 * y2 + r2 * r2,\n      d3 = d1 - x3 * x3 - y3 * y3 + r3 * r3,\n      ab = a3 * b2 - a2 * b3,\n      xa = (b2 * d3 - b3 * d2) / (ab * 2) - x1,\n      xb = (b3 * c2 - b2 * c3) / ab,\n      ya = (a3 * d2 - a2 * d3) / (ab * 2) - y1,\n      yb = (a2 * c3 - a3 * c2) / ab,\n      A = xb * xb + yb * yb - 1,\n      B = 2 * (r1 + xa * xb + ya * yb),\n      C = xa * xa + ya * ya - r1 * r1,\n      r = -(A ? (B + Math.sqrt(B * B - 4 * A * C)) / (2 * A) : C / B);\n  return {\n    x: x1 + xa + xb * r,\n    y: y1 + ya + yb * r,\n    r: r\n  };\n}\n","import enclose from \"./enclose.js\";\n\nfunction place(b, a, c) {\n  var dx = b.x - a.x, x, a2,\n      dy = b.y - a.y, y, b2,\n      d2 = dx * dx + dy * dy;\n  if (d2) {\n    a2 = a.r + c.r, a2 *= a2;\n    b2 = b.r + c.r, b2 *= b2;\n    if (a2 > b2) {\n      x = (d2 + b2 - a2) / (2 * d2);\n      y = Math.sqrt(Math.max(0, b2 / d2 - x * x));\n      c.x = b.x - x * dx - y * dy;\n      c.y = b.y - x * dy + y * dx;\n    } else {\n      x = (d2 + a2 - b2) / (2 * d2);\n      y = Math.sqrt(Math.max(0, a2 / d2 - x * x));\n      c.x = a.x + x * dx - y * dy;\n      c.y = a.y + x * dy + y * dx;\n    }\n  } else {\n    c.x = a.x + c.r;\n    c.y = a.y;\n  }\n}\n\nfunction intersects(a, b) {\n  var dr = a.r + b.r - 1e-6, dx = b.x - a.x, dy = b.y - a.y;\n  return dr > 0 && dr * dr > dx * dx + dy * dy;\n}\n\nfunction score(node) {\n  var a = node._,\n      b = node.next._,\n      ab = a.r + b.r,\n      dx = (a.x * b.r + b.x * a.r) / ab,\n      dy = (a.y * b.r + b.y * a.r) / ab;\n  return dx * dx + dy * dy;\n}\n\nfunction Node(circle) {\n  this._ = circle;\n  this.next = null;\n  this.previous = null;\n}\n\nexport function packEnclose(circles) {\n  if (!(n = circles.length)) return 0;\n\n  var a, b, c, n, aa, ca, i, j, k, sj, sk;\n\n  // Place the first circle.\n  a = circles[0], a.x = 0, a.y = 0;\n  if (!(n > 1)) return a.r;\n\n  // Place the second circle.\n  b = circles[1], a.x = -b.r, b.x = a.r, b.y = 0;\n  if (!(n > 2)) return a.r + b.r;\n\n  // Place the third circle.\n  place(b, a, c = circles[2]);\n\n  // Initialize the front-chain using the first three circles a, b and c.\n  a = new Node(a), b = new Node(b), c = new Node(c);\n  a.next = c.previous = b;\n  b.next = a.previous = c;\n  c.next = b.previous = a;\n\n  // Attempt to place each remaining circle…\n  pack: for (i = 3; i < n; ++i) {\n    place(a._, b._, c = circles[i]), c = new Node(c);\n\n    // Find the closest intersecting circle on the front-chain, if any.\n    // “Closeness” is determined by linear distance along the front-chain.\n    // “Ahead” or “behind” is likewise determined by linear distance.\n    j = b.next, k = a.previous, sj = b._.r, sk = a._.r;\n    do {\n      if (sj <= sk) {\n        if (intersects(j._, c._)) {\n          b = j, a.next = b, b.previous = a, --i;\n          continue pack;\n        }\n        sj += j._.r, j = j.next;\n      } else {\n        if (intersects(k._, c._)) {\n          a = k, a.next = b, b.previous = a, --i;\n          continue pack;\n        }\n        sk += k._.r, k = k.previous;\n      }\n    } while (j !== k.next);\n\n    // Success! Insert the new circle c between a and b.\n    c.previous = a, c.next = b, a.next = b.previous = b = c;\n\n    // Compute the new closest circle pair to the centroid.\n    aa = score(a);\n    while ((c = c.next) !== b) {\n      if ((ca = score(c)) < aa) {\n        a = c, aa = ca;\n      }\n    }\n    b = a.next;\n  }\n\n  // Compute the enclosing circle of the front chain.\n  a = [b._], c = b; while ((c = c.next) !== b) a.push(c._); c = enclose(a);\n\n  // Translate the circles to put the enclosing circle around the origin.\n  for (i = 0; i < n; ++i) a = circles[i], a.x -= c.x, a.y -= c.y;\n\n  return c.r;\n}\n\nexport default function(circles) {\n  packEnclose(circles);\n  return circles;\n}\n","export function optional(f) {\n  return f == null ? null : required(f);\n}\n\nexport function required(f) {\n  if (typeof f !== \"function\") throw new Error;\n  return f;\n}\n","export function constantZero() {\n  return 0;\n}\n\nexport default function(x) {\n  return function() {\n    return x;\n  };\n}\n","import {packEnclose} from \"./siblings.js\";\nimport {optional} from \"../accessors.js\";\nimport constant, {constantZero} from \"../constant.js\";\n\nfunction defaultRadius(d) {\n  return Math.sqrt(d.value);\n}\n\nexport default function() {\n  var radius = null,\n      dx = 1,\n      dy = 1,\n      padding = constantZero;\n\n  function pack(root) {\n    root.x = dx / 2, root.y = dy / 2;\n    if (radius) {\n      root.eachBefore(radiusLeaf(radius))\n          .eachAfter(packChildren(padding, 0.5))\n          .eachBefore(translateChild(1));\n    } else {\n      root.eachBefore(radiusLeaf(defaultRadius))\n          .eachAfter(packChildren(constantZero, 1))\n          .eachAfter(packChildren(padding, root.r / Math.min(dx, dy)))\n          .eachBefore(translateChild(Math.min(dx, dy) / (2 * root.r)));\n    }\n    return root;\n  }\n\n  pack.radius = function(x) {\n    return arguments.length ? (radius = optional(x), pack) : radius;\n  };\n\n  pack.size = function(x) {\n    return arguments.length ? (dx = +x[0], dy = +x[1], pack) : [dx, dy];\n  };\n\n  pack.padding = function(x) {\n    return arguments.length ? (padding = typeof x === \"function\" ? x : constant(+x), pack) : padding;\n  };\n\n  return pack;\n}\n\nfunction radiusLeaf(radius) {\n  return function(node) {\n    if (!node.children) {\n      node.r = Math.max(0, +radius(node) || 0);\n    }\n  };\n}\n\nfunction packChildren(padding, k) {\n  return function(node) {\n    if (children = node.children) {\n      var children,\n          i,\n          n = children.length,\n          r = padding(node) * k || 0,\n          e;\n\n      if (r) for (i = 0; i < n; ++i) children[i].r += r;\n      e = packEnclose(children);\n      if (r) for (i = 0; i < n; ++i) children[i].r -= r;\n      node.r = e + r;\n    }\n  };\n}\n\nfunction translateChild(k) {\n  return function(node) {\n    var parent = node.parent;\n    node.r *= k;\n    if (parent) {\n      node.x = parent.x + k * node.x;\n      node.y = parent.y + k * node.y;\n    }\n  };\n}\n","export default function(node) {\n  node.x0 = Math.round(node.x0);\n  node.y0 = Math.round(node.y0);\n  node.x1 = Math.round(node.x1);\n  node.y1 = Math.round(node.y1);\n}\n","export default function(parent, x0, y0, x1, y1) {\n  var nodes = parent.children,\n      node,\n      i = -1,\n      n = nodes.length,\n      k = parent.value && (x1 - x0) / parent.value;\n\n  while (++i < n) {\n    node = nodes[i], node.y0 = y0, node.y1 = y1;\n    node.x0 = x0, node.x1 = x0 += node.value * k;\n  }\n}\n","import roundNode from \"./treemap/round.js\";\nimport treemapDice from \"./treemap/dice.js\";\n\nexport default function() {\n  var dx = 1,\n      dy = 1,\n      padding = 0,\n      round = false;\n\n  function partition(root) {\n    var n = root.height + 1;\n    root.x0 =\n    root.y0 = padding;\n    root.x1 = dx;\n    root.y1 = dy / n;\n    root.eachBefore(positionNode(dy, n));\n    if (round) root.eachBefore(roundNode);\n    return root;\n  }\n\n  function positionNode(dy, n) {\n    return function(node) {\n      if (node.children) {\n        treemapDice(node, node.x0, dy * (node.depth + 1) / n, node.x1, dy * (node.depth + 2) / n);\n      }\n      var x0 = node.x0,\n          y0 = node.y0,\n          x1 = node.x1 - padding,\n          y1 = node.y1 - padding;\n      if (x1 < x0) x0 = x1 = (x0 + x1) / 2;\n      if (y1 < y0) y0 = y1 = (y0 + y1) / 2;\n      node.x0 = x0;\n      node.y0 = y0;\n      node.x1 = x1;\n      node.y1 = y1;\n    };\n  }\n\n  partition.round = function(x) {\n    return arguments.length ? (round = !!x, partition) : round;\n  };\n\n  partition.size = function(x) {\n    return arguments.length ? (dx = +x[0], dy = +x[1], partition) : [dx, dy];\n  };\n\n  partition.padding = function(x) {\n    return arguments.length ? (padding = +x, partition) : padding;\n  };\n\n  return partition;\n}\n","import {required} from \"./accessors.js\";\nimport {Node, computeHeight} from \"./hierarchy/index.js\";\n\nvar keyPrefix = \"$\", // Protect against keys like “__proto__”.\n    preroot = {depth: -1},\n    ambiguous = {};\n\nfunction defaultId(d) {\n  return d.id;\n}\n\nfunction defaultParentId(d) {\n  return d.parentId;\n}\n\nexport default function() {\n  var id = defaultId,\n      parentId = defaultParentId;\n\n  function stratify(data) {\n    var d,\n        i,\n        n = data.length,\n        root,\n        parent,\n        node,\n        nodes = new Array(n),\n        nodeId,\n        nodeKey,\n        nodeByKey = {};\n\n    for (i = 0; i < n; ++i) {\n      d = data[i], node = nodes[i] = new Node(d);\n      if ((nodeId = id(d, i, data)) != null && (nodeId += \"\")) {\n        nodeKey = keyPrefix + (node.id = nodeId);\n        nodeByKey[nodeKey] = nodeKey in nodeByKey ? ambiguous : node;\n      }\n    }\n\n    for (i = 0; i < n; ++i) {\n      node = nodes[i], nodeId = parentId(data[i], i, data);\n      if (nodeId == null || !(nodeId += \"\")) {\n        if (root) throw new Error(\"multiple roots\");\n        root = node;\n      } else {\n        parent = nodeByKey[keyPrefix + nodeId];\n        if (!parent) throw new Error(\"missing: \" + nodeId);\n        if (parent === ambiguous) throw new Error(\"ambiguous: \" + nodeId);\n        if (parent.children) parent.children.push(node);\n        else parent.children = [node];\n        node.parent = parent;\n      }\n    }\n\n    if (!root) throw new Error(\"no root\");\n    root.parent = preroot;\n    root.eachBefore(function(node) { node.depth = node.parent.depth + 1; --n; }).eachBefore(computeHeight);\n    root.parent = null;\n    if (n > 0) throw new Error(\"cycle\");\n\n    return root;\n  }\n\n  stratify.id = function(x) {\n    return arguments.length ? (id = required(x), stratify) : id;\n  };\n\n  stratify.parentId = function(x) {\n    return arguments.length ? (parentId = required(x), stratify) : parentId;\n  };\n\n  return stratify;\n}\n","import {Node} from \"./hierarchy/index.js\";\n\nfunction defaultSeparation(a, b) {\n  return a.parent === b.parent ? 1 : 2;\n}\n\n// function radialSeparation(a, b) {\n//   return (a.parent === b.parent ? 1 : 2) / a.depth;\n// }\n\n// This function is used to traverse the left contour of a subtree (or\n// subforest). It returns the successor of v on this contour. This successor is\n// either given by the leftmost child of v or by the thread of v. The function\n// returns null if and only if v is on the highest level of its subtree.\nfunction nextLeft(v) {\n  var children = v.children;\n  return children ? children[0] : v.t;\n}\n\n// This function works analogously to nextLeft.\nfunction nextRight(v) {\n  var children = v.children;\n  return children ? children[children.length - 1] : v.t;\n}\n\n// Shifts the current subtree rooted at w+. This is done by increasing\n// prelim(w+) and mod(w+) by shift.\nfunction moveSubtree(wm, wp, shift) {\n  var change = shift / (wp.i - wm.i);\n  wp.c -= change;\n  wp.s += shift;\n  wm.c += change;\n  wp.z += shift;\n  wp.m += shift;\n}\n\n// All other shifts, applied to the smaller subtrees between w- and w+, are\n// performed by this function. To prepare the shifts, we have to adjust\n// change(w+), shift(w+), and change(w-).\nfunction executeShifts(v) {\n  var shift = 0,\n      change = 0,\n      children = v.children,\n      i = children.length,\n      w;\n  while (--i >= 0) {\n    w = children[i];\n    w.z += shift;\n    w.m += shift;\n    shift += w.s + (change += w.c);\n  }\n}\n\n// If vi-’s ancestor is a sibling of v, returns vi-’s ancestor. Otherwise,\n// returns the specified (default) ancestor.\nfunction nextAncestor(vim, v, ancestor) {\n  return vim.a.parent === v.parent ? vim.a : ancestor;\n}\n\nfunction TreeNode(node, i) {\n  this._ = node;\n  this.parent = null;\n  this.children = null;\n  this.A = null; // default ancestor\n  this.a = this; // ancestor\n  this.z = 0; // prelim\n  this.m = 0; // mod\n  this.c = 0; // change\n  this.s = 0; // shift\n  this.t = null; // thread\n  this.i = i; // number\n}\n\nTreeNode.prototype = Object.create(Node.prototype);\n\nfunction treeRoot(root) {\n  var tree = new TreeNode(root, 0),\n      node,\n      nodes = [tree],\n      child,\n      children,\n      i,\n      n;\n\n  while (node = nodes.pop()) {\n    if (children = node._.children) {\n      node.children = new Array(n = children.length);\n      for (i = n - 1; i >= 0; --i) {\n        nodes.push(child = node.children[i] = new TreeNode(children[i], i));\n        child.parent = node;\n      }\n    }\n  }\n\n  (tree.parent = new TreeNode(null, 0)).children = [tree];\n  return tree;\n}\n\n// Node-link tree diagram using the Reingold-Tilford \"tidy\" algorithm\nexport default function() {\n  var separation = defaultSeparation,\n      dx = 1,\n      dy = 1,\n      nodeSize = null;\n\n  function tree(root) {\n    var t = treeRoot(root);\n\n    // Compute the layout using Buchheim et al.’s algorithm.\n    t.eachAfter(firstWalk), t.parent.m = -t.z;\n    t.eachBefore(secondWalk);\n\n    // If a fixed node size is specified, scale x and y.\n    if (nodeSize) root.eachBefore(sizeNode);\n\n    // If a fixed tree size is specified, scale x and y based on the extent.\n    // Compute the left-most, right-most, and depth-most nodes for extents.\n    else {\n      var left = root,\n          right = root,\n          bottom = root;\n      root.eachBefore(function(node) {\n        if (node.x < left.x) left = node;\n        if (node.x > right.x) right = node;\n        if (node.depth > bottom.depth) bottom = node;\n      });\n      var s = left === right ? 1 : separation(left, right) / 2,\n          tx = s - left.x,\n          kx = dx / (right.x + s + tx),\n          ky = dy / (bottom.depth || 1);\n      root.eachBefore(function(node) {\n        node.x = (node.x + tx) * kx;\n        node.y = node.depth * ky;\n      });\n    }\n\n    return root;\n  }\n\n  // Computes a preliminary x-coordinate for v. Before that, FIRST WALK is\n  // applied recursively to the children of v, as well as the function\n  // APPORTION. After spacing out the children by calling EXECUTE SHIFTS, the\n  // node v is placed to the midpoint of its outermost children.\n  function firstWalk(v) {\n    var children = v.children,\n        siblings = v.parent.children,\n        w = v.i ? siblings[v.i - 1] : null;\n    if (children) {\n      executeShifts(v);\n      var midpoint = (children[0].z + children[children.length - 1].z) / 2;\n      if (w) {\n        v.z = w.z + separation(v._, w._);\n        v.m = v.z - midpoint;\n      } else {\n        v.z = midpoint;\n      }\n    } else if (w) {\n      v.z = w.z + separation(v._, w._);\n    }\n    v.parent.A = apportion(v, w, v.parent.A || siblings[0]);\n  }\n\n  // Computes all real x-coordinates by summing up the modifiers recursively.\n  function secondWalk(v) {\n    v._.x = v.z + v.parent.m;\n    v.m += v.parent.m;\n  }\n\n  // The core of the algorithm. Here, a new subtree is combined with the\n  // previous subtrees. Threads are used to traverse the inside and outside\n  // contours of the left and right subtree up to the highest common level. The\n  // vertices used for the traversals are vi+, vi-, vo-, and vo+, where the\n  // superscript o means outside and i means inside, the subscript - means left\n  // subtree and + means right subtree. For summing up the modifiers along the\n  // contour, we use respective variables si+, si-, so-, and so+. Whenever two\n  // nodes of the inside contours conflict, we compute the left one of the\n  // greatest uncommon ancestors using the function ANCESTOR and call MOVE\n  // SUBTREE to shift the subtree and prepare the shifts of smaller subtrees.\n  // Finally, we add a new thread (if necessary).\n  function apportion(v, w, ancestor) {\n    if (w) {\n      var vip = v,\n          vop = v,\n          vim = w,\n          vom = vip.parent.children[0],\n          sip = vip.m,\n          sop = vop.m,\n          sim = vim.m,\n          som = vom.m,\n          shift;\n      while (vim = nextRight(vim), vip = nextLeft(vip), vim && vip) {\n        vom = nextLeft(vom);\n        vop = nextRight(vop);\n        vop.a = v;\n        shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);\n        if (shift > 0) {\n          moveSubtree(nextAncestor(vim, v, ancestor), v, shift);\n          sip += shift;\n          sop += shift;\n        }\n        sim += vim.m;\n        sip += vip.m;\n        som += vom.m;\n        sop += vop.m;\n      }\n      if (vim && !nextRight(vop)) {\n        vop.t = vim;\n        vop.m += sim - sop;\n      }\n      if (vip && !nextLeft(vom)) {\n        vom.t = vip;\n        vom.m += sip - som;\n        ancestor = v;\n      }\n    }\n    return ancestor;\n  }\n\n  function sizeNode(node) {\n    node.x *= dx;\n    node.y = node.depth * dy;\n  }\n\n  tree.separation = function(x) {\n    return arguments.length ? (separation = x, tree) : separation;\n  };\n\n  tree.size = function(x) {\n    return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], tree) : (nodeSize ? null : [dx, dy]);\n  };\n\n  tree.nodeSize = function(x) {\n    return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], tree) : (nodeSize ? [dx, dy] : null);\n  };\n\n  return tree;\n}\n","export default function(parent, x0, y0, x1, y1) {\n  var nodes = parent.children,\n      node,\n      i = -1,\n      n = nodes.length,\n      k = parent.value && (y1 - y0) / parent.value;\n\n  while (++i < n) {\n    node = nodes[i], node.x0 = x0, node.x1 = x1;\n    node.y0 = y0, node.y1 = y0 += node.value * k;\n  }\n}\n","import treemapDice from \"./dice.js\";\nimport treemapSlice from \"./slice.js\";\n\nexport var phi = (1 + Math.sqrt(5)) / 2;\n\nexport function squarifyRatio(ratio, parent, x0, y0, x1, y1) {\n  var rows = [],\n      nodes = parent.children,\n      row,\n      nodeValue,\n      i0 = 0,\n      i1 = 0,\n      n = nodes.length,\n      dx, dy,\n      value = parent.value,\n      sumValue,\n      minValue,\n      maxValue,\n      newRatio,\n      minRatio,\n      alpha,\n      beta;\n\n  while (i0 < n) {\n    dx = x1 - x0, dy = y1 - y0;\n\n    // Find the next non-empty node.\n    do sumValue = nodes[i1++].value; while (!sumValue && i1 < n);\n    minValue = maxValue = sumValue;\n    alpha = Math.max(dy / dx, dx / dy) / (value * ratio);\n    beta = sumValue * sumValue * alpha;\n    minRatio = Math.max(maxValue / beta, beta / minValue);\n\n    // Keep adding nodes while the aspect ratio maintains or improves.\n    for (; i1 < n; ++i1) {\n      sumValue += nodeValue = nodes[i1].value;\n      if (nodeValue < minValue) minValue = nodeValue;\n      if (nodeValue > maxValue) maxValue = nodeValue;\n      beta = sumValue * sumValue * alpha;\n      newRatio = Math.max(maxValue / beta, beta / minValue);\n      if (newRatio > minRatio) { sumValue -= nodeValue; break; }\n      minRatio = newRatio;\n    }\n\n    // Position and record the row orientation.\n    rows.push(row = {value: sumValue, dice: dx < dy, children: nodes.slice(i0, i1)});\n    if (row.dice) treemapDice(row, x0, y0, x1, value ? y0 += dy * sumValue / value : y1);\n    else treemapSlice(row, x0, y0, value ? x0 += dx * sumValue / value : x1, y1);\n    value -= sumValue, i0 = i1;\n  }\n\n  return rows;\n}\n\nexport default (function custom(ratio) {\n\n  function squarify(parent, x0, y0, x1, y1) {\n    squarifyRatio(ratio, parent, x0, y0, x1, y1);\n  }\n\n  squarify.ratio = function(x) {\n    return custom((x = +x) > 1 ? x : 1);\n  };\n\n  return squarify;\n})(phi);\n","import roundNode from \"./round.js\";\nimport squarify from \"./squarify.js\";\nimport {required} from \"../accessors.js\";\nimport constant, {constantZero} from \"../constant.js\";\n\nexport default function() {\n  var tile = squarify,\n      round = false,\n      dx = 1,\n      dy = 1,\n      paddingStack = [0],\n      paddingInner = constantZero,\n      paddingTop = constantZero,\n      paddingRight = constantZero,\n      paddingBottom = constantZero,\n      paddingLeft = constantZero;\n\n  function treemap(root) {\n    root.x0 =\n    root.y0 = 0;\n    root.x1 = dx;\n    root.y1 = dy;\n    root.eachBefore(positionNode);\n    paddingStack = [0];\n    if (round) root.eachBefore(roundNode);\n    return root;\n  }\n\n  function positionNode(node) {\n    var p = paddingStack[node.depth],\n        x0 = node.x0 + p,\n        y0 = node.y0 + p,\n        x1 = node.x1 - p,\n        y1 = node.y1 - p;\n    if (x1 < x0) x0 = x1 = (x0 + x1) / 2;\n    if (y1 < y0) y0 = y1 = (y0 + y1) / 2;\n    node.x0 = x0;\n    node.y0 = y0;\n    node.x1 = x1;\n    node.y1 = y1;\n    if (node.children) {\n      p = paddingStack[node.depth + 1] = paddingInner(node) / 2;\n      x0 += paddingLeft(node) - p;\n      y0 += paddingTop(node) - p;\n      x1 -= paddingRight(node) - p;\n      y1 -= paddingBottom(node) - p;\n      if (x1 < x0) x0 = x1 = (x0 + x1) / 2;\n      if (y1 < y0) y0 = y1 = (y0 + y1) / 2;\n      tile(node, x0, y0, x1, y1);\n    }\n  }\n\n  treemap.round = function(x) {\n    return arguments.length ? (round = !!x, treemap) : round;\n  };\n\n  treemap.size = function(x) {\n    return arguments.length ? (dx = +x[0], dy = +x[1], treemap) : [dx, dy];\n  };\n\n  treemap.tile = function(x) {\n    return arguments.length ? (tile = required(x), treemap) : tile;\n  };\n\n  treemap.padding = function(x) {\n    return arguments.length ? treemap.paddingInner(x).paddingOuter(x) : treemap.paddingInner();\n  };\n\n  treemap.paddingInner = function(x) {\n    return arguments.length ? (paddingInner = typeof x === \"function\" ? x : constant(+x), treemap) : paddingInner;\n  };\n\n  treemap.paddingOuter = function(x) {\n    return arguments.length ? treemap.paddingTop(x).paddingRight(x).paddingBottom(x).paddingLeft(x) : treemap.paddingTop();\n  };\n\n  treemap.paddingTop = function(x) {\n    return arguments.length ? (paddingTop = typeof x === \"function\" ? x : constant(+x), treemap) : paddingTop;\n  };\n\n  treemap.paddingRight = function(x) {\n    return arguments.length ? (paddingRight = typeof x === \"function\" ? x : constant(+x), treemap) : paddingRight;\n  };\n\n  treemap.paddingBottom = function(x) {\n    return arguments.length ? (paddingBottom = typeof x === \"function\" ? x : constant(+x), treemap) : paddingBottom;\n  };\n\n  treemap.paddingLeft = function(x) {\n    return arguments.length ? (paddingLeft = typeof x === \"function\" ? x : constant(+x), treemap) : paddingLeft;\n  };\n\n  return treemap;\n}\n","export default function(parent, x0, y0, x1, y1) {\n  var nodes = parent.children,\n      i, n = nodes.length,\n      sum, sums = new Array(n + 1);\n\n  for (sums[0] = sum = i = 0; i < n; ++i) {\n    sums[i + 1] = sum += nodes[i].value;\n  }\n\n  partition(0, n, parent.value, x0, y0, x1, y1);\n\n  function partition(i, j, value, x0, y0, x1, y1) {\n    if (i >= j - 1) {\n      var node = nodes[i];\n      node.x0 = x0, node.y0 = y0;\n      node.x1 = x1, node.y1 = y1;\n      return;\n    }\n\n    var valueOffset = sums[i],\n        valueTarget = (value / 2) + valueOffset,\n        k = i + 1,\n        hi = j - 1;\n\n    while (k < hi) {\n      var mid = k + hi >>> 1;\n      if (sums[mid] < valueTarget) k = mid + 1;\n      else hi = mid;\n    }\n\n    if ((valueTarget - sums[k - 1]) < (sums[k] - valueTarget) && i + 1 < k) --k;\n\n    var valueLeft = sums[k] - valueOffset,\n        valueRight = value - valueLeft;\n\n    if ((x1 - x0) > (y1 - y0)) {\n      var xk = (x0 * valueRight + x1 * valueLeft) / value;\n      partition(i, k, valueLeft, x0, y0, xk, y1);\n      partition(k, j, valueRight, xk, y0, x1, y1);\n    } else {\n      var yk = (y0 * valueRight + y1 * valueLeft) / value;\n      partition(i, k, valueLeft, x0, y0, x1, yk);\n      partition(k, j, valueRight, x0, yk, x1, y1);\n    }\n  }\n}\n","import dice from \"./dice.js\";\nimport slice from \"./slice.js\";\n\nexport default function(parent, x0, y0, x1, y1) {\n  (parent.depth & 1 ? slice : dice)(parent, x0, y0, x1, y1);\n}\n","import treemapDice from \"./dice.js\";\nimport treemapSlice from \"./slice.js\";\nimport {phi, squarifyRatio} from \"./squarify.js\";\n\nexport default (function custom(ratio) {\n\n  function resquarify(parent, x0, y0, x1, y1) {\n    if ((rows = parent._squarify) && (rows.ratio === ratio)) {\n      var rows,\n          row,\n          nodes,\n          i,\n          j = -1,\n          n,\n          m = rows.length,\n          value = parent.value;\n\n      while (++j < m) {\n        row = rows[j], nodes = row.children;\n        for (i = row.value = 0, n = nodes.length; i < n; ++i) row.value += nodes[i].value;\n        if (row.dice) treemapDice(row, x0, y0, x1, y0 += (y1 - y0) * row.value / value);\n        else treemapSlice(row, x0, y0, x0 += (x1 - x0) * row.value / value, y1);\n        value -= row.value;\n      }\n    } else {\n      parent._squarify = rows = squarifyRatio(ratio, parent, x0, y0, x1, y1);\n      rows.ratio = ratio;\n    }\n  }\n\n  resquarify.ratio = function(x) {\n    return custom((x = +x) > 1 ? x : 1);\n  };\n\n  return resquarify;\n})(phi);\n"],"names":["defaultSeparation","a","b","parent","meanXReduce","x","c","maxYReduce","y","Math","max","separation","dx","dy","nodeSize","cluster","root","previousNode","eachAfter","node","children","reduce","length","meanX","maxY","left","leafLeft","right","leafRight","x0","x1","arguments","size","count","sum","i","value","hierarchy","data","child","childs","n","Node","valued","nodes","defaultChildren","pop","Array","push","depth","eachBefore","computeHeight","d","copyData","height","this","prototype","constructor","each","callback","current","next","reverse","sort","compare","path","end","start","ancestor","aNodes","ancestors","bNodes","leastCommonAncestor","k","splice","descendants","leaves","links","source","target","copy","slice","circles","p","e","array","t","m","random","shuffle","call","B","enclosesWeak","encloseBasis","extendBasis","j","enclosesWeakAll","enclosesNot","encloseBasis2","encloseBasis3","Error","dr","r","y1","r1","x2","y2","r2","x21","y21","r21","l","sqrt","x3","y3","r3","a2","a3","b2","b3","c2","c3","d1","d2","d3","ab","xa","xb","ya","yb","A","C","place","intersects","score","_","circle","previous","packEnclose","aa","ca","sj","sk","pack","enclose","optional","f","required","constantZero","defaultRadius","radius","padding","radiusLeaf","packChildren","translateChild","min","constant","round","y0","partition","treemapDice","positionNode","roundNode","preroot","ambiguous","defaultId","id","defaultParentId","parentId","stratify","nodeId","nodeKey","nodeByKey","nextLeft","v","nextRight","moveSubtree","wm","wp","shift","change","s","z","nextAncestor","vim","TreeNode","tree","treeRoot","firstWalk","secondWalk","sizeNode","bottom","tx","kx","ky","siblings","w","executeShifts","midpoint","vip","vop","vom","sip","sop","sim","som","apportion","Object","create","phi","squarifyRatio","ratio","row","nodeValue","sumValue","minValue","maxValue","newRatio","minRatio","alpha","beta","rows","i0","i1","dice","treemapSlice","custom","squarify","tile","paddingStack","paddingInner","paddingTop","paddingRight","paddingBottom","paddingLeft","treemap","paddingOuter","sums","valueOffset","valueTarget","hi","mid","valueLeft","valueRight","xk","yk","resquarify","_squarify"],"mappings":"AAAA,SAASA,EAAkBC,EAAGC,GAC5B,OAAOD,EAAEE,SAAWD,EAAEC,OAAS,EAAI,EAOrC,SAASC,EAAYC,EAAGC,GACtB,OAAOD,EAAIC,EAAED,EAOf,SAASE,EAAWC,EAAGF,GACrB,OAAOG,KAAKC,IAAIF,EAAGF,EAAEE,GAeR,aACb,IAAIG,EAAaX,EACbY,EAAK,EACLC,EAAK,EACLC,GAAW,EAEf,SAASC,EAAQC,GACf,IAAIC,EACAZ,EAAI,EAGRW,EAAKE,WAAU,SAASC,GACtB,IAAIC,EAAWD,EAAKC,SAChBA,GACFD,EAAKd,EA1Cb,SAAee,GACb,OAAOA,EAASC,OAAOjB,EAAa,GAAKgB,EAASE,OAyCnCC,CAAMH,GACfD,EAAKX,EAnCb,SAAcY,GACZ,OAAO,EAAIA,EAASC,OAAOd,EAAY,GAkCxBiB,CAAKJ,KAEdD,EAAKd,EAAIY,EAAeZ,GAAKM,EAAWQ,EAAMF,GAAgB,EAC9DE,EAAKX,EAAI,EACTS,EAAeE,MAInB,IAAIM,EAnCR,SAAkBN,GAEhB,IADA,IAAIC,EACGA,EAAWD,EAAKC,UAAUD,EAAOC,EAAS,GACjD,OAAOD,EAgCMO,CAASV,GAChBW,EA9BR,SAAmBR,GAEjB,IADA,IAAIC,EACGA,EAAWD,EAAKC,UAAUD,EAAOC,EAASA,EAASE,OAAS,GACnE,OAAOH,EA2BOS,CAAUZ,GAClBa,EAAKJ,EAAKpB,EAAIM,EAAWc,EAAME,GAAS,EACxCG,EAAKH,EAAMtB,EAAIM,EAAWgB,EAAOF,GAAQ,EAG7C,OAAOT,EAAKE,UAAUJ,EAAW,SAASK,GACxCA,EAAKd,GAAKc,EAAKd,EAAIW,EAAKX,GAAKO,EAC7BO,EAAKX,GAAKQ,EAAKR,EAAIW,EAAKX,GAAKK,GAC3B,SAASM,GACXA,EAAKd,GAAKc,EAAKd,EAAIwB,IAAOC,EAAKD,GAAMjB,EACrCO,EAAKX,GAAK,GAAKQ,EAAKR,EAAIW,EAAKX,EAAIQ,EAAKR,EAAI,IAAMK,IAgBpD,OAZAE,EAAQJ,WAAa,SAASN,GAC5B,OAAO0B,UAAUT,QAAUX,EAAaN,EAAGU,GAAWJ,GAGxDI,EAAQiB,KAAO,SAAS3B,GACtB,OAAO0B,UAAUT,QAAUR,GAAW,EAAOF,GAAMP,EAAE,GAAIQ,GAAMR,EAAE,GAAIU,GAAYD,EAAW,KAAO,CAACF,EAAIC,IAG1GE,EAAQD,SAAW,SAAST,GAC1B,OAAO0B,UAAUT,QAAUR,GAAW,EAAMF,GAAMP,EAAE,GAAIQ,GAAMR,EAAE,GAAIU,GAAYD,EAAW,CAACF,EAAIC,GAAM,MAGjGE,EClFT,SAASkB,EAAMd,GACb,IAAIe,EAAM,EACNd,EAAWD,EAAKC,SAChBe,EAAIf,GAAYA,EAASE,OAC7B,GAAKa,EACA,OAASA,GAAK,GAAGD,GAAOd,EAASe,GAAGC,WADjCF,EAAM,EAEdf,EAAKiB,MAAQF,ECMA,SAASG,EAAUC,EAAMlB,GACtC,IAEID,EAEAoB,EACAC,EACAL,EACAM,EAPAzB,EAAO,IAAI0B,EAAKJ,GAChBK,GAAUL,EAAKF,QAAUpB,EAAKoB,MAAQE,EAAKF,OAE3CQ,EAAQ,CAAC5B,GAQb,IAFgB,MAAZI,IAAkBA,EAAWyB,GAE1B1B,EAAOyB,EAAME,OAElB,GADIH,IAAQxB,EAAKiB,OAASjB,EAAKmB,KAAKF,QAC/BI,EAASpB,EAASD,EAAKmB,SAAWG,EAAID,EAAOlB,QAEhD,IADAH,EAAKC,SAAW,IAAI2B,MAAMN,GACrBN,EAAIM,EAAI,EAAGN,GAAK,IAAKA,EACxBS,EAAMI,KAAKT,EAAQpB,EAAKC,SAASe,GAAK,IAAIO,EAAKF,EAAOL,KACtDI,EAAMpC,OAASgB,EACfoB,EAAMU,MAAQ9B,EAAK8B,MAAQ,EAKjC,OAAOjC,EAAKkC,WAAWC,GAOzB,SAASN,EAAgBO,GACvB,OAAOA,EAAEhC,SAGX,SAASiC,EAASlC,GAChBA,EAAKmB,KAAOnB,EAAKmB,KAAKA,KAGjB,SAASa,EAAchC,GAC5B,IAAImC,EAAS,EACb,GAAGnC,EAAKmC,OAASA,SACTnC,EAAOA,EAAKhB,SAAYgB,EAAKmC,SAAWA,GAG3C,SAASZ,EAAKJ,GACnBiB,KAAKjB,KAAOA,EACZiB,KAAKN,MACLM,KAAKD,OAAS,EACdC,KAAKpD,OAAS,KAGhBuC,EAAKc,UAAYnB,EAAUmB,UAAY,CACrCC,YAAaf,EACbT,MDzDa,WACb,OAAOsB,KAAKrC,UAAUe,ICyDtByB,KCnEa,SAASC,GACtB,IAAiBC,EAAwBxC,EAAUe,EAAGM,EAAlDtB,EAAOoC,KAAeM,EAAO,CAAC1C,GAClC,GAEE,IADAyC,EAAUC,EAAKC,UAAWD,EAAO,GAC1B1C,EAAOyC,EAAQd,OAEpB,GADAa,EAASxC,GAAOC,EAAWD,EAAKC,SAClB,IAAKe,EAAI,EAAGM,EAAIrB,EAASE,OAAQa,EAAIM,IAAKN,EACtD0B,EAAKb,KAAK5B,EAASe,UAGhB0B,EAAKvC,QACd,OAAOiC,MDyDPrC,UEpEa,SAASyC,GAEtB,IADA,IAA4CvC,EAAUe,EAAGM,EAArDtB,EAAOoC,KAAMX,EAAQ,CAACzB,GAAO0C,EAAO,GACjC1C,EAAOyB,EAAME,OAElB,GADAe,EAAKb,KAAK7B,GAAOC,EAAWD,EAAKC,SACnB,IAAKe,EAAI,EAAGM,EAAIrB,EAASE,OAAQa,EAAIM,IAAKN,EACtDS,EAAMI,KAAK5B,EAASe,IAGxB,KAAOhB,EAAO0C,EAAKf,OACjBa,EAASxC,GAEX,OAAOoC,MF0DPL,WGrEa,SAASS,GAEtB,IADA,IAAiCvC,EAAUe,EAAvChB,EAAOoC,KAAMX,EAAQ,CAACzB,GACnBA,EAAOyB,EAAME,OAElB,GADAa,EAASxC,GAAOC,EAAWD,EAAKC,SAClB,IAAKe,EAAIf,EAASE,OAAS,EAAGa,GAAK,IAAKA,EACpDS,EAAMI,KAAK5B,EAASe,IAGxB,OAAOoB,MH8DPrB,IItEa,SAASE,GACtB,OAAOmB,KAAKrC,WAAU,SAASC,GAI7B,IAHA,IAAIe,GAAOE,EAAMjB,EAAKmB,OAAS,EAC3BlB,EAAWD,EAAKC,SAChBe,EAAIf,GAAYA,EAASE,SACpBa,GAAK,GAAGD,GAAOd,EAASe,GAAGC,MACpCjB,EAAKiB,MAAQF,MJiEf6B,KKvEa,SAASC,GACtB,OAAOT,KAAKL,YAAW,SAAS/B,GAC1BA,EAAKC,UACPD,EAAKC,SAAS2C,KAAKC,OLqEvBC,KMxEa,SAASC,GAItB,IAHA,IAAIC,EAAQZ,KACRa,EAcN,SAA6BnE,EAAGC,GAC9B,GAAID,IAAMC,EAAG,OAAOD,EACpB,IAAIoE,EAASpE,EAAEqE,YACXC,EAASrE,EAAEoE,YACXhE,EAAI,KACRL,EAAIoE,EAAOvB,MACX5C,EAAIqE,EAAOzB,MACX,KAAO7C,IAAMC,GACXI,EAAIL,EACJA,EAAIoE,EAAOvB,MACX5C,EAAIqE,EAAOzB,MAEb,OAAOxC,EA1BQkE,CAAoBL,EAAOD,GACtCtB,EAAQ,CAACuB,GACNA,IAAUC,GACfD,EAAQA,EAAMhE,OACdyC,EAAMI,KAAKmB,GAGb,IADA,IAAIM,EAAI7B,EAAMtB,OACP4C,IAAQE,GACbxB,EAAM8B,OAAOD,EAAG,EAAGP,GACnBA,EAAMA,EAAI/D,OAEZ,OAAOyC,GN4DP0B,UOzEa,WAEb,IADA,IAAInD,EAAOoC,KAAMX,EAAQ,CAACzB,GACnBA,EAAOA,EAAKhB,QACjByC,EAAMI,KAAK7B,GAEb,OAAOyB,GPqEP+B,YQ1Ea,WACb,IAAI/B,EAAQ,GAIZ,OAHAW,KAAKG,MAAK,SAASvC,GACjByB,EAAMI,KAAK7B,MAENyB,GRsEPgC,OS3Ea,WACb,IAAIA,EAAS,GAMb,OALArB,KAAKL,YAAW,SAAS/B,GAClBA,EAAKC,UACRwD,EAAO5B,KAAK7B,MAGTyD,GTqEPC,MU5Ea,WACb,IAAI7D,EAAOuC,KAAMsB,EAAQ,GAMzB,OALA7D,EAAK0C,MAAK,SAASvC,GACbA,IAASH,GACX6D,EAAM7B,KAAK,CAAC8B,OAAQ3D,EAAKhB,OAAQ4E,OAAQ5D,OAGtC0D,GVsEPG,KAtCF,WACE,OAAO3C,EAAUkB,MAAML,WAAWG,KWxC7B,IAAI4B,EAAQlC,MAAMS,UAAUyB,MCEpB,WAASC,GAGtB,IAFA,IAAwEC,EAAGC,EAAvEjD,EAAI,EAAGM,GAAKyC,EDDX,SAAiBG,GAKtB,IAJA,IACIC,EACAnD,EAFAoD,EAAIF,EAAM/D,OAIPiE,GACLpD,EAAI1B,KAAK+E,SAAWD,IAAM,EAC1BD,EAAID,EAAME,GACVF,EAAME,GAAKF,EAAMlD,GACjBkD,EAAMlD,GAAKmD,EAGb,OAAOD,ECXmBI,CAAQR,EAAMS,KAAKR,KAAW5D,OAAQqE,EAAI,GAE7DxD,EAAIM,GACT0C,EAAID,EAAQ/C,GACRiD,GAAKQ,EAAaR,EAAGD,KAAMhD,GAC1BiD,EAAIS,EAAaF,EAAIG,EAAYH,EAAGR,IAAKhD,EAAI,GAGpD,OAAOiD,EAGT,SAASU,EAAYH,EAAGR,GACtB,IAAIhD,EAAG4D,EAEP,GAAIC,EAAgBb,EAAGQ,GAAI,MAAO,CAACR,GAGnC,IAAKhD,EAAI,EAAGA,EAAIwD,EAAErE,SAAUa,EAC1B,GAAI8D,EAAYd,EAAGQ,EAAExD,KACd6D,EAAgBE,EAAcP,EAAExD,GAAIgD,GAAIQ,GAC7C,MAAO,CAACA,EAAExD,GAAIgD,GAKlB,IAAKhD,EAAI,EAAGA,EAAIwD,EAAErE,OAAS,IAAKa,EAC9B,IAAK4D,EAAI5D,EAAI,EAAG4D,EAAIJ,EAAErE,SAAUyE,EAC9B,GAAIE,EAAYC,EAAcP,EAAExD,GAAIwD,EAAEI,IAAKZ,IACpCc,EAAYC,EAAcP,EAAExD,GAAIgD,GAAIQ,EAAEI,KACtCE,EAAYC,EAAcP,EAAEI,GAAIZ,GAAIQ,EAAExD,KACtC6D,EAAgBG,EAAcR,EAAExD,GAAIwD,EAAEI,GAAIZ,GAAIQ,GACnD,MAAO,CAACA,EAAExD,GAAIwD,EAAEI,GAAIZ,GAM1B,MAAM,IAAIiB,MAGZ,SAASH,EAAYhG,EAAGC,GACtB,IAAImG,EAAKpG,EAAEqG,EAAIpG,EAAEoG,EAAG1F,EAAKV,EAAEG,EAAIJ,EAAEI,EAAGQ,EAAKX,EAAEM,EAAIP,EAAEO,EACjD,OAAO6F,EAAK,GAAKA,EAAKA,EAAKzF,EAAKA,EAAKC,EAAKA,EAG5C,SAAS+E,EAAa3F,EAAGC,GACvB,IAAImG,EAAKpG,EAAEqG,EAAIpG,EAAEoG,EAAI,KAAM1F,EAAKV,EAAEG,EAAIJ,EAAEI,EAAGQ,EAAKX,EAAEM,EAAIP,EAAEO,EACxD,OAAO6F,EAAK,GAAKA,EAAKA,EAAKzF,EAAKA,EAAKC,EAAKA,EAG5C,SAASmF,EAAgB/F,EAAG0F,GAC1B,IAAK,IAAIxD,EAAI,EAAGA,EAAIwD,EAAErE,SAAUa,EAC9B,IAAKyD,EAAa3F,EAAG0F,EAAExD,IACrB,OAAO,EAGX,OAAO,EAGT,SAAS0D,EAAaF,GACpB,OAAQA,EAAErE,QACR,KAAK,EAAG,MAOH,CACLjB,GAFmBJ,EANU0F,EAAE,IAQ1BtF,EACLG,EAAGP,EAAEO,EACL8F,EAAGrG,EAAEqG,GATL,KAAK,EAAG,OAAOJ,EAAcP,EAAE,GAAIA,EAAE,IACrC,KAAK,EAAG,OAAOQ,EAAcR,EAAE,GAAIA,EAAE,GAAIA,EAAE,IAI/C,IAAuB1F,EAQvB,SAASiG,EAAcjG,EAAGC,GACxB,IAAI4B,EAAK7B,EAAEI,EAAGkG,EAAKtG,EAAEO,EAAGgG,EAAKvG,EAAEqG,EAC3BG,EAAKvG,EAAEG,EAAGqG,EAAKxG,EAAEM,EAAGmG,EAAKzG,EAAEoG,EAC3BM,EAAMH,EAAK3E,EAAI+E,EAAMH,EAAKH,EAAIO,EAAMH,EAAKH,EACzCO,EAAItG,KAAKuG,KAAKJ,EAAMA,EAAMC,EAAMA,GACpC,MAAO,CACLxG,GAAIyB,EAAK2E,EAAKG,EAAMG,EAAID,GAAO,EAC/BtG,GAAI+F,EAAKG,EAAKG,EAAME,EAAID,GAAO,EAC/BR,GAAIS,EAAIP,EAAKG,GAAM,GAIvB,SAASR,EAAclG,EAAGC,EAAGI,GAC3B,IAAIwB,EAAK7B,EAAEI,EAAGkG,EAAKtG,EAAEO,EAAGgG,EAAKvG,EAAEqG,EAC3BG,EAAKvG,EAAEG,EAAGqG,EAAKxG,EAAEM,EAAGmG,EAAKzG,EAAEoG,EAC3BW,EAAK3G,EAAED,EAAG6G,EAAK5G,EAAEE,EAAG2G,EAAK7G,EAAEgG,EAC3Bc,EAAKtF,EAAK2E,EACVY,EAAKvF,EAAKmF,EACVK,EAAKf,EAAKG,EACVa,EAAKhB,EAAKW,EACVM,EAAKb,EAAKH,EACViB,EAAKN,EAAKX,EACVkB,EAAK5F,EAAKA,EAAKyE,EAAKA,EAAKC,EAAKA,EAC9BmB,EAAKD,EAAKjB,EAAKA,EAAKC,EAAKA,EAAKC,EAAKA,EACnCiB,EAAKF,EAAKT,EAAKA,EAAKC,EAAKA,EAAKC,EAAKA,EACnCU,EAAKR,EAAKC,EAAKF,EAAKG,EACpBO,GAAMR,EAAKM,EAAKL,EAAKI,IAAY,EAALE,GAAU/F,EACtCiG,GAAMR,EAAKC,EAAKF,EAAKG,GAAMI,EAC3BG,GAAMX,EAAKM,EAAKP,EAAKQ,IAAY,EAALC,GAAUtB,EACtC0B,GAAMb,EAAKK,EAAKJ,EAAKG,GAAMK,EAC3BK,EAAIH,EAAKA,EAAKE,EAAKA,EAAK,EACxBtC,EAAI,GAAKa,EAAKsB,EAAKC,EAAKC,EAAKC,GAC7BE,EAAIL,EAAKA,EAAKE,EAAKA,EAAKxB,EAAKA,EAC7BF,IAAM4B,GAAKvC,EAAIlF,KAAKuG,KAAKrB,EAAIA,EAAI,EAAIuC,EAAIC,KAAO,EAAID,GAAKC,EAAIxC,GACjE,MAAO,CACLtF,EAAGyB,EAAKgG,EAAKC,EAAKzB,EAClB9F,EAAG+F,EAAKyB,EAAKC,EAAK3B,EAClBA,EAAGA,GCjHP,SAAS8B,EAAMlI,EAAGD,EAAGK,GACnB,IAAoBD,EAAG+G,EACH5G,EAAG8G,EADnB1G,EAAKV,EAAEG,EAAIJ,EAAEI,EACbQ,EAAKX,EAAEM,EAAIP,EAAEO,EACbmH,EAAK/G,EAAKA,EAAKC,EAAKA,EACpB8G,GACFP,EAAKnH,EAAEqG,EAAIhG,EAAEgG,EAAGc,GAAMA,EACtBE,EAAKpH,EAAEoG,EAAIhG,EAAEgG,EACTc,GADYE,GAAMA,IAEpBjH,GAAKsH,EAAKL,EAAKF,IAAO,EAAIO,GAC1BnH,EAAIC,KAAKuG,KAAKvG,KAAKC,IAAI,EAAG4G,EAAKK,EAAKtH,EAAIA,IACxCC,EAAED,EAAIH,EAAEG,EAAIA,EAAIO,EAAKJ,EAAIK,EACzBP,EAAEE,EAAIN,EAAEM,EAAIH,EAAIQ,EAAKL,EAAII,IAEzBP,GAAKsH,EAAKP,EAAKE,IAAO,EAAIK,GAC1BnH,EAAIC,KAAKuG,KAAKvG,KAAKC,IAAI,EAAG0G,EAAKO,EAAKtH,EAAIA,IACxCC,EAAED,EAAIJ,EAAEI,EAAIA,EAAIO,EAAKJ,EAAIK,EACzBP,EAAEE,EAAIP,EAAEO,EAAIH,EAAIQ,EAAKL,EAAII,KAG3BN,EAAED,EAAIJ,EAAEI,EAAIC,EAAEgG,EACdhG,EAAEE,EAAIP,EAAEO,GAIZ,SAAS6H,EAAWpI,EAAGC,GACrB,IAAImG,EAAKpG,EAAEqG,EAAIpG,EAAEoG,EAAI,KAAM1F,EAAKV,EAAEG,EAAIJ,EAAEI,EAAGQ,EAAKX,EAAEM,EAAIP,EAAEO,EACxD,OAAO6F,EAAK,GAAKA,EAAKA,EAAKzF,EAAKA,EAAKC,EAAKA,EAG5C,SAASyH,EAAMnH,GACb,IAAIlB,EAAIkB,EAAKoH,EACTrI,EAAIiB,EAAK0C,KAAK0E,EACdV,EAAK5H,EAAEqG,EAAIpG,EAAEoG,EACb1F,GAAMX,EAAEI,EAAIH,EAAEoG,EAAIpG,EAAEG,EAAIJ,EAAEqG,GAAKuB,EAC/BhH,GAAMZ,EAAEO,EAAIN,EAAEoG,EAAIpG,EAAEM,EAAIP,EAAEqG,GAAKuB,EACnC,OAAOjH,EAAKA,EAAKC,EAAKA,EAGxB,SAAS6B,EAAK8F,GACZjF,KAAKgF,EAAIC,EACTjF,KAAKM,KAAO,KACZN,KAAKkF,SAAW,KAGX,SAASC,EAAYxD,GAC1B,KAAMzC,EAAIyC,EAAQ5D,QAAS,OAAO,EAElC,IAAIrB,EAAGC,EAAGI,EAAGmC,EAAGkG,EAAIC,EAAIzG,EAAG4D,EAAGtB,EAAGoE,EAAIC,EAIrC,IADA7I,EAAIiF,EAAQ,IAAM7E,EAAI,EAAGJ,EAAEO,EAAI,IACzBiC,EAAI,GAAI,OAAOxC,EAAEqG,EAIvB,GADApG,EAAIgF,EAAQ,GAAIjF,EAAEI,GAAKH,EAAEoG,EAAGpG,EAAEG,EAAIJ,EAAEqG,EAAGpG,EAAEM,EAAI,IACvCiC,EAAI,GAAI,OAAOxC,EAAEqG,EAAIpG,EAAEoG,EAG7B8B,EAAMlI,EAAGD,EAAGK,EAAI4E,EAAQ,IAGxBjF,EAAI,IAAIyC,EAAKzC,GAAIC,EAAI,IAAIwC,EAAKxC,GAAII,EAAI,IAAIoC,EAAKpC,GAC/CL,EAAE4D,KAAOvD,EAAEmI,SAAWvI,EACtBA,EAAE2D,KAAO5D,EAAEwI,SAAWnI,EACtBA,EAAEuD,KAAO3D,EAAEuI,SAAWxI,EAGtB8I,EAAM,IAAK5G,EAAI,EAAGA,EAAIM,IAAKN,EAAG,CAC5BiG,EAAMnI,EAAEsI,EAAGrI,EAAEqI,EAAGjI,EAAI4E,EAAQ/C,IAAK7B,EAAI,IAAIoC,EAAKpC,GAK9CyF,EAAI7F,EAAE2D,KAAMY,EAAIxE,EAAEwI,SAAUI,EAAK3I,EAAEqI,EAAEjC,EAAGwC,EAAK7I,EAAEsI,EAAEjC,EACjD,GACE,GAAIuC,GAAMC,EAAI,CACZ,GAAIT,EAAWtC,EAAEwC,EAAGjI,EAAEiI,GAAI,CACxBrI,EAAI6F,EAAG9F,EAAE4D,KAAO3D,EAAGA,EAAEuI,SAAWxI,IAAKkC,EACrC,SAAS4G,EAEXF,GAAM9C,EAAEwC,EAAEjC,EAAGP,EAAIA,EAAElC,SACd,CACL,GAAIwE,EAAW5D,EAAE8D,EAAGjI,EAAEiI,GAAI,EACxBtI,EAAIwE,GAAKZ,KAAO3D,EAAGA,EAAEuI,SAAWxI,IAAKkC,EACrC,SAAS4G,EAEXD,GAAMrE,EAAE8D,EAAEjC,EAAG7B,EAAIA,EAAEgE,gBAEd1C,IAAMtB,EAAEZ,MAOjB,IAJAvD,EAAEmI,SAAWxI,EAAGK,EAAEuD,KAAO3D,EAAGD,EAAE4D,KAAO3D,EAAEuI,SAAWvI,EAAII,EAGtDqI,EAAKL,EAAMrI,IACHK,EAAIA,EAAEuD,QAAU3D,IACjB0I,EAAKN,EAAMhI,IAAMqI,IACpB1I,EAAIK,EAAGqI,EAAKC,GAGhB1I,EAAID,EAAE4D,KAIU,IAAlB5D,EAAI,CAACC,EAAEqI,GAAIjI,EAAIJ,GAAWI,EAAIA,EAAEuD,QAAU3D,GAAGD,EAAE+C,KAAK1C,EAAEiI,GAGtD,IAH0DjI,EAAI0I,EAAQ/I,GAGjEkC,EAAI,EAAGA,EAAIM,IAAKN,GAAGlC,EAAIiF,EAAQ/C,IAAM9B,GAAKC,EAAED,EAAGJ,EAAEO,GAAKF,EAAEE,EAE7D,OAAOF,EAAEgG,EAGX,WAAwBpB,GAEtB,OADAwD,EAAYxD,GACLA,ECpHF,SAAS+D,EAASC,GACvB,OAAY,MAALA,EAAY,KAAOC,EAASD,GAG9B,SAASC,EAASD,GACvB,GAAiB,mBAANA,EAAkB,MAAM,IAAI9C,MACvC,OAAO8C,ECNF,SAASE,IACd,OAAO,EAGT,WAAwB/I,GACtB,OAAO,WACL,OAAOA,GCFX,SAASgJ,EAAcjG,GACrB,OAAO3C,KAAKuG,KAAK5D,EAAEhB,OAGN,aACb,IAAIkH,EAAS,KACT1I,EAAK,EACLC,EAAK,EACL0I,EAAUH,EAEd,SAASL,EAAK/H,GAYZ,OAXAA,EAAKX,EAAIO,EAAK,EAAGI,EAAKR,EAAIK,EAAK,EAC3ByI,EACFtI,EAAKkC,WAAWsG,EAAWF,IACtBpI,UAAUuI,EAAaF,EAAS,KAChCrG,WAAWwG,EAAe,IAE/B1I,EAAKkC,WAAWsG,EAAWH,IACtBnI,UAAUuI,EAAaL,EAAc,IACrClI,UAAUuI,EAAaF,EAASvI,EAAKsF,EAAI7F,KAAKkJ,IAAI/I,EAAIC,KACtDqC,WAAWwG,EAAejJ,KAAKkJ,IAAI/I,EAAIC,IAAO,EAAIG,EAAKsF,KAEvDtF,EAeT,OAZA+H,EAAKO,OAAS,SAASjJ,GACrB,OAAO0B,UAAUT,QAAUgI,EAASL,EAAS5I,GAAI0I,GAAQO,GAG3DP,EAAK/G,KAAO,SAAS3B,GACnB,OAAO0B,UAAUT,QAAUV,GAAMP,EAAE,GAAIQ,GAAMR,EAAE,GAAI0I,GAAQ,CAACnI,EAAIC,IAGlEkI,EAAKQ,QAAU,SAASlJ,GACtB,OAAO0B,UAAUT,QAAUiI,EAAuB,mBAANlJ,EAAmBA,EAAIuJ,GAAUvJ,GAAI0I,GAAQQ,GAGpFR,EAGT,SAASS,EAAWF,GAClB,OAAO,SAASnI,GACTA,EAAKC,WACRD,EAAKmF,EAAI7F,KAAKC,IAAI,GAAI4I,EAAOnI,IAAS,KAK5C,SAASsI,EAAaF,EAAS9E,GAC7B,OAAO,SAAStD,GACd,GAAIC,EAAWD,EAAKC,SAAU,CAC5B,IAAIA,EACAe,EAGAiD,EAFA3C,EAAIrB,EAASE,OACbgF,EAAIiD,EAAQpI,GAAQsD,GAAK,EAG7B,GAAI6B,EAAG,IAAKnE,EAAI,EAAGA,EAAIM,IAAKN,EAAGf,EAASe,GAAGmE,GAAKA,EAEhD,GADAlB,EAAIsD,EAAYtH,GACZkF,EAAG,IAAKnE,EAAI,EAAGA,EAAIM,IAAKN,EAAGf,EAASe,GAAGmE,GAAKA,EAChDnF,EAAKmF,EAAIlB,EAAIkB,IAKnB,SAASoD,EAAejF,GACtB,OAAO,SAAStD,GACd,IAAIhB,EAASgB,EAAKhB,OAClBgB,EAAKmF,GAAK7B,EACNtE,IACFgB,EAAKd,EAAIF,EAAOE,EAAIoE,EAAItD,EAAKd,EAC7Bc,EAAKX,EAAIL,EAAOK,EAAIiE,EAAItD,EAAKX,IC3EpB,WAASW,GACtBA,EAAKU,GAAKpB,KAAKoJ,MAAM1I,EAAKU,IAC1BV,EAAK2I,GAAKrJ,KAAKoJ,MAAM1I,EAAK2I,IAC1B3I,EAAKW,GAAKrB,KAAKoJ,MAAM1I,EAAKW,IAC1BX,EAAKoF,GAAK9F,KAAKoJ,MAAM1I,EAAKoF,ICJb,WAASpG,EAAQ0B,EAAIiI,EAAIhI,EAAIyE,GAO1C,IANA,IACIpF,EADAyB,EAAQzC,EAAOiB,SAEfe,GAAK,EACLM,EAAIG,EAAMtB,OACVmD,EAAItE,EAAOiC,QAAUN,EAAKD,GAAM1B,EAAOiC,QAElCD,EAAIM,IACXtB,EAAOyB,EAAMT,IAAS2H,GAAKA,EAAI3I,EAAKoF,GAAKA,EACzCpF,EAAKU,GAAKA,EAAIV,EAAKW,GAAKD,GAAMV,EAAKiB,MAAQqC,ECNhC,aACb,IAAI7D,EAAK,EACLC,EAAK,EACL0I,EAAU,EACVM,GAAQ,EAEZ,SAASE,EAAU/I,GACjB,IAAIyB,EAAIzB,EAAKsC,OAAS,EAOtB,OANAtC,EAAKa,GACLb,EAAK8I,GAAKP,EACVvI,EAAKc,GAAKlB,EACVI,EAAKuF,GAAK1F,EAAK4B,EACfzB,EAAKkC,WAKP,SAAsBrC,EAAI4B,GACxB,OAAO,SAAStB,GACVA,EAAKC,UACP4I,EAAY7I,EAAMA,EAAKU,GAAIhB,GAAMM,EAAK8B,MAAQ,GAAKR,EAAGtB,EAAKW,GAAIjB,GAAMM,EAAK8B,MAAQ,GAAKR,GAEzF,IAAIZ,EAAKV,EAAKU,GACViI,EAAK3I,EAAK2I,GACVhI,EAAKX,EAAKW,GAAKyH,EACfhD,EAAKpF,EAAKoF,GAAKgD,EACfzH,EAAKD,IAAIA,EAAKC,GAAMD,EAAKC,GAAM,GAC/ByE,EAAKuD,IAAIA,EAAKvD,GAAMuD,EAAKvD,GAAM,GACnCpF,EAAKU,GAAKA,EACVV,EAAK2I,GAAKA,EACV3I,EAAKW,GAAKA,EACVX,EAAKoF,GAAKA,GAnBI0D,CAAapJ,EAAI4B,IAC7BoH,GAAO7I,EAAKkC,WAAWgH,GACpBlJ,EAiCT,OAZA+I,EAAUF,MAAQ,SAASxJ,GACzB,OAAO0B,UAAUT,QAAUuI,IAAUxJ,EAAG0J,GAAaF,GAGvDE,EAAU/H,KAAO,SAAS3B,GACxB,OAAO0B,UAAUT,QAAUV,GAAMP,EAAE,GAAIQ,GAAMR,EAAE,GAAI0J,GAAa,CAACnJ,EAAIC,IAGvEkJ,EAAUR,QAAU,SAASlJ,GAC3B,OAAO0B,UAAUT,QAAUiI,GAAWlJ,EAAG0J,GAAaR,GAGjDQ,EC/CT,IACII,EAAU,CAAClH,OAAQ,GACnBmH,EAAY,GAEhB,SAASC,EAAUjH,GACjB,OAAOA,EAAEkH,GAGX,SAASC,EAAgBnH,GACvB,OAAOA,EAAEoH,SAGI,aACb,IAAIF,EAAKD,EACLG,EAAWD,EAEf,SAASE,EAASnI,GAChB,IAAIc,EACAjB,EAEAnB,EACAb,EACAgB,EAEAuJ,EACAC,EANAlI,EAAIH,EAAKhB,OAITsB,EAAQ,IAAIG,MAAMN,GAGlBmI,EAAY,GAEhB,IAAKzI,EAAI,EAAGA,EAAIM,IAAKN,EACnBiB,EAAId,EAAKH,GAAIhB,EAAOyB,EAAMT,GAAK,IAAIO,EAAKU,GACP,OAA5BsH,EAASJ,EAAGlH,EAAGjB,EAAGG,MAAmBoI,GAAU,MAElDE,EADAD,EA/BQ,KA+BexJ,EAAKmJ,GAAKI,IACZC,KAAWC,EAAYR,EAAYjJ,GAI5D,IAAKgB,EAAI,EAAGA,EAAIM,IAAKN,EAEnB,GADAhB,EAAOyB,EAAMT,GACC,OADGuI,EAASF,EAASlI,EAAKH,GAAIA,EAAGG,MACvBoI,GAAU,IAG3B,CAEL,KADAvK,EAASyK,EA1CD,IA0CuBF,IAClB,MAAM,IAAItE,MAAM,YAAcsE,GAC3C,GAAIvK,IAAWiK,EAAW,MAAM,IAAIhE,MAAM,cAAgBsE,GACtDvK,EAAOiB,SAAUjB,EAAOiB,SAAS4B,KAAK7B,GACrChB,EAAOiB,SAAW,CAACD,GACxBA,EAAKhB,OAASA,MATuB,CACrC,GAAIa,EAAM,MAAM,IAAIoF,MAAM,kBAC1BpF,EAAOG,EAWX,IAAKH,EAAM,MAAM,IAAIoF,MAAM,WAI3B,GAHApF,EAAKb,OAASgK,EACdnJ,EAAKkC,YAAW,SAAS/B,GAAQA,EAAK8B,MAAQ9B,EAAKhB,OAAO8C,MAAQ,IAAKR,KAAMS,WAAWC,GACxFnC,EAAKb,OAAS,KACVsC,EAAI,EAAG,MAAM,IAAI2D,MAAM,SAE3B,OAAOpF,EAWT,OARAyJ,EAASH,GAAK,SAASjK,GACrB,OAAO0B,UAAUT,QAAUgJ,EAAKnB,EAAS9I,GAAIoK,GAAYH,GAG3DG,EAASD,SAAW,SAASnK,GAC3B,OAAO0B,UAAUT,QAAUkJ,EAAWrB,EAAS9I,GAAIoK,GAAYD,GAG1DC,ECrET,SAASzK,EAAkBC,EAAGC,GAC5B,OAAOD,EAAEE,SAAWD,EAAEC,OAAS,EAAI,EAWrC,SAAS0K,EAASC,GAChB,IAAI1J,EAAW0J,EAAE1J,SACjB,OAAOA,EAAWA,EAAS,GAAK0J,EAAExF,EAIpC,SAASyF,EAAUD,GACjB,IAAI1J,EAAW0J,EAAE1J,SACjB,OAAOA,EAAWA,EAASA,EAASE,OAAS,GAAKwJ,EAAExF,EAKtD,SAAS0F,EAAYC,EAAIC,EAAIC,GAC3B,IAAIC,EAASD,GAASD,EAAG/I,EAAI8I,EAAG9I,GAChC+I,EAAG5K,GAAK8K,EACRF,EAAGG,GAAKF,EACRF,EAAG3K,GAAK8K,EACRF,EAAGI,GAAKH,EACRD,EAAG3F,GAAK4F,EAsBV,SAASI,EAAaC,EAAKV,EAAG1G,GAC5B,OAAOoH,EAAIvL,EAAEE,SAAW2K,EAAE3K,OAASqL,EAAIvL,EAAImE,EAG7C,SAASqH,EAAStK,EAAMgB,GACtBoB,KAAKgF,EAAIpH,EACToC,KAAKpD,OAAS,KACdoD,KAAKnC,SAAW,KAChBmC,KAAK2E,EAAI,KACT3E,KAAKtD,EAAIsD,KACTA,KAAK+H,EAAI,EACT/H,KAAKgC,EAAI,EACThC,KAAKjD,EAAI,EACTiD,KAAK8H,EAAI,EACT9H,KAAK+B,EAAI,KACT/B,KAAKpB,EAAIA,EA6BI,aACb,IAAIxB,EAAaX,EACbY,EAAK,EACLC,EAAK,EACLC,EAAW,KAEf,SAAS4K,EAAK1K,GACZ,IAAIsE,EA/BR,SAAkBtE,GAShB,IARA,IACIG,EAEAoB,EACAnB,EACAe,EACAM,EANAiJ,EAAO,IAAID,EAASzK,EAAM,GAE1B4B,EAAQ,CAAC8I,GAMNvK,EAAOyB,EAAME,OAClB,GAAI1B,EAAWD,EAAKoH,EAAEnH,SAEpB,IADAD,EAAKC,SAAW,IAAI2B,MAAMN,EAAIrB,EAASE,QAClCa,EAAIM,EAAI,EAAGN,GAAK,IAAKA,EACxBS,EAAMI,KAAKT,EAAQpB,EAAKC,SAASe,GAAK,IAAIsJ,EAASrK,EAASe,GAAIA,IAChEI,EAAMpC,OAASgB,EAMrB,OADCuK,EAAKvL,OAAS,IAAIsL,EAAS,KAAM,IAAIrK,SAAW,CAACsK,GAC3CA,EAWGC,CAAS3K,GAOjB,GAJAsE,EAAEpE,UAAU0K,GAAYtG,EAAEnF,OAAOoF,GAAKD,EAAEgG,EACxChG,EAAEpC,WAAW2I,GAGT/K,EAAUE,EAAKkC,WAAW4I,OAIzB,CACH,IAAIrK,EAAOT,EACPW,EAAQX,EACR+K,EAAS/K,EACbA,EAAKkC,YAAW,SAAS/B,GACnBA,EAAKd,EAAIoB,EAAKpB,IAAGoB,EAAON,GACxBA,EAAKd,EAAIsB,EAAMtB,IAAGsB,EAAQR,GAC1BA,EAAK8B,MAAQ8I,EAAO9I,QAAO8I,EAAS5K,MAE1C,IAAIkK,EAAI5J,IAASE,EAAQ,EAAIhB,EAAWc,EAAME,GAAS,EACnDqK,EAAKX,EAAI5J,EAAKpB,EACd4L,EAAKrL,GAAMe,EAAMtB,EAAIgL,EAAIW,GACzBE,EAAKrL,GAAMkL,EAAO9I,OAAS,GAC/BjC,EAAKkC,YAAW,SAAS/B,GACvBA,EAAKd,GAAKc,EAAKd,EAAI2L,GAAMC,EACzB9K,EAAKX,EAAIW,EAAK8B,MAAQiJ,KAI1B,OAAOlL,EAOT,SAAS4K,EAAUd,GACjB,IAAI1J,EAAW0J,EAAE1J,SACb+K,EAAWrB,EAAE3K,OAAOiB,SACpBgL,EAAItB,EAAE3I,EAAIgK,EAASrB,EAAE3I,EAAI,GAAK,KAClC,GAAIf,EAAU,EA5GlB,SAAuB0J,GAMrB,IALA,IAIIsB,EAJAjB,EAAQ,EACRC,EAAS,EACThK,EAAW0J,EAAE1J,SACbe,EAAIf,EAASE,SAERa,GAAK,IACZiK,EAAIhL,EAASe,IACXmJ,GAAKH,EACPiB,EAAE7G,GAAK4F,EACPA,GAASiB,EAAEf,GAAKD,GAAUgB,EAAE9L,GAmG1B+L,CAAcvB,GACd,IAAIwB,GAAYlL,EAAS,GAAGkK,EAAIlK,EAASA,EAASE,OAAS,GAAGgK,GAAK,EAC/Dc,GACFtB,EAAEQ,EAAIc,EAAEd,EAAI3K,EAAWmK,EAAEvC,EAAG6D,EAAE7D,GAC9BuC,EAAEvF,EAAIuF,EAAEQ,EAAIgB,GAEZxB,EAAEQ,EAAIgB,OAECF,IACTtB,EAAEQ,EAAIc,EAAEd,EAAI3K,EAAWmK,EAAEvC,EAAG6D,EAAE7D,IAEhCuC,EAAE3K,OAAO+H,EAoBX,SAAmB4C,EAAGsB,EAAGhI,GACvB,GAAIgI,EAAG,CAUL,IATA,IAQIjB,EARAoB,EAAMzB,EACN0B,EAAM1B,EACNU,EAAMY,EACNK,EAAMF,EAAIpM,OAAOiB,SAAS,GAC1BsL,EAAMH,EAAIhH,EACVoH,EAAMH,EAAIjH,EACVqH,EAAMpB,EAAIjG,EACVsH,EAAMJ,EAAIlH,EAEPiG,EAAMT,EAAUS,GAAMe,EAAM1B,EAAS0B,GAAMf,GAAOe,GACvDE,EAAM5B,EAAS4B,IACfD,EAAMzB,EAAUyB,IACZvM,EAAI6K,GACRK,EAAQK,EAAIF,EAAIsB,EAAML,EAAIjB,EAAIoB,EAAM/L,EAAW6K,EAAIjD,EAAGgE,EAAIhE,IAC9C,IACVyC,EAAYO,EAAaC,EAAKV,EAAG1G,GAAW0G,EAAGK,GAC/CuB,GAAOvB,EACPwB,GAAOxB,GAETyB,GAAOpB,EAAIjG,EACXmH,GAAOH,EAAIhH,EACXsH,GAAOJ,EAAIlH,EACXoH,GAAOH,EAAIjH,EAETiG,IAAQT,EAAUyB,KACpBA,EAAIlH,EAAIkG,EACRgB,EAAIjH,GAAKqH,EAAMD,GAEbJ,IAAQ1B,EAAS4B,KACnBA,EAAInH,EAAIiH,EACRE,EAAIlH,GAAKmH,EAAMG,EACfzI,EAAW0G,GAGf,OAAO1G,EAxDM0I,CAAUhC,EAAGsB,EAAGtB,EAAE3K,OAAO+H,GAAKiE,EAAS,IAItD,SAASN,EAAWf,GAClBA,EAAEvC,EAAElI,EAAIyK,EAAEQ,EAAIR,EAAE3K,OAAOoF,EACvBuF,EAAEvF,GAAKuF,EAAE3K,OAAOoF,EAqDlB,SAASuG,EAAS3K,GAChBA,EAAKd,GAAKO,EACVO,EAAKX,EAAIW,EAAK8B,MAAQpC,EAexB,OAZA6K,EAAK/K,WAAa,SAASN,GACzB,OAAO0B,UAAUT,QAAUX,EAAaN,EAAGqL,GAAQ/K,GAGrD+K,EAAK1J,KAAO,SAAS3B,GACnB,OAAO0B,UAAUT,QAAUR,GAAW,EAAOF,GAAMP,EAAE,GAAIQ,GAAMR,EAAE,GAAIqL,GAAS5K,EAAW,KAAO,CAACF,EAAIC,IAGvG6K,EAAK5K,SAAW,SAAST,GACvB,OAAO0B,UAAUT,QAAUR,GAAW,EAAMF,GAAMP,EAAE,GAAIQ,GAAMR,EAAE,GAAIqL,GAAS5K,EAAW,CAACF,EAAIC,GAAM,MAG9F6K,EC3OM,WAASvL,EAAQ0B,EAAIiI,EAAIhI,EAAIyE,GAO1C,IANA,IACIpF,EADAyB,EAAQzC,EAAOiB,SAEfe,GAAK,EACLM,EAAIG,EAAMtB,OACVmD,EAAItE,EAAOiC,QAAUmE,EAAKuD,GAAM3J,EAAOiC,QAElCD,EAAIM,IACXtB,EAAOyB,EAAMT,IAASN,GAAKA,EAAIV,EAAKW,GAAKA,EACzCX,EAAK2I,GAAKA,EAAI3I,EAAKoF,GAAKuD,GAAM3I,EAAKiB,MAAQqC,EDgE/CgH,EAASjI,UAAYuJ,OAAOC,OAAOtK,EAAKc,WEtEjC,IAAIyJ,GAAO,EAAIxM,KAAKuG,KAAK,IAAM,EAE/B,SAASkG,EAAcC,EAAOhN,EAAQ0B,EAAIiI,EAAIhI,EAAIyE,GAkBvD,IAjBA,IAEI6G,EACAC,EAIAzM,EAAIC,EAEJyM,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAfAC,EAAO,GACPjL,EAAQzC,EAAOiB,SAGf0M,EAAK,EACLC,EAAK,EACLtL,EAAIG,EAAMtB,OAEVc,EAAQjC,EAAOiC,MASZ0L,EAAKrL,GAAG,CACb7B,EAAKkB,EAAKD,EAAIhB,EAAK0F,EAAKuD,EAGxB,GAAGwD,EAAW1K,EAAMmL,KAAM3L,aAAekL,GAAYS,EAAKtL,GAO1D,IANA8K,EAAWC,EAAWF,EAEtBM,EAAON,EAAWA,GADlBK,EAAQlN,KAAKC,IAAIG,EAAKD,EAAIA,EAAKC,IAAOuB,EAAQ+K,IAE9CO,EAAWjN,KAAKC,IAAI8M,EAAWI,EAAMA,EAAOL,GAGrCQ,EAAKtL,IAAKsL,EAAI,CAMnB,GALAT,GAAYD,EAAYzK,EAAMmL,GAAI3L,MAC9BiL,EAAYE,IAAUA,EAAWF,GACjCA,EAAYG,IAAUA,EAAWH,GACrCO,EAAON,EAAWA,EAAWK,GAC7BF,EAAWhN,KAAKC,IAAI8M,EAAWI,EAAMA,EAAOL,IAC7BG,EAAU,CAAEJ,GAAYD,EAAW,MAClDK,EAAWD,EAIbI,EAAK7K,KAAKoK,EAAM,CAAChL,MAAOkL,EAAUU,KAAMpN,EAAKC,EAAIO,SAAUwB,EAAMqC,MAAM6I,EAAIC,KACvEX,EAAIY,KAAMhE,EAAYoD,EAAKvL,EAAIiI,EAAIhI,EAAIM,EAAQ0H,GAAMjJ,EAAKyM,EAAWlL,EAAQmE,GAC5E0H,EAAab,EAAKvL,EAAIiI,EAAI1H,EAAQP,GAAMjB,EAAK0M,EAAWlL,EAAQN,EAAIyE,GACzEnE,GAASkL,EAAUQ,EAAKC,EAG1B,OAAOF,EAGT,MAAe,SAAUK,EAAOf,GAE9B,SAASgB,EAAShO,EAAQ0B,EAAIiI,EAAIhI,EAAIyE,GACpC2G,EAAcC,EAAOhN,EAAQ0B,EAAIiI,EAAIhI,EAAIyE,GAO3C,OAJA4H,EAAShB,MAAQ,SAAS9M,GACxB,OAAO6N,GAAQ7N,GAAKA,GAAK,EAAIA,EAAI,IAG5B8N,EAVM,CAWZlB,GC5DY,aACb,IAAImB,EAAOD,EACPtE,GAAQ,EACRjJ,EAAK,EACLC,EAAK,EACLwN,EAAe,CAAC,GAChBC,EAAelF,EACfmF,EAAanF,EACboF,EAAepF,EACfqF,EAAgBrF,EAChBsF,EAActF,EAElB,SAASuF,EAAQ3N,GAQf,OAPAA,EAAKa,GACLb,EAAK8I,GAAK,EACV9I,EAAKc,GAAKlB,EACVI,EAAKuF,GAAK1F,EACVG,EAAKkC,WAAW+G,GAChBoE,EAAe,CAAC,GACZxE,GAAO7I,EAAKkC,WAAWgH,GACpBlJ,EAGT,SAASiJ,EAAa9I,GACpB,IAAIgE,EAAIkJ,EAAalN,EAAK8B,OACtBpB,EAAKV,EAAKU,GAAKsD,EACf2E,EAAK3I,EAAK2I,GAAK3E,EACfrD,EAAKX,EAAKW,GAAKqD,EACfoB,EAAKpF,EAAKoF,GAAKpB,EACfrD,EAAKD,IAAIA,EAAKC,GAAMD,EAAKC,GAAM,GAC/ByE,EAAKuD,IAAIA,EAAKvD,GAAMuD,EAAKvD,GAAM,GACnCpF,EAAKU,GAAKA,EACVV,EAAK2I,GAAKA,EACV3I,EAAKW,GAAKA,EACVX,EAAKoF,GAAKA,EACNpF,EAAKC,WACP+D,EAAIkJ,EAAalN,EAAK8B,MAAQ,GAAKqL,EAAanN,GAAQ,EACxDU,GAAM6M,EAAYvN,GAAQgE,EAC1B2E,GAAMyE,EAAWpN,GAAQgE,GACzBrD,GAAM0M,EAAarN,GAAQgE,GAElBtD,IAAIA,EAAKC,GAAMD,EAAKC,GAAM,IADnCyE,GAAMkI,EAActN,GAAQgE,GAEnB2E,IAAIA,EAAKvD,GAAMuD,EAAKvD,GAAM,GACnC6H,EAAKjN,EAAMU,EAAIiI,EAAIhI,EAAIyE,IA4C3B,OAxCAoI,EAAQ9E,MAAQ,SAASxJ,GACvB,OAAO0B,UAAUT,QAAUuI,IAAUxJ,EAAGsO,GAAW9E,GAGrD8E,EAAQ3M,KAAO,SAAS3B,GACtB,OAAO0B,UAAUT,QAAUV,GAAMP,EAAE,GAAIQ,GAAMR,EAAE,GAAIsO,GAAW,CAAC/N,EAAIC,IAGrE8N,EAAQP,KAAO,SAAS/N,GACtB,OAAO0B,UAAUT,QAAU8M,EAAOjF,EAAS9I,GAAIsO,GAAWP,GAG5DO,EAAQpF,QAAU,SAASlJ,GACzB,OAAO0B,UAAUT,OAASqN,EAAQL,aAAajO,GAAGuO,aAAavO,GAAKsO,EAAQL,gBAG9EK,EAAQL,aAAe,SAASjO,GAC9B,OAAO0B,UAAUT,QAAUgN,EAA4B,mBAANjO,EAAmBA,EAAIuJ,GAAUvJ,GAAIsO,GAAWL,GAGnGK,EAAQC,aAAe,SAASvO,GAC9B,OAAO0B,UAAUT,OAASqN,EAAQJ,WAAWlO,GAAGmO,aAAanO,GAAGoO,cAAcpO,GAAGqO,YAAYrO,GAAKsO,EAAQJ,cAG5GI,EAAQJ,WAAa,SAASlO,GAC5B,OAAO0B,UAAUT,QAAUiN,EAA0B,mBAANlO,EAAmBA,EAAIuJ,GAAUvJ,GAAIsO,GAAWJ,GAGjGI,EAAQH,aAAe,SAASnO,GAC9B,OAAO0B,UAAUT,QAAUkN,EAA4B,mBAANnO,EAAmBA,EAAIuJ,GAAUvJ,GAAIsO,GAAWH,GAGnGG,EAAQF,cAAgB,SAASpO,GAC/B,OAAO0B,UAAUT,QAAUmN,EAA6B,mBAANpO,EAAmBA,EAAIuJ,GAAUvJ,GAAIsO,GAAWF,GAGpGE,EAAQD,YAAc,SAASrO,GAC7B,OAAO0B,UAAUT,QAAUoN,EAA2B,mBAANrO,EAAmBA,EAAIuJ,GAAUvJ,GAAIsO,GAAWD,GAG3FC,EC5FM,YAASxO,EAAQ0B,EAAIiI,EAAIhI,EAAIyE,GAC1C,IACIpE,EACAD,EAFAU,EAAQzC,EAAOiB,SACZqB,EAAIG,EAAMtB,OACRuN,EAAO,IAAI9L,MAAMN,EAAI,GAE9B,IAAKoM,EAAK,GAAK3M,EAAMC,EAAI,EAAGA,EAAIM,IAAKN,EACnC0M,EAAK1M,EAAI,GAAKD,GAAOU,EAAMT,GAAGC,OAKhC,SAAS2H,EAAU5H,EAAG4D,EAAG3D,EAAOP,EAAIiI,EAAIhI,EAAIyE,GAC1C,GAAIpE,GAAK4D,EAAI,EAAG,CACd,IAAI5E,EAAOyB,EAAMT,GAGjB,OAFAhB,EAAKU,GAAKA,EAAIV,EAAK2I,GAAKA,EACxB3I,EAAKW,GAAKA,OAAIX,EAAKoF,GAAKA,GAI1B,IAAIuI,EAAcD,EAAK1M,GACnB4M,EAAe3M,EAAQ,EAAK0M,EAC5BrK,EAAItC,EAAI,EACR6M,EAAKjJ,EAAI,EAEb,KAAOtB,EAAIuK,GAAI,CACb,IAAIC,EAAMxK,EAAIuK,IAAO,EACjBH,EAAKI,GAAOF,EAAatK,EAAIwK,EAAM,EAClCD,EAAKC,EAGPF,EAAcF,EAAKpK,EAAI,GAAOoK,EAAKpK,GAAKsK,GAAgB5M,EAAI,EAAIsC,KAAKA,EAE1E,IAAIyK,EAAYL,EAAKpK,GAAKqK,EACtBK,EAAa/M,EAAQ8M,EAEzB,GAAKpN,EAAKD,EAAO0E,EAAKuD,EAAK,CACzB,IAAIsF,GAAMvN,EAAKsN,EAAarN,EAAKoN,GAAa9M,EAC9C2H,EAAU5H,EAAGsC,EAAGyK,EAAWrN,EAAIiI,EAAIsF,EAAI7I,GACvCwD,EAAUtF,EAAGsB,EAAGoJ,EAAYC,EAAItF,EAAIhI,EAAIyE,OACnC,CACL,IAAI8I,GAAMvF,EAAKqF,EAAa5I,EAAK2I,GAAa9M,EAC9C2H,EAAU5H,EAAGsC,EAAGyK,EAAWrN,EAAIiI,EAAIhI,EAAIuN,GACvCtF,EAAUtF,EAAGsB,EAAGoJ,EAAYtN,EAAIwN,EAAIvN,EAAIyE,IAjC5CwD,CAAU,EAAGtH,EAAGtC,EAAOiC,MAAOP,EAAIiI,EAAIhI,EAAIyE,GCN7B,YAASpG,EAAQ0B,EAAIiI,EAAIhI,EAAIyE,IAC1B,EAAfpG,EAAO8C,MAAYgC,EAAQ+I,GAAM7N,EAAQ0B,EAAIiI,EAAIhI,EAAIyE,GCAxD,OAAe,SAAU2H,EAAOf,GAE9B,SAASmC,EAAWnP,EAAQ0B,EAAIiI,EAAIhI,EAAIyE,GACtC,IAAKsH,EAAO1N,EAAOoP,YAAe1B,EAAKV,QAAUA,EAU/C,IATA,IAAIU,EACAT,EACAxK,EACAT,EAEAM,EADAsD,GAAK,EAELR,EAAIsI,EAAKvM,OACTc,EAAQjC,EAAOiC,QAEV2D,EAAIR,GAAG,CAEd,IADe3C,GAAfwK,EAAMS,EAAK9H,IAAgB3E,SACtBe,EAAIiL,EAAIhL,MAAQ,EAAGK,EAAIG,EAAMtB,OAAQa,EAAIM,IAAKN,EAAGiL,EAAIhL,OAASQ,EAAMT,GAAGC,MACxEgL,EAAIY,KAAMhE,EAAYoD,EAAKvL,EAAIiI,EAAIhI,EAAIgI,IAAOvD,EAAKuD,GAAMsD,EAAIhL,MAAQA,GACpE6L,EAAab,EAAKvL,EAAIiI,EAAIjI,IAAOC,EAAKD,GAAMuL,EAAIhL,MAAQA,EAAOmE,GACpEnE,GAASgL,EAAIhL,WAGfjC,EAAOoP,UAAY1B,EAAOX,EAAcC,EAAOhN,EAAQ0B,EAAIiI,EAAIhI,EAAIyE,GACnEsH,EAAKV,MAAQA,EAQjB,OAJAmC,EAAWnC,MAAQ,SAAS9M,GAC1B,OAAO6N,GAAQ7N,GAAKA,GAAK,EAAIA,EAAI,IAG5BiP,EA9BM,CA+BZrC"}