{"version":3,"file":"angular-hybrid.js","sources":["../../node_modules/@uirouter/angular-hybrid/fesm5/uirouter-angular-hybrid.js"],"sourcesContent":["import { __decorate, __param, __spread } from 'tslib';\nimport { ElementRef, Inject, Input, Component, NgModule, Injector } from '@angular/core';\nimport { getAngularJSGlobal, getAngularLib, UpgradeModule, downgradeComponent } from '@angular/upgrade/static';\nimport { StateRegistry, UIRouter, Resolvable, forEach } from '@uirouter/core';\nimport { UIView, UIROUTER_MODULE_TOKEN, applyModuleConfig, makeChildProviders, UIRouterModule, UIROUTER_ROOT_MODULE, _UIROUTER_SERVICE_PROVIDERS, NATIVE_INJECTOR_TOKEN, ng2LazyLoadBuilder, Ng2ViewConfig } from '@uirouter/angular';\nimport { Ng1ViewConfig } from '@uirouter/angularjs';\nimport { UIRouterRx } from '@uirouter/rx';\n\nvar getAngularJS = getAngularJSGlobal || getAngularLib;\nvar angular = getAngularJS();\nif (!angular) {\n    throw new Error('AngularJS not found on window.  https://github.com/ui-router/angular-hybrid/wiki/AngularJS-not-found-on-window');\n}\n/**\n * Create a ng1 module for the ng1 half of the hybrid application to depend on.\n *\n * Example:\n * const myApp = angular.module('myApp', ['ui.router.upgrade']);\n */\nvar upgradeModule = angular.module('ui.router.upgrade', ['ui.router']);\nfunction objectFactory() {\n    return {};\n}\n/**\n * UIViewNgUpgrade is a component bridge from ng1 ui-view to ng2 ui-view\n *\n * When a ui-router for ng1 is registering a state it checks if a view's\n * `component:` is an ng2 Component class. If so, it creates a special ng1 template\n * which references this component, i.e., <ui-view-ng-upgrade></ui-view-ng-upgrade>\n *\n * See that code by searching ng1-to-ng2 source for: \"$stateProvider.decorator\"\n *\n * ---\n *\n * ng1-to-ng2 component bridge process:\n *\n * 1)\n * When an ng1 template creates a ui-view which is targeted by a ng2 Component,\n *\n * ```\n * <a ui-sref=\"foo\">Go to foo</a>\n * <div ui-view> <!-- ui-view created in ng1 template -->\n * </div> <!-- targeted with { component: Ng2RoutedComponent } -->\n * ```\n *\n * the state decorator spits out a custom template.  That template loads this\n * ng2 Component adapter as a downgraded-to-ng1 directive.\n *\n * ```\n * <a ui-sref=\"foo\">Go to foo</a>\n * <div ui-view> <!-- decorated template references the downgraded component -->\n *   <ui-view-ng-upgrade> <!-- downgraded adapter component -->\n *   </ui-view-ng-upgrade>\n * </div>\n * ```\n *\n * This downgraded ng2 Component then creates a child UIView (ng2 component)\n *\n * ```\n * <a ui-sref=\"foo\">Go to foo</a>\n * <div ui-view> <!-- custom template references the downgraded component -->\n *   <ui-view-ng-upgrade> <!-- ng2 component adapter downgraded to ng1-->\n *     <ui-view> <!-- pure ng2 ui-view -->\n *      </ui-view>\n *   </ui-view-ng-upgrade>\n * </div>\n * ```\n *\n * which in turn is filled with the routed ng2 component.\n *\n * ```\n * <a ui-sref=\"foo\">Go to foo</a>\n * <div ui-view> <!-- ng1 ui-view -->\n *   <ui-view-ng-upgrade> <!-- ng2 component adapter (downgraded to ng1)-->\n *     <ui-view> <!-- pure ng2 ui-view -->\n *       <ng2-routed-component> <!-- ng2 component hosted in ng2 ui-view -->\n *         <h1>ng2 routed component contents</h1>\n *       </ng2-routed-component>\n *     </ui-view>\n *   </ui-view-ng-upgrade>\n * </div>\n * ```\n *\n * This adapter exposes exposes the parent view context (ParentUIViewInject)\n * as an ng2 DI Provider, which the nested ng2 UIView requires.\n *\n * It gets the ParentUIViewContext information (from the parent ng1 ui-view) by walking\n * up the DOM and grabbing the .data('$uiView') which the ng1 ui-view directive exposes.\n */\nvar UIViewNgUpgrade = /** @class */ (function () {\n    function UIViewNgUpgrade(ref, parent, registry // access the root state\n    ) {\n        // From the ui-view-ng-upgrade component's element ref, walk up the DOM two elements...\n        // There will first be an ng1 ui-view which hosts this element, and then that ui-view's parent element.\n        // That (parent) element has access to the proper \"parent viewcontext\"\n        // The ng2 ui-view component is inside this ui-view-ng-upgrade directive, which is inside the ng1 \"host\" ui-view.\n        // Both ui-views share the same \"view context\" information (the view's fqn and created-by-state context information)\n        var ng1elem = angular\n            .element(ref.nativeElement)\n            .parent()\n            .parent();\n        // Expose getters on PARENT_INJECT for context (creation state) and fqn (view address)\n        // These will be used by further nested UIView\n        Object.defineProperty(parent, 'context', {\n            get: function () {\n                var data = ng1elem['inheritedData']('$uiView');\n                return data && data.$cfg ? data.$cfg.viewDecl.$context : registry.root();\n            },\n            enumerable: true,\n        });\n        Object.defineProperty(parent, 'fqn', {\n            get: function () {\n                var data = ng1elem['inheritedData']('$uiView');\n                return data && data.$uiView ? data.$uiView.fqn : null;\n            },\n            enumerable: true,\n        });\n    }\n    UIViewNgUpgrade.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: undefined, decorators: [{ type: Inject, args: [UIView.PARENT_INJECT,] }] },\n        { type: StateRegistry // access the root state\n         }\n    ]; };\n    __decorate([\n        Input()\n    ], UIViewNgUpgrade.prototype, \"name\", void 0);\n    UIViewNgUpgrade = __decorate([\n        Component({\n            selector: 'ui-view-ng-upgrade',\n            template: \"\\n    <ui-view [name]=\\\"name\\\"></ui-view>\\n  \",\n            // provide a blank object as PARENT_INJECT.\n            // The component will add property getters when it is constructed.\n            viewProviders: [{ provide: UIView.PARENT_INJECT, useFactory: objectFactory }]\n        }),\n        __param(1, Inject(UIView.PARENT_INJECT))\n    ], UIViewNgUpgrade);\n    return UIViewNgUpgrade;\n}());\n/**********************************\n * Ng2 @NgModule and bootstrap code\n **********************************/\n// Register the ng1 DI '$uiRouter' object as an ng2 Provider.\nfunction uiRouterUpgradeFactory(router, injector) {\n    var modules = injector.get(UIROUTER_MODULE_TOKEN, []);\n    modules.forEach(function (module) { return applyModuleConfig(router, injector, module); });\n    return router;\n}\nfunction getUIRouter($injector) {\n    return $injector.get('$uiRouter');\n}\nfunction getParentUIViewInject(r) {\n    return { fqn: null, context: r.root() };\n}\nvar ɵ0 = {};\n/**\n * This NgModule should be added to the root module of the hybrid app.\n */\nvar UIRouterUpgradeModule = /** @class */ (function () {\n    function UIRouterUpgradeModule() {\n    }\n    UIRouterUpgradeModule_1 = UIRouterUpgradeModule;\n    UIRouterUpgradeModule.forRoot = function (module) {\n        if (module === void 0) { module = {}; }\n        return {\n            ngModule: UIRouterUpgradeModule_1,\n            providers: makeChildProviders(module),\n        };\n    };\n    UIRouterUpgradeModule.forChild = function (module) {\n        if (module === void 0) { module = {}; }\n        return {\n            ngModule: UIRouterModule,\n            providers: makeChildProviders(module),\n        };\n    };\n    var UIRouterUpgradeModule_1;\n    UIRouterUpgradeModule = UIRouterUpgradeModule_1 = __decorate([\n        NgModule({\n            imports: [UIRouterModule, UpgradeModule],\n            declarations: [UIViewNgUpgrade],\n            providers: __spread([\n                // @uirouter/angular code will use the ng1 $uiRouter instance instead of creating its own.\n                { provide: '$uiRouter', useFactory: getUIRouter, deps: ['$injector'] },\n                { provide: UIRouter, useFactory: uiRouterUpgradeFactory, deps: ['$uiRouter', Injector] },\n                { provide: UIROUTER_ROOT_MODULE, useValue: ɵ0, multi: true },\n                { provide: UIView.PARENT_INJECT, useFactory: getParentUIViewInject, deps: [StateRegistry] }\n            ], _UIROUTER_SERVICE_PROVIDERS),\n            entryComponents: [UIViewNgUpgrade],\n            exports: [UIViewNgUpgrade, UIRouterModule],\n        })\n    ], UIRouterUpgradeModule);\n    return UIRouterUpgradeModule;\n}());\n// Downgrade the UIViewNgUpgrade ng2 Component to an ng1 directive.\n// The directive is used in a (generated) view template by the (host) ng1 ui-router,\n// whenever it finds a view configured with a `component: <Ng2ComponentClass>`\nupgradeModule.directive('uiViewNgUpgrade', downgradeComponent({\n    component: UIViewNgUpgrade,\n    inputs: ['name'],\n}));\nupgradeModule.run([\n    '$injector',\n    function (ng1Injector) {\n        var $uiRouter = ng1Injector.get('$uiRouter');\n        /** Add support for observable state and param changes */\n        $uiRouter.plugin(UIRouterRx);\n        // Expose a merged ng1/ng2 injector as a Resolvable (on the root state).\n        // This mimics how ui-router-ng2 exposes the root ng2 Injector, but\n        // it retrieves from ng1 injector first, then ng2 injector if the token isn't found.\n        var mergedInjector = {\n            get: function (token, ng2NotFoundValue) {\n                var ng2Injector = ng1Injector.get('$$angularInjector');\n                if (ng1Injector.has(token)) {\n                    return ng1Injector.get(token);\n                }\n                return ng2Injector.get(token, ng2NotFoundValue);\n            },\n        };\n        var ng2InjectorResolvable = Resolvable.fromData(NATIVE_INJECTOR_TOKEN, mergedInjector);\n        $uiRouter.stateRegistry.root().resolvables.push(ng2InjectorResolvable);\n    },\n]);\n/** Adds support for `loadChildren`: Angular NgModule lazy loading via @gntools/webpack */\nupgradeModule.config([\n    '$stateRegistryProvider',\n    function ($stateRegistry) {\n        $stateRegistry.decorator('lazyLoad', ng2LazyLoadBuilder);\n    },\n]);\n/**\n * Define a stateProvider `views` builder decorator.\n * The decorator first applies the standard views builder function.\n * Then it finds any view components which are **actually** a Ng2 Component Class.\n * It overwrites that view's config with a ng1-to-ng2 hybrid config.\n *\n * In place of the template provider, it simply puts a <ui-view-ng-upgrade/> component\n * which that provides a ng1 -> ng2 boundary in the component tree.\n */\nupgradeModule.config([\n    '$stateRegistryProvider',\n    function ($stateRegistry) {\n        $stateRegistry.decorator('views', function (state, parentFn) {\n            var views = parentFn(state);\n            forEach(views, function (viewDecl, viewName) {\n                if (viewDecl.$type === 'ng1-to-ng2' || typeof viewDecl.component === 'function') {\n                    // Update the view config.\n                    // Override default ng1 `component:` behavior (of defining a templateProvider)\n                    // with a <ui-view-ng-upgrade> adapter directive template\n                    viewDecl.$type = 'ng1-to-ng2';\n                    viewDecl.templateProvider = null;\n                    viewDecl.template = \"<ui-view-ng-upgrade name='\" + viewDecl.$uiViewName + \"'></ui-view-ng-upgrade>\";\n                }\n            });\n            return views;\n        });\n    },\n]);\n// UI-Router ViewConfig factories take a view declaration object from a state.views: { foo: <ViewDeclaration> }\n// and return a runtime config object (a ViewConfig)\nupgradeModule.run([\n    '$view',\n    '$templateFactory',\n    function ($view, $templateFactory) {\n        // Register a ViewConfig factory for views of type `ng2`\n        $view._pluginapi._viewConfigFactory('ng2', function (path, config) { return new Ng2ViewConfig(path, config); });\n        // Register a ViewConfig factory for views of type `ng1-to-ng2`.\n        // Returns both an ng1 config and an ng2 config allowing either ng1 or ng2 ui-view components to be targeted.\n        $view._pluginapi._viewConfigFactory('ng1-to-ng2', function (path, config) {\n            var ng1ViewConfig = (new Ng1ViewConfig(path, Object.assign({}, config, { $type: 'ng1' }), $templateFactory));\n            var ng2ViewConfig = (new Ng2ViewConfig(path, Object.assign({}, config, { $type: 'ng2' })));\n            return [ng2ViewConfig, ng1ViewConfig];\n        });\n    },\n]);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { UIRouterUpgradeModule, UIViewNgUpgrade, getParentUIViewInject, getUIRouter, objectFactory, uiRouterUpgradeFactory, upgradeModule, ɵ0 };\n//# sourceMappingURL=uirouter-angular-hybrid.js.map\n"],"names":["angular","getAngularJSGlobal","getAngularLib","Error","upgradeModule","module","objectFactory","UIViewNgUpgrade","ref","parent","registry","ng1elem","element","nativeElement","Object","defineProperty","get","data","$cfg","viewDecl","$context","root","enumerable","$uiView","fqn","ctorParameters","type","ElementRef","undefined","decorators","Inject","args","UIView","PARENT_INJECT","StateRegistry","__decorate","Input","prototype","Component","selector","template","viewProviders","provide","useFactory","__param","uiRouterUpgradeFactory","router","injector","UIROUTER_MODULE_TOKEN","forEach","applyModuleConfig","getUIRouter","$injector","getParentUIViewInject","r","context","ɵ0","UIRouterUpgradeModule","UIRouterUpgradeModule_1","forRoot","ngModule","providers","makeChildProviders","forChild","UIRouterModule","NgModule","imports","UpgradeModule","declarations","__spread","deps","UIRouter","Injector","UIROUTER_ROOT_MODULE","useValue","multi","_UIROUTER_SERVICE_PROVIDERS","entryComponents","exports","directive","downgradeComponent","component","inputs","run","ng1Injector","$uiRouter","plugin","UIRouterRx","mergedInjector","token","ng2NotFoundValue","ng2Injector","has","ng2InjectorResolvable","Resolvable","fromData","NATIVE_INJECTOR_TOKEN","stateRegistry","resolvables","push","config","$stateRegistry","decorator","ng2LazyLoadBuilder","state","parentFn","views","viewName","$type","templateProvider","$uiViewName","$view","$templateFactory","_pluginapi","_viewConfigFactory","path","Ng2ViewConfig","ng1ViewConfig","Ng1ViewConfig","assign"],"mappings":"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"}