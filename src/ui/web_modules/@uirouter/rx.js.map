{"version":3,"file":"rx.js","sources":["../../node_modules/@uirouter/rx/lib-esm/rx-async-policy.js"],"sourcesContent":["import { Observable, of } from 'rxjs';\nimport { first, shareReplay } from 'rxjs/operators';\n/**\n * Determines the unwrapping behavior of asynchronous resolve values.\n *\n *   - When an Observable is returned from the resolveFn, wait until the Observable emits at least one item.\n *     If any other value will be converted to an Observable that emits such value.\n *   - The Observable item will not be unwrapped.\n *   - The Observable stream itself will be provided when the resolve is injected or bound elsewhere.\n *\n * #### Example:\n *\n * The `Transition` will wait for the `main.home` resolve observables to emit their first value.\n * Promises will be unwrapped and returned as observables before being provided to components.\n * ```js\n * var mainState = {\n *   name: 'main',\n *   resolve: mainResolves, // defined elsewhere\n *   resolvePolicy: { async: RXWAIT },\n * }\n * ```\n */\nexport function RXWAIT(resolveFnValue) {\n    if (!(resolveFnValue instanceof Observable)) {\n        resolveFnValue = of(resolveFnValue);\n    }\n    var data$ = resolveFnValue.pipe(shareReplay(1));\n    return data$\n        .pipe(first())\n        .toPromise()\n        .then(function () {\n        return data$;\n    });\n}\n//# sourceMappingURL=rx-async-policy.js.map"],"names":["RXWAIT","resolveFnValue","Observable","of","data$","pipe","shareReplay","first","toPromise","then"],"mappings":"oXAsBO,SAASA,EAAOC,GACbA,aAA0BC,IAC5BD,EAAiBE,EAAGF,IAExB,IAAIG,EAAQH,EAAeI,KAAKC,EAAY,IAC5C,OAAOF,EACFC,KAAKE,KACLC,YACAC,MAAK,WACN,OAAOL"}