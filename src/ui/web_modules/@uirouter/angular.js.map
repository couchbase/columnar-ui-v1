{"version":3,"file":"angular.js","sources":["../../node_modules/@uirouter/angular/fesm5/uirouter-angular.js"],"sourcesContent":["import { ComponentFactoryResolver, ReflectiveInjector, ViewChild, ViewContainerRef, Input, Component, Inject, Directive, ElementRef, Renderer2, HostListener, Optional, EventEmitter, Output, ContentChildren, QueryList, Host, Self, InjectionToken, ANALYZE_FOR_ENTRY_COMPONENTS, APP_INITIALIZER, NgModule, NgModuleFactoryLoader, Compiler, NgModuleFactory, PLATFORM_ID, Injector } from '@angular/core';\nimport { LocationStrategy, HashLocationStrategy, PathLocationStrategy, CommonModule, isPlatformBrowser } from '@angular/common';\nimport { pick, forEach, isFunction, ViewService, services, parse, ResolveContext, unnestR, filter, trace, NATIVE_INJECTOR_TOKEN, inArray, UIRouter, isDefined, extend, isNumber, PathUtils, tail, Param, anyTrueR, identity, uniqR, UIRouterGlobals, TransitionService, isString, Resolvable, parseUrl, BaseLocationServices, is, BrowserLocationConfig, servicesPlugin, StateRegistry, StateService, UrlMatcherFactory, UrlRouter, UrlService } from '@uirouter/core';\nexport * from '@uirouter/core';\nimport { __decorate, __metadata, __param, __spread, __extends } from 'tslib';\nimport { ReplaySubject, of, from, concat, BehaviorSubject, combineLatest } from 'rxjs';\nimport { switchMap, map } from 'rxjs/operators';\nimport { UIRouterRx } from '@uirouter/rx';\n\n/** @module ng2 */ /** */\n/**\n * This is a [[StateBuilder.builder]] function for Angular `views`.\n *\n * When the [[StateBuilder]] builds a [[State]] object from a raw [[StateDeclaration]], this builder\n * handles the `views` property with logic specific to @uirouter/angular.\n *\n * If no `views: {}` property exists on the [[StateDeclaration]], then it creates the `views` object and\n * applies the state-level configuration to a view named `$default`.\n */\nfunction ng2ViewsBuilder(state) {\n    var views = {}, viewsObject = state.views || { $default: pick(state, ['component', 'bindings']) };\n    forEach(viewsObject, function (config, name) {\n        name = name || '$default'; // Account for views: { \"\": { template... } }\n        if (isFunction(config))\n            config = { component: config };\n        if (Object.keys(config).length === 0)\n            return;\n        config.$type = 'ng2';\n        config.$context = state;\n        config.$name = name;\n        var normalized = ViewService.normalizeUIViewTarget(config.$context, config.$name);\n        config.$uiViewName = normalized.uiViewName;\n        config.$uiViewContextAnchor = normalized.uiViewContextAnchor;\n        views[name] = config;\n    });\n    return views;\n}\nvar id = 0;\nvar Ng2ViewConfig = /** @class */ (function () {\n    function Ng2ViewConfig(path, viewDecl) {\n        this.path = path;\n        this.viewDecl = viewDecl;\n        this.$id = id++;\n        this.loaded = true;\n    }\n    Ng2ViewConfig.prototype.load = function () {\n        return services.$q.when(this);\n    };\n    return Ng2ViewConfig;\n}());\n\n/**\n * Merge two injectors\n *\n * This class implements the Injector ng2 interface but delegates\n * to the Injectors provided in the constructor.\n */\nvar MergeInjector = /** @class */ (function () {\n    function MergeInjector() {\n        var injectors = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            injectors[_i] = arguments[_i];\n        }\n        if (injectors.length < 2)\n            throw new Error('pass at least two injectors');\n        this.injectors = injectors;\n    }\n    /**\n     * Get the token from the first injector which contains it.\n     *\n     * Delegates to the first Injector.get().\n     * If not found, then delegates to the second Injector (and so forth).\n     * If no Injector contains the token, return the `notFoundValue`, or throw.\n     *\n     * @param token the DI token\n     * @param notFoundValue the value to return if none of the Injectors contains the token.\n     * @returns {any} the DI value\n     */\n    MergeInjector.prototype.get = function (token, notFoundValue) {\n        for (var i = 0; i < this.injectors.length; i++) {\n            var val = this.injectors[i].get(token, MergeInjector.NOT_FOUND);\n            if (val !== MergeInjector.NOT_FOUND)\n                return val;\n        }\n        if (arguments.length >= 2)\n            return notFoundValue;\n        // This will throw the DI Injector error\n        this.injectors[0].get(token);\n    };\n    MergeInjector.NOT_FOUND = {};\n    return MergeInjector;\n}());\n\n/** @hidden */\nvar id$1 = 0;\n/**\n * Given a component class, gets the inputs of styles:\n *\n * - @Input('foo') _foo\n * - `inputs: ['foo']`\n *\n * @internalapi\n */\nvar ng2ComponentInputs = function (factory) {\n    return factory.inputs.map(function (input) { return ({ prop: input.propName, token: input.templateName }); });\n};\nvar Éµ0 = ng2ComponentInputs;\n/**\n * A UI-Router viewport directive, which is filled in by a view (component) on a state.\n *\n * ### Selector\n *\n * A `ui-view` directive can be created as an element: `<ui-view></ui-view>` or as an attribute: `<div ui-view></div>`.\n *\n * ### Purpose\n *\n * This directive is used in a Component template (or as the root component) to create a viewport.  The viewport\n * is filled in by a view (as defined by a [[Ng2ViewDeclaration]] inside a [[Ng2StateDeclaration]]) when the view's\n * state has been activated.\n *\n * #### Example:\n * ```js\n * // This app has two states, 'foo' and 'bar'\n * stateRegistry.register({ name: 'foo', url: '/foo', component: FooComponent });\n * stateRegistry.register({ name: 'bar', url: '/bar', component: BarComponent });\n * ```\n * ```html\n * <!-- This ui-view will be filled in by the foo state's component or\n *      the bar state's component when the foo or bar state is activated -->\n * <ui-view></ui-view>\n * ```\n *\n * ### Named ui-views\n *\n * A `ui-view` may optionally be given a name via the attribute value: `<div ui-view='header'></div>`.  *Note:\n * an unnamed `ui-view` is internally named `$default`*.   When a `ui-view` has a name, it will be filled in\n * by a matching named view.\n *\n * #### Example:\n * ```js\n * stateRegistry.register({\n *   name: 'foo',\n *   url: '/foo',\n *   views: { header: HeaderComponent, $default: FooComponent });\n * ```\n * ```html\n * <!-- When 'foo' state is active, filled by HeaderComponent -->\n * <div ui-view=\"header\"></div>\n *\n * <!-- When 'foo' state is active, filled by FooComponent -->\n * <ui-view></ui-view>\n * ```\n */\nvar UIView = /** @class */ (function () {\n    function UIView(router, parent, viewContainerRef) {\n        this.router = router;\n        this.viewContainerRef = viewContainerRef;\n        /** Data about the this UIView */\n        this._uiViewData = {};\n        this._parent = parent;\n    }\n    UIView_1 = UIView;\n    Object.defineProperty(UIView.prototype, \"_name\", {\n        set: function (val) {\n            this.name = val;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(UIView.prototype, \"state\", {\n        /**\n         * @returns the UI-Router `state` that is filling this uiView, or `undefined`.\n         */\n        get: function () {\n            return parse('_uiViewData.config.viewDecl.$context.self')(this);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    UIView.prototype.ngOnInit = function () {\n        var _this = this;\n        var router = this.router;\n        var parentFqn = this._parent.fqn;\n        var name = this.name || '$default';\n        this._uiViewData = {\n            $type: 'ng2',\n            id: id$1++,\n            name: name,\n            fqn: parentFqn ? parentFqn + '.' + name : name,\n            creationContext: this._parent.context,\n            configUpdated: this._viewConfigUpdated.bind(this),\n            config: undefined,\n        };\n        this._deregisterUiCanExitHook = router.transitionService.onBefore({}, function (trans) {\n            return _this._invokeUiCanExitHook(trans);\n        });\n        this._deregisterUiOnParamsChangedHook = router.transitionService.onSuccess({}, function (trans) {\n            return _this._invokeUiOnParamsChangedHook(trans);\n        });\n        this._deregisterUIView = router.viewService.registerUIView(this._uiViewData);\n    };\n    /**\n     * For each transition, checks the component loaded in the ui-view for:\n     *\n     * - has a uiCanExit() component hook\n     * - is being exited\n     *\n     * If both are true, adds the uiCanExit component function as a hook to that singular Transition.\n     */\n    UIView.prototype._invokeUiCanExitHook = function (trans) {\n        var instance = this._componentRef && this._componentRef.instance;\n        var uiCanExitFn = instance && instance.uiCanExit;\n        if (isFunction(uiCanExitFn)) {\n            var state = this.state;\n            if (trans.exiting().indexOf(state) !== -1) {\n                trans.onStart({}, function () {\n                    return uiCanExitFn.call(instance, trans);\n                });\n            }\n        }\n    };\n    /**\n     * For each transition, checks if any param values changed and notify component\n     */\n    UIView.prototype._invokeUiOnParamsChangedHook = function ($transition$) {\n        var instance = this._componentRef && this._componentRef.instance;\n        var uiOnParamsChanged = instance && instance.uiOnParamsChanged;\n        if (isFunction(uiOnParamsChanged)) {\n            var viewState = this.state;\n            var resolveContext = new ResolveContext(this._uiViewData.config.path);\n            var viewCreationTrans = resolveContext.getResolvable('$transition$').data;\n            // Exit early if the $transition$ is the same as the view was created within.\n            // Exit early if the $transition$ will exit the state the view is for.\n            if ($transition$ === viewCreationTrans || $transition$.exiting().indexOf(viewState) !== -1)\n                return;\n            var toParams_1 = $transition$.params('to');\n            var fromParams_1 = $transition$.params('from');\n            var getNodeSchema = function (node) { return node.paramSchema; };\n            var toSchema = $transition$\n                .treeChanges('to')\n                .map(getNodeSchema)\n                .reduce(unnestR, []);\n            var fromSchema_1 = $transition$\n                .treeChanges('from')\n                .map(getNodeSchema)\n                .reduce(unnestR, []);\n            // Find the to params that have different values than the from params\n            var changedToParams = toSchema.filter(function (param) {\n                var idx = fromSchema_1.indexOf(param);\n                return idx === -1 || !fromSchema_1[idx].type.equals(toParams_1[param.id], fromParams_1[param.id]);\n            });\n            // Only trigger callback if a to param has changed or is new\n            if (changedToParams.length) {\n                var changedKeys_1 = changedToParams.map(function (x) { return x.id; });\n                // Filter the params to only changed/new to params.  `$transition$.params()` may be used to get all params.\n                var newValues = filter(toParams_1, function (val, key) { return changedKeys_1.indexOf(key) !== -1; });\n                instance.uiOnParamsChanged(newValues, $transition$);\n            }\n        }\n    };\n    UIView.prototype._disposeLast = function () {\n        if (this._componentRef)\n            this._componentRef.destroy();\n        this._componentRef = null;\n    };\n    UIView.prototype.ngOnDestroy = function () {\n        if (this._deregisterUIView)\n            this._deregisterUIView();\n        if (this._deregisterUiCanExitHook)\n            this._deregisterUiCanExitHook();\n        if (this._deregisterUiOnParamsChangedHook)\n            this._deregisterUiOnParamsChangedHook();\n        this._deregisterUIView = this._deregisterUiCanExitHook = this._deregisterUiOnParamsChangedHook = null;\n        this._disposeLast();\n    };\n    /**\n     * The view service is informing us of an updated ViewConfig\n     * (usually because a transition activated some state and its views)\n     */\n    UIView.prototype._viewConfigUpdated = function (config) {\n        // The config may be undefined if there is nothing currently targeting this UIView.\n        // Dispose the current component, if there is one\n        if (!config)\n            return this._disposeLast();\n        // Only care about Ng2 configs\n        if (!(config instanceof Ng2ViewConfig))\n            return;\n        // The \"new\" viewconfig is already applied, so exit early\n        if (this._uiViewData.config === config)\n            return;\n        // This is a new ViewConfig.  Dispose the previous component\n        this._disposeLast();\n        trace.traceUIViewConfigUpdated(this._uiViewData, config && config.viewDecl.$context);\n        this._applyUpdatedConfig(config);\n        // Initiate change detection for the newly created component\n        this._componentRef.changeDetectorRef.markForCheck();\n    };\n    UIView.prototype._applyUpdatedConfig = function (config) {\n        this._uiViewData.config = config;\n        // Create the Injector for the routed component\n        var context = new ResolveContext(config.path);\n        var componentInjector = this._getComponentInjector(context);\n        // Get the component class from the view declaration. TODO: allow promises?\n        var componentClass = config.viewDecl.component;\n        // Create the component\n        var compFactoryResolver = componentInjector.get(ComponentFactoryResolver);\n        var compFactory = compFactoryResolver.resolveComponentFactory(componentClass);\n        this._componentRef = this._componentTarget.createComponent(compFactory, undefined, componentInjector);\n        // Wire resolves to @Input()s\n        this._applyInputBindings(compFactory, this._componentRef.instance, context, componentClass);\n    };\n    /**\n     * Creates a new Injector for a routed component.\n     *\n     * Adds resolve values to the Injector\n     * Adds providers from the NgModule for the state\n     * Adds providers from the parent Component in the component tree\n     * Adds a PARENT_INJECT view context object\n     *\n     * @returns an Injector\n     */\n    UIView.prototype._getComponentInjector = function (context) {\n        // Map resolves to \"useValue: providers\"\n        var resolvables = context\n            .getTokens()\n            .map(function (token) { return context.getResolvable(token); })\n            .filter(function (r) { return r.resolved; });\n        var newProviders = resolvables.map(function (r) { return ({ provide: r.token, useValue: context.injector().get(r.token) }); });\n        var parentInject = { context: this._uiViewData.config.viewDecl.$context, fqn: this._uiViewData.fqn };\n        newProviders.push({ provide: UIView_1.PARENT_INJECT, useValue: parentInject });\n        var parentComponentInjector = this.viewContainerRef.injector;\n        var moduleInjector = context.getResolvable(NATIVE_INJECTOR_TOKEN).data;\n        var mergedParentInjector = new MergeInjector(moduleInjector, parentComponentInjector);\n        return ReflectiveInjector.resolveAndCreate(newProviders, mergedParentInjector);\n    };\n    /**\n     * Supplies component inputs with resolve data\n     *\n     * Finds component inputs which match resolves (by name) and sets the input value\n     * to the resolve data.\n     */\n    UIView.prototype._applyInputBindings = function (factory, component, context, componentClass) {\n        var bindings = this._uiViewData.config.viewDecl['bindings'] || {};\n        var explicitBoundProps = Object.keys(bindings);\n        // Returns the actual component property for a renamed an input renamed using `@Input('foo') _foo`.\n        // return the `_foo` property\n        var renamedInputProp = function (prop) {\n            var input = factory.inputs.find(function (i) { return i.templateName === prop; });\n            return (input && input.propName) || prop;\n        };\n        // Supply resolve data to component as specified in the state's `bindings: {}`\n        var explicitInputTuples = explicitBoundProps.reduce(function (acc, key) { return acc.concat([{ prop: renamedInputProp(key), token: bindings[key] }]); }, []);\n        // Supply resolve data to matching @Input('prop') or inputs: ['prop']\n        var implicitInputTuples = ng2ComponentInputs(factory).filter(function (tuple) { return !inArray(explicitBoundProps, tuple.prop); });\n        var addResolvable = function (tuple) { return ({\n            prop: tuple.prop,\n            resolvable: context.getResolvable(tuple.token),\n        }); };\n        var injector = context.injector();\n        explicitInputTuples\n            .concat(implicitInputTuples)\n            .map(addResolvable)\n            .filter(function (tuple) { return tuple.resolvable && tuple.resolvable.resolved; })\n            .forEach(function (tuple) {\n            component[tuple.prop] = injector.get(tuple.resolvable.token);\n        });\n    };\n    var UIView_1;\n    UIView.PARENT_INJECT = 'UIView.PARENT_INJECT';\n    __decorate([\n        ViewChild('componentTarget', { read: ViewContainerRef, static: true }),\n        __metadata(\"design:type\", ViewContainerRef)\n    ], UIView.prototype, \"_componentTarget\", void 0);\n    __decorate([\n        Input('name'),\n        __metadata(\"design:type\", String)\n    ], UIView.prototype, \"name\", void 0);\n    __decorate([\n        Input('ui-view'),\n        __metadata(\"design:type\", String),\n        __metadata(\"design:paramtypes\", [String])\n    ], UIView.prototype, \"_name\", null);\n    UIView = UIView_1 = __decorate([\n        Component({\n            selector: 'ui-view, [ui-view]',\n            exportAs: 'uiView',\n            template: \"\\n    <ng-template #componentTarget></ng-template>\\n    <ng-content *ngIf=\\\"!_componentRef\\\"></ng-content>\\n  \"\n        }),\n        __param(1, Inject(UIView_1.PARENT_INJECT)),\n        __metadata(\"design:paramtypes\", [UIRouter, Object, ViewContainerRef])\n    ], UIView);\n    return UIView;\n}());\n\n/** @module ng2 */ /** */\nfunction applyModuleConfig(uiRouter, injector, module) {\n    if (module === void 0) { module = {}; }\n    if (isFunction(module.config)) {\n        module.config(uiRouter, injector, module);\n    }\n    var states = module.states || [];\n    return states.map(function (state) { return uiRouter.stateRegistry.register(state); });\n}\nfunction applyRootModuleConfig(uiRouter, injector, module) {\n    isDefined(module.deferIntercept) && uiRouter.urlService.deferIntercept(module.deferIntercept);\n    isDefined(module.otherwise) && uiRouter.urlService.rules.otherwise(module.otherwise);\n    isDefined(module.initial) && uiRouter.urlService.rules.initial(module.initial);\n}\n\n/**\n * @internalapi\n * # blah blah blah\n */\nvar AnchorUISref = /** @class */ (function () {\n    function AnchorUISref(_el, _renderer) {\n        this._el = _el;\n        this._renderer = _renderer;\n    }\n    AnchorUISref.prototype.openInNewTab = function () {\n        return this._el.nativeElement.target === '_blank';\n    };\n    AnchorUISref.prototype.update = function (href) {\n        if (href && href !== '') {\n            this._renderer.setProperty(this._el.nativeElement, 'href', href);\n        }\n        else {\n            this._renderer.removeAttribute(this._el.nativeElement, 'href');\n        }\n    };\n    AnchorUISref = __decorate([\n        Directive({ selector: 'a[uiSref]' }),\n        __metadata(\"design:paramtypes\", [ElementRef, Renderer2])\n    ], AnchorUISref);\n    return AnchorUISref;\n}());\n/**\n * A directive when clicked, initiates a [[Transition]] to a [[TargetState]].\n *\n * ### Purpose\n *\n * This directive is applied to anchor tags (`<a>`) or any other clickable element.  It is a state reference (or sref --\n * similar to an href).  When clicked, the directive will transition to that state by calling [[StateService.go]],\n * and optionally supply state parameter values and transition options.\n *\n * When this directive is on an anchor tag, it will also add an `href` attribute to the anchor.\n *\n * ### Selector\n *\n * - `[uiSref]`: The directive is created as an attribute on an element, e.g., `<a uiSref></a>`\n *\n * ### Inputs\n *\n * - `uiSref`: the target state's name, e.g., `uiSref=\"foostate\"`.  If a component template uses a relative `uiSref`,\n * e.g., `uiSref=\".child\"`, the reference is relative to that component's state.\n *\n * - `uiParams`: any target state parameter values, as an object, e.g., `[uiParams]=\"{ fooId: bar.fooId }\"`\n *\n * - `uiOptions`: [[TransitionOptions]], e.g., `[uiOptions]=\"{ inherit: false }\"`\n *\n * @example\n * ```html\n *\n * <!-- Targets bar state' -->\n * <a uiSref=\"bar\">Bar</a>\n *\n * <!-- Assume this component's state is \"foo\".\n *      Relatively targets \"foo.child\" -->\n * <a uiSref=\".child\">Foo Child</a>\n *\n * <!-- Targets \"bar\" state and supplies parameter value -->\n * <a uiSref=\"bar\" [uiParams]=\"{ barId: foo.barId }\">Bar {{foo.barId}}</a>\n *\n * <!-- Targets \"bar\" state and parameter, doesn't inherit existing parameters-->\n * <a uiSref=\"bar\" [uiParams]=\"{ barId: foo.barId }\" [uiOptions]=\"{ inherit: false }\">Bar {{foo.barId}}</a>\n * ```\n */\nvar UISref = /** @class */ (function () {\n    function UISref(_router, _anchorUISref, parent) {\n        var _this = this;\n        /**\n         * An observable (ReplaySubject) of the state this UISref is targeting.\n         * When the UISref is clicked, it will transition to this [[TargetState]].\n         */\n        this.targetState$ = new ReplaySubject(1);\n        /** @internalapi */ this._emit = false;\n        this._router = _router;\n        this._anchorUISref = _anchorUISref;\n        this._parent = parent;\n        this._statesSub = _router.globals.states$.subscribe(function () { return _this.update(); });\n    }\n    Object.defineProperty(UISref.prototype, \"uiSref\", {\n        /** @internalapi */\n        set: function (val) {\n            this.state = val;\n            this.update();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(UISref.prototype, \"uiParams\", {\n        /** @internalapi */\n        set: function (val) {\n            this.params = val;\n            this.update();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(UISref.prototype, \"uiOptions\", {\n        /** @internalapi */\n        set: function (val) {\n            this.options = val;\n            this.update();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    UISref.prototype.ngOnInit = function () {\n        this._emit = true;\n        this.update();\n    };\n    UISref.prototype.ngOnChanges = function (changes) {\n        this.update();\n    };\n    UISref.prototype.ngOnDestroy = function () {\n        this._emit = false;\n        this._statesSub.unsubscribe();\n        this.targetState$.unsubscribe();\n    };\n    UISref.prototype.update = function () {\n        var $state = this._router.stateService;\n        if (this._emit) {\n            var newTarget = $state.target(this.state, this.params, this.getOptions());\n            this.targetState$.next(newTarget);\n        }\n        if (this._anchorUISref) {\n            var href = $state.href(this.state, this.params, this.getOptions());\n            this._anchorUISref.update(href);\n        }\n    };\n    UISref.prototype.getOptions = function () {\n        var defaultOpts = {\n            relative: this._parent && this._parent.context && this._parent.context.name,\n            inherit: true,\n            source: 'sref',\n        };\n        return extend(defaultOpts, this.options || {});\n    };\n    /** When triggered by a (click) event, this function transitions to the UISref's target state */\n    UISref.prototype.go = function (button, ctrlKey, metaKey) {\n        if ((this._anchorUISref &&\n            (this._anchorUISref.openInNewTab() || button || !isNumber(button) || ctrlKey || metaKey)) ||\n            !this.state) {\n            return;\n        }\n        this._router.stateService.go(this.state, this.params, this.getOptions());\n        return false;\n    };\n    __decorate([\n        Input('uiSref'),\n        __metadata(\"design:type\", String)\n    ], UISref.prototype, \"state\", void 0);\n    __decorate([\n        Input('uiParams'),\n        __metadata(\"design:type\", Object)\n    ], UISref.prototype, \"params\", void 0);\n    __decorate([\n        Input('uiOptions'),\n        __metadata(\"design:type\", Object)\n    ], UISref.prototype, \"options\", void 0);\n    __decorate([\n        HostListener('click', ['$event.button', '$event.ctrlKey', '$event.metaKey']),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Number, Boolean, Boolean]),\n        __metadata(\"design:returntype\", void 0)\n    ], UISref.prototype, \"go\", null);\n    UISref = __decorate([\n        Directive({\n            selector: '[uiSref]',\n            exportAs: 'uiSref',\n        }),\n        __param(1, Optional()),\n        __param(2, Inject(UIView.PARENT_INJECT)),\n        __metadata(\"design:paramtypes\", [UIRouter,\n            AnchorUISref, Object])\n    ], UISref);\n    return UISref;\n}());\n\n/** @internalapi */\nvar inactiveStatus = {\n    active: false,\n    exact: false,\n    entering: false,\n    exiting: false,\n    targetStates: [],\n};\n/**\n * Returns a Predicate<PathNode[]>\n *\n * The predicate returns true when the target state (and param values)\n * match the (tail of) the path, and the path's param values\n *\n * @internalapi\n */\nvar pathMatches = function (target) {\n    if (!target.exists())\n        return function () { return false; };\n    var state = target.$state();\n    var targetParamVals = target.params();\n    var targetPath = PathUtils.buildPath(target);\n    var paramSchema = targetPath\n        .map(function (node) { return node.paramSchema; })\n        .reduce(unnestR, [])\n        .filter(function (param) { return targetParamVals.hasOwnProperty(param.id); });\n    return function (path) {\n        var tailNode = tail(path);\n        if (!tailNode || tailNode.state !== state)\n            return false;\n        var paramValues = PathUtils.paramValues(path);\n        return Param.equals(paramSchema, paramValues, targetParamVals);\n    };\n};\nvar Éµ0$1 = pathMatches;\n/**\n * Given basePath: [a, b], appendPath: [c, d]),\n * Expands the path to [c], [c, d]\n * Then appends each to [a,b,] and returns: [a, b, c], [a, b, c, d]\n *\n * @internalapi\n */\nfunction spreadToSubPaths(basePath, appendPath) {\n    return appendPath.map(function (node) { return basePath.concat(PathUtils.subPath(appendPath, function (n) { return n.state === node.state; })); });\n}\n/**\n * Given a TransEvt (Transition event: started, success, error)\n * and a UISref Target State, return a SrefStatus object\n * which represents the current status of that Sref:\n * active, activeEq (exact match), entering, exiting\n *\n * @internalapi\n */\nfunction getSrefStatus(event, srefTarget) {\n    var pathMatchesTarget = pathMatches(srefTarget);\n    var tc = event.trans.treeChanges();\n    var isStartEvent = event.evt === 'start';\n    var isSuccessEvent = event.evt === 'success';\n    var activePath = isSuccessEvent ? tc.to : tc.from;\n    var isActive = function () {\n        return spreadToSubPaths([], activePath)\n            .map(pathMatchesTarget)\n            .reduce(anyTrueR, false);\n    };\n    var isExact = function () { return pathMatchesTarget(activePath); };\n    var isEntering = function () {\n        return spreadToSubPaths(tc.retained, tc.entering)\n            .map(pathMatchesTarget)\n            .reduce(anyTrueR, false);\n    };\n    var isExiting = function () {\n        return spreadToSubPaths(tc.retained, tc.exiting)\n            .map(pathMatchesTarget)\n            .reduce(anyTrueR, false);\n    };\n    return {\n        active: isActive(),\n        exact: isExact(),\n        entering: isStartEvent ? isEntering() : false,\n        exiting: isStartEvent ? isExiting() : false,\n        targetStates: [srefTarget],\n    };\n}\n/** @internalapi */\nfunction mergeSrefStatus(left, right) {\n    return {\n        active: left.active || right.active,\n        exact: left.exact || right.exact,\n        entering: left.entering || right.entering,\n        exiting: left.exiting || right.exiting,\n        targetStates: left.targetStates.concat(right.targetStates),\n    };\n}\n/**\n * A directive which emits events when a paired [[UISref]] status changes.\n *\n * This directive is primarily used by the [[UISrefActive]] directives to monitor `UISref`(s).\n *\n * This directive shares two attribute selectors with `UISrefActive`:\n *\n * - `[uiSrefActive]`\n * - `[uiSrefActiveEq]`.\n *\n * Thus, whenever a `UISrefActive` directive is created, a `UISrefStatus` directive is also created.\n *\n * Most apps should simply use `UISrefActive`, but some advanced components may want to process the\n * [[SrefStatus]] events directly.\n *\n * ```js\n * <li (uiSrefStatus)=\"onSrefStatusChanged($event)\">\n *   <a uiSref=\"book\" [uiParams]=\"{ bookId: book.id }\">Book {{ book.name }}</a>\n * </li>\n * ```\n *\n * The `uiSrefStatus` event is emitted whenever an enclosed `uiSref`'s status changes.\n * The event emitted is of type [[SrefStatus]], and has boolean values for `active`, `exact`, `entering`, and `exiting`; also has a [[StateOrName]] `identifier`value.\n *\n * The values from this event can be captured and stored on a component (then applied, e.g., using ngClass).\n *\n * ---\n *\n * A single `uiSrefStatus` can enclose multiple `uiSref`.\n * Each status boolean (`active`, `exact`, `entering`, `exiting`) will be true if *any of the enclosed `uiSref` status is true*.\n * In other words, all enclosed `uiSref` statuses  are merged to a single status using `||` (logical or).\n *\n * ```js\n * <li (uiSrefStatus)=\"onSrefStatus($event)\" uiSref=\"admin\">\n *   Home\n *   <ul>\n *     <li> <a uiSref=\"admin.users\">Users</a> </li>\n *     <li> <a uiSref=\"admin.groups\">Groups</a> </li>\n *   </ul>\n * </li>\n * ```\n *\n * In the above example, `$event.active === true` when either `admin.users` or `admin.groups` is active.\n *\n * ---\n *\n * This API is subject to change.\n */\nvar UISrefStatus = /** @class */ (function () {\n    function UISrefStatus(_hostUiSref, _globals) {\n        /** current statuses of the state/params the uiSref directive is linking to */\n        this.uiSrefStatus = new EventEmitter(false);\n        this._globals = _globals;\n        this._hostUiSref = _hostUiSref;\n        this.status = Object.assign({}, inactiveStatus);\n    }\n    UISrefStatus.prototype.ngAfterContentInit = function () {\n        var _this = this;\n        // Map each transition start event to a stream of:\n        // start -> (success|error)\n        var transEvents$ = this._globals.start$.pipe(switchMap(function (trans) {\n            var event = function (evt) { return ({ evt: evt, trans: trans }); };\n            var transStart$ = of(event('start'));\n            var transResult = trans.promise.then(function () { return event('success'); }, function () { return event('error'); });\n            var transFinish$ = from(transResult);\n            return concat(transStart$, transFinish$);\n        }));\n        var withHostSref = function (childrenSrefs) {\n            return childrenSrefs\n                .concat(_this._hostUiSref)\n                .filter(identity)\n                .reduce(uniqR, []);\n        };\n        // Watch the @ContentChildren UISref[] components and get their target states\n        this._srefs$ = new BehaviorSubject(withHostSref(this._srefs.toArray()));\n        this._srefChangesSub = this._srefs.changes.subscribe(function (srefs) { return _this._srefs$.next(withHostSref(srefs)); });\n        var targetStates$ = this._srefs$.pipe(switchMap(function (srefs) { return combineLatest(srefs.map(function (sref) { return sref.targetState$; })); }));\n        // Calculate the status of each UISref based on the transition event.\n        // Reduce the statuses (if multiple) by or-ing each flag.\n        this._subscription = transEvents$\n            .pipe(switchMap(function (evt) {\n            return targetStates$.pipe(map(function (targets) {\n                var statuses = targets.map(function (target) { return getSrefStatus(evt, target); });\n                return statuses.reduce(mergeSrefStatus);\n            }));\n        }))\n            .subscribe(this._setStatus.bind(this));\n    };\n    UISrefStatus.prototype.ngOnDestroy = function () {\n        if (this._subscription)\n            this._subscription.unsubscribe();\n        if (this._srefChangesSub)\n            this._srefChangesSub.unsubscribe();\n        if (this._srefs$)\n            this._srefs$.unsubscribe();\n        this._subscription = this._srefChangesSub = this._srefs$ = undefined;\n    };\n    UISrefStatus.prototype._setStatus = function (status) {\n        this.status = status;\n        this.uiSrefStatus.emit(status);\n    };\n    __decorate([\n        Output('uiSrefStatus'),\n        __metadata(\"design:type\", Object)\n    ], UISrefStatus.prototype, \"uiSrefStatus\", void 0);\n    __decorate([\n        ContentChildren(UISref, { descendants: true }),\n        __metadata(\"design:type\", QueryList)\n    ], UISrefStatus.prototype, \"_srefs\", void 0);\n    UISrefStatus = __decorate([\n        Directive({\n            selector: '[uiSrefStatus],[uiSrefActive],[uiSrefActiveEq]',\n            exportAs: 'uiSrefStatus',\n        }),\n        __param(0, Host()), __param(0, Self()), __param(0, Optional()),\n        __metadata(\"design:paramtypes\", [UISref, UIRouterGlobals])\n    ], UISrefStatus);\n    return UISrefStatus;\n}());\n\n/**\n * A directive that adds a CSS class when its associated `uiSref` link is active.\n *\n * ### Purpose\n *\n * This directive should be paired with one (or more) [[UISref]] directives.\n * It will apply a CSS class to its element when the state the `uiSref` targets is activated.\n *\n * This can be used to create navigation UI where the active link is highlighted.\n *\n * ### Selectors\n *\n * - `[uiSrefActive]`: When this selector is used, the class is added when the target state or any\n * child of the target state is active\n * - `[uiSrefActiveEq]`: When this selector is used, the class is added when the target state is\n * exactly active (the class is not added if a child of the target state is active).\n *\n * ### Inputs\n *\n * - `uiSrefActive`/`uiSrefActiveEq`: one or more CSS classes to add to the element, when the `uiSref` is active\n *\n * #### Example:\n * The anchor tag has the `active` class added when the `foo` state is active.\n * ```html\n * <a uiSref=\"foo\" uiSrefActive=\"active\">Foo</a>\n * ```\n *\n * ### Matching parameters\n *\n * If the `uiSref` includes parameters, the current state must be active, *and* the parameter values must match.\n *\n * #### Example:\n * The first anchor tag has the `active` class added when the `foo.bar` state is active and the `id` parameter\n * equals 25.\n * The second anchor tag has the `active` class added when the `foo.bar` state is active and the `id` parameter\n * equals 32.\n * ```html\n * <a uiSref=\"foo.bar\" [uiParams]=\"{ id: 25 }\" uiSrefActive=\"active\">Bar #25</a>\n * <a uiSref=\"foo.bar\" [uiParams]=\"{ id: 32 }\" uiSrefActive=\"active\">Bar #32</a>\n * ```\n *\n * #### Example:\n * A list of anchor tags are created for a list of `bar` objects.\n * An anchor tag will have the `active` class when `foo.bar` state is active and the `id` parameter matches\n * that object's `id`.\n * ```html\n * <li *ngFor=\"let bar of bars\">\n *   <a uiSref=\"foo.bar\" [uiParams]=\"{ id: bar.id }\" uiSrefActive=\"active\">Bar #{{ bar.id }}</a>\n * </li>\n * ```\n *\n * ### Multiple uiSrefs\n *\n * A single `uiSrefActive` can be used for multiple `uiSref` links.\n * This can be used to create (for example) a drop down navigation menu, where the menui is highlighted\n * if *any* of its inner links are active.\n *\n * The `uiSrefActive` should be placed on an ancestor element of the `uiSref` list.\n * If anyof the `uiSref` links are activated, the class will be added to the ancestor element.\n *\n * #### Example:\n * This is a dropdown nagivation menu for \"Admin\" states.\n * When any of `admin.users`, `admin.groups`, `admin.settings` are active, the `<li>` for the dropdown\n * has the `dropdown-child-active` class applied.\n * Additionally, the active anchor tag has the `active` class applied.\n * ```html\n * <ul class=\"dropdown-menu\">\n *   <li uiSrefActive=\"dropdown-child-active\" class=\"dropdown admin\">\n *     Admin\n *     <ul>\n *       <li><a uiSref=\"admin.users\" uiSrefActive=\"active\">Users</a></li>\n *       <li><a uiSref=\"admin.groups\" uiSrefActive=\"active\">Groups</a></li>\n *       <li><a uiSref=\"admin.settings\" uiSrefActive=\"active\">Settings</a></li>\n *     </ul>\n *   </li>\n * </ul>\n * ```\n */\nvar UISrefActive = /** @class */ (function () {\n    function UISrefActive(uiSrefStatus, rnd, host) {\n        var _this = this;\n        this._classes = [];\n        this._classesEq = [];\n        this._subscription = uiSrefStatus.uiSrefStatus.subscribe(function (next) {\n            _this._classes.forEach(function (cls) {\n                if (next.active) {\n                    rnd.addClass(host.nativeElement, cls);\n                }\n                else {\n                    rnd.removeClass(host.nativeElement, cls);\n                }\n            });\n            _this._classesEq.forEach(function (cls) {\n                if (next.exact) {\n                    rnd.addClass(host.nativeElement, cls);\n                }\n                else {\n                    rnd.removeClass(host.nativeElement, cls);\n                }\n            });\n        });\n    }\n    Object.defineProperty(UISrefActive.prototype, \"active\", {\n        set: function (val) {\n            this._classes = val.split(/\\s+/);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(UISrefActive.prototype, \"activeEq\", {\n        set: function (val) {\n            this._classesEq = val.split(/\\s+/);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    UISrefActive.prototype.ngOnDestroy = function () {\n        this._subscription.unsubscribe();\n    };\n    __decorate([\n        Input('uiSrefActive'),\n        __metadata(\"design:type\", String),\n        __metadata(\"design:paramtypes\", [String])\n    ], UISrefActive.prototype, \"active\", null);\n    __decorate([\n        Input('uiSrefActiveEq'),\n        __metadata(\"design:type\", String),\n        __metadata(\"design:paramtypes\", [String])\n    ], UISrefActive.prototype, \"activeEq\", null);\n    UISrefActive = __decorate([\n        Directive({\n            selector: '[uiSrefActive],[uiSrefActiveEq]',\n        }),\n        __param(2, Host()),\n        __metadata(\"design:paramtypes\", [UISrefStatus, Renderer2, ElementRef])\n    ], UISrefActive);\n    return UISrefActive;\n}());\n\n/**\n * The UI-Router for Angular directives:\n *\n * - [[UIView]]: A viewport for routed components\n * - [[UISref]]: A state ref to a target state; navigates when clicked\n * - [[UISrefActive]]: (and `UISrefActiveEq`) Adds a css class when a UISref's target state (or a child state) is active\n *\n * @ng2api\n * @preferred\n * @module directives\n */ /** */\n/** @internalapi */\nvar _UIROUTER_DIRECTIVES = [UISref, AnchorUISref, UIView, UISrefActive, UISrefStatus];\n/**\n * References to the UI-Router directive classes, for use within a @Component's `directives:` property\n * @deprecated use [[UIRouterModule]]\n * @internalapi\n */\nvar UIROUTER_DIRECTIVES = _UIROUTER_DIRECTIVES;\n\n/** @hidden */ var UIROUTER_ROOT_MODULE = new InjectionToken('UIRouter Root Module');\n/** @hidden */ var UIROUTER_MODULE_TOKEN = new InjectionToken('UIRouter Module');\n/** @hidden */ var UIROUTER_STATES = new InjectionToken('UIRouter States');\n// Delay angular bootstrap until first transition is successful, for SSR.\n// See https://github.com/ui-router/angular/pull/127\nfunction onTransitionReady(transitionService, root) {\n    var mod = root[0];\n    if (!mod || !mod.deferInitialRender) {\n        return function () { return Promise.resolve(); };\n    }\n    return function () {\n        return new Promise(function (resolve) {\n            var hook = function (trans) {\n                trans.promise.then(resolve, resolve);\n            };\n            transitionService.onStart({}, hook, { invokeLimit: 1 });\n        });\n    };\n}\nfunction makeRootProviders(module) {\n    return [\n        { provide: UIROUTER_ROOT_MODULE, useValue: module, multi: true },\n        { provide: UIROUTER_MODULE_TOKEN, useValue: module, multi: true },\n        { provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: module.states || [], multi: true },\n        {\n            provide: APP_INITIALIZER,\n            useFactory: onTransitionReady,\n            deps: [TransitionService, UIROUTER_ROOT_MODULE],\n            multi: true,\n        },\n    ];\n}\nfunction makeChildProviders(module) {\n    return [\n        { provide: UIROUTER_MODULE_TOKEN, useValue: module, multi: true },\n        { provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: module.states || [], multi: true },\n    ];\n}\nfunction locationStrategy(useHash) {\n    return { provide: LocationStrategy, useClass: useHash ? HashLocationStrategy : PathLocationStrategy };\n}\n/**\n * Creates UI-Router Modules\n *\n * This class has two static factory methods which create UIRouter Modules.\n * A UI-Router Module is an [Angular NgModule](https://angular.io/docs/ts/latest/guide/ngmodule.html)\n * with support for UI-Router.\n *\n * ### UIRouter Directives\n *\n * When a UI-Router Module is imported into a `NgModule`, that module's components\n * can use the UIRouter Directives such as [[UIView]], [[UISref]], [[UISrefActive]].\n *\n * ### State Definitions\n *\n * State definitions found in the `states:` property are provided to the Dependency Injector.\n * This enables UI-Router to automatically register the states with the [[StateRegistry]] at bootstrap (and during lazy load).\n *\n * ### Entry Components\n *\n * Any routed components are added as `entryComponents:` so they will get compiled.\n */\nvar UIRouterModule = /** @class */ (function () {\n    function UIRouterModule() {\n    }\n    UIRouterModule_1 = UIRouterModule;\n    /**\n     * Creates a UI-Router Module for the root (bootstrapped) application module to import\n     *\n     * This factory function creates an [Angular NgModule](https://angular.io/docs/ts/latest/guide/ngmodule.html)\n     * with UI-Router support.\n     *\n     * The `forRoot` module should be added to the `imports:` of the `NgModule` being bootstrapped.\n     * An application should only create and import a single `NgModule` using `forRoot()`.\n     * All other modules should be created using [[UIRouterModule.forChild]].\n     *\n     * Unlike `forChild`, an `NgModule` returned by this factory provides the [[UIRouter]] singleton object.\n     * This factory also accepts root-level router configuration.\n     * These are the only differences between `forRoot` and `forChild`.\n     *\n     * Example:\n     * ```js\n     * let routerConfig = {\n     *   otherwise: '/home',\n     *   states: [homeState, aboutState]\n     * };\n     *\n     * @ NgModule({\n     *   imports: [\n     *     BrowserModule,\n     *     UIRouterModule.forRoot(routerConfig),\n     *     FeatureModule1\n     *   ]\n     * })\n     * class MyRootAppModule {}\n     *\n     * browserPlatformDynamic.bootstrapModule(MyRootAppModule);\n     * ```\n     *\n     * @param config declarative UI-Router configuration\n     * @returns an `NgModule` which provides the [[UIRouter]] singleton instance\n     */\n    UIRouterModule.forRoot = function (config) {\n        if (config === void 0) { config = {}; }\n        return {\n            ngModule: UIRouterModule_1,\n            providers: __spread([\n                _UIROUTER_INSTANCE_PROVIDERS,\n                _UIROUTER_SERVICE_PROVIDERS,\n                locationStrategy(config.useHash)\n            ], makeRootProviders(config)),\n        };\n    };\n    /**\n     * Creates an `NgModule` for a UIRouter module\n     *\n     * This function creates an [Angular NgModule](https://angular.io/docs/ts/latest/guide/ngmodule.html)\n     * with UI-Router support.\n     *\n     * #### Example:\n     * ```js\n     * var homeState = { name: 'home', url: '/home', component: Home };\n     * var aboutState = { name: 'about', url: '/about', component: About };\n     *\n     * @ NgModule({\n     *   imports: [\n     *     UIRouterModule.forChild({ states: [ homeState, aboutState ] }),\n     *     SharedModule,\n     *   ],\n     *   declarations: [ Home, About ],\n     * })\n     * export class AppModule {};\n     * ```\n     *\n     * @param module UI-Router module options\n     * @returns an `NgModule`\n     */\n    UIRouterModule.forChild = function (module) {\n        if (module === void 0) { module = {}; }\n        return {\n            ngModule: UIRouterModule_1,\n            providers: makeChildProviders(module),\n        };\n    };\n    var UIRouterModule_1;\n    UIRouterModule = UIRouterModule_1 = __decorate([\n        NgModule({\n            imports: [CommonModule],\n            declarations: [_UIROUTER_DIRECTIVES],\n            exports: [_UIROUTER_DIRECTIVES],\n            entryComponents: [UIView],\n        })\n    ], UIRouterModule);\n    return UIRouterModule;\n}());\n\n/** @ng2api @module core */\n/**\n * Returns a function which lazy loads a nested module\n *\n * This is primarily used by the [[ng2LazyLoadBuilder]] when processing [[Ng2StateDeclaration.loadChildren]].\n *\n * It could also be used manually as a [[StateDeclaration.lazyLoad]] property to lazy load an `NgModule` and its state(s).\n *\n * #### Example:\n * Using `import()` and named export of `HomeModule`\n * ```js\n * declare var System;\n * var futureState = {\n *   name: 'home.**',\n *   url: '/home',\n *   lazyLoad: loadNgModule(() => import('./home/home.module').then(result => result.HomeModule))\n * }\n * ```\n *\n * #### Example:\n * Using a path (string) to the module\n * ```js\n * var futureState = {\n *   name: 'home.**',\n *   url: '/home',\n *   lazyLoad: loadNgModule('./home/home.module#HomeModule')\n * }\n * ```\n *\n *\n * @param moduleToLoad a path (string) to the NgModule to load.\n *    Or a function which loads the NgModule code which should\n *    return a reference to  the `NgModule` class being loaded (or a `Promise` for it).\n *\n * @returns A function which takes a transition, which:\n * - Gets the Injector (scoped properly for the destination state)\n * - Loads and creates the NgModule\n * - Finds the \"replacement state\" for the target state, and adds the new NgModule Injector to it (as a resolve)\n * - Returns the new states array\n */\nfunction loadNgModule(moduleToLoad) {\n    return function (transition, stateObject) {\n        var ng2Injector = transition.injector().get(NATIVE_INJECTOR_TOKEN);\n        var createModule = function (factory) { return factory.create(ng2Injector); };\n        var applyModule = function (moduleRef) { return applyNgModule(transition, moduleRef, ng2Injector, stateObject); };\n        return loadModuleFactory(moduleToLoad, ng2Injector)\n            .then(createModule)\n            .then(applyModule);\n    };\n}\n/**\n * Returns the module factory that can be used to instantiate a module\n *\n * For strings this:\n * - Finds the correct NgModuleFactoryLoader\n * - Loads the new NgModuleFactory from the path string (async)\n *\n * For a Type<any> or Promise<Type<any>> this:\n * - Compiles the component type (if not running with AOT)\n * - Returns the NgModuleFactory resulting from compilation (or direct loading if using AOT) as a Promise\n *\n * @internalapi\n */\nfunction loadModuleFactory(moduleToLoad, ng2Injector) {\n    if (isString(moduleToLoad)) {\n        return ng2Injector.get(NgModuleFactoryLoader).load(moduleToLoad);\n    }\n    var compiler = ng2Injector.get(Compiler);\n    var unwrapEsModuleDefault = function (x) { return (x && x.__esModule && x['default'] ? x['default'] : x); };\n    return Promise.resolve(moduleToLoad())\n        .then(unwrapEsModuleDefault)\n        .then(function (t) {\n        if (t instanceof NgModuleFactory) {\n            return t;\n        }\n        return compiler.compileModuleAsync(t);\n    });\n}\n/**\n * Apply the UI-Router Modules found in the lazy loaded module.\n *\n * Apply the Lazy Loaded NgModule's newly created Injector to the right state in the state tree.\n *\n * Lazy loading uses a placeholder state which is removed (and replaced) after the module is loaded.\n * The NgModule should include a state with the same name as the placeholder.\n *\n * Find the *newly loaded state* with the same name as the *placeholder state*.\n * The NgModule's Injector (and ComponentFactoryResolver) will be added to that state.\n * The Injector/Factory are used when creating Components for the `replacement` state and all its children.\n *\n * @internalapi\n */\nfunction applyNgModule(transition, ng2Module, parentInjector, lazyLoadState) {\n    var injector = ng2Module.injector;\n    var uiRouter = injector.get(UIRouter);\n    var registry = uiRouter.stateRegistry;\n    var originalName = lazyLoadState.name;\n    var originalState = registry.get(originalName);\n    // Check if it's a future state (ends with .**)\n    var isFuture = /^(.*)\\.\\*\\*$/.exec(originalName);\n    // Final name (without the .**)\n    var replacementName = isFuture && isFuture[1];\n    var newRootModules = multiProviderParentChildDelta(parentInjector, injector, UIROUTER_ROOT_MODULE).reduce(uniqR, []);\n    var newChildModules = multiProviderParentChildDelta(parentInjector, injector, UIROUTER_MODULE_TOKEN).reduce(uniqR, []);\n    if (newRootModules.length) {\n        console.log(newRootModules); // tslint:disable-line:no-console\n        throw new Error('Lazy loaded modules should not contain a UIRouterModule.forRoot() module');\n    }\n    var newStateObjects = newChildModules\n        .map(function (module) { return applyModuleConfig(uiRouter, injector, module); })\n        .reduce(unnestR, [])\n        .reduce(uniqR, []);\n    if (isFuture) {\n        var replacementState = registry.get(replacementName);\n        if (!replacementState || replacementState === originalState) {\n            throw new Error(\"The Future State named '\" + originalName + \"' lazy loaded an NgModule. \" +\n                (\"The lazy loaded NgModule must have a state named '\" + replacementName + \"' \") +\n                (\"which replaces the (placeholder) '\" + originalName + \"' Future State. \") +\n                (\"Add a '\" + replacementName + \"' state to the lazy loaded NgModule \") +\n                \"using UIRouterModule.forChild({ states: CHILD_STATES }).\");\n        }\n    }\n    // Supply the newly loaded states with the Injector from the lazy loaded NgModule.\n    // If a tree of states is lazy loaded, only add the injector to the root of the lazy loaded tree.\n    // The children will get the injector by resolve inheritance.\n    var newParentStates = newStateObjects.filter(function (state) { return !inArray(newStateObjects, state.parent); });\n    // Add the Injector to the top of the lazy loaded state tree as a resolve\n    newParentStates.forEach(function (state) { return state.resolvables.push(Resolvable.fromData(NATIVE_INJECTOR_TOKEN, injector)); });\n    return {};\n}\n/**\n * Returns the new dependency injection values from the Child Injector\n *\n * When a DI token is defined as multi: true, the child injector\n * can add new values for the token.\n *\n * This function returns the values added by the child injector,  and excludes all values from the parent injector.\n *\n * @internalapi\n */\nfunction multiProviderParentChildDelta(parent, child, token) {\n    var childVals = child.get(token, []);\n    var parentVals = parent.get(token, []);\n    return childVals.filter(function (val) { return parentVals.indexOf(val) === -1; });\n}\n\n/**\n * This is a [[StateBuilder.builder]] function for ngModule lazy loading in Angular.\n *\n * When the [[StateBuilder]] builds a [[State]] object from a raw [[StateDeclaration]], this builder\n * decorates the `lazyLoad` property for states that have a [[Ng2StateDeclaration.ngModule]] declaration.\n *\n * If the state has a [[Ng2StateDeclaration.ngModule]], it will create a `lazyLoad` function\n * that in turn calls `loadNgModule(loadNgModuleFn)`.\n *\n * #### Example:\n * A state that has a `ngModule`\n * ```js\n * var decl = {\n *   ngModule: () => import('./childModule.ts')\n * }\n * ```\n * would build a state with a `lazyLoad` function like:\n * ```js\n * import { loadNgModule } from \"@uirouter/angular\";\n * var decl = {\n *   lazyLoad: loadNgModule(() => import('./childModule.ts')\n * }\n * ```\n *\n * If the state has both a `ngModule:` *and* a `lazyLoad`, then the `lazyLoad` is run first.\n *\n * #### Example:\n * ```js\n * var decl = {\n *   lazyLoad: () => import('third-party-library'),\n *   ngModule: () => import('./childModule.ts')\n * }\n * ```\n * would build a state with a `lazyLoad` function like:\n * ```js\n * import { loadNgModule } from \"@uirouter/angular\";\n * var decl = {\n *   lazyLoad: () => import('third-party-library')\n *       .then(() => loadNgModule(() => import('./childModule.ts'))\n * }\n * ```\n *\n */\nfunction ng2LazyLoadBuilder(state, parent) {\n    var loadNgModuleFn = state['loadChildren'];\n    return loadNgModuleFn ? loadNgModule(loadNgModuleFn) : state.lazyLoad;\n}\n\n/** A `LocationServices` that delegates to the Angular LocationStrategy */\nvar Ng2LocationServices = /** @class */ (function (_super) {\n    __extends(Ng2LocationServices, _super);\n    function Ng2LocationServices(router, _locationStrategy, isBrowser) {\n        var _this = _super.call(this, router, isBrowser) || this;\n        _this._locationStrategy = _locationStrategy;\n        _this._locationStrategy.onPopState(function (evt) {\n            if (evt.type !== 'hashchange') {\n                _this._listener(evt);\n            }\n        });\n        return _this;\n    }\n    Ng2LocationServices.prototype._get = function () {\n        return this._locationStrategy.path(true).replace(this._locationStrategy.getBaseHref().replace(/\\/$/, ''), '');\n    };\n    Ng2LocationServices.prototype._set = function (state, title, url, replace) {\n        var _a = parseUrl(url), path = _a.path, search = _a.search, hash = _a.hash;\n        var urlWithHash = path + (hash ? '#' + hash : '');\n        if (replace) {\n            this._locationStrategy.replaceState(state, title, urlWithHash, search);\n        }\n        else {\n            this._locationStrategy.pushState(state, title, urlWithHash, search);\n        }\n    };\n    Ng2LocationServices.prototype.dispose = function (router) {\n        _super.prototype.dispose.call(this, router);\n    };\n    return Ng2LocationServices;\n}(BaseLocationServices));\n\n/** @module ng2 */\nvar Ng2LocationConfig = /** @class */ (function (_super) {\n    __extends(Ng2LocationConfig, _super);\n    function Ng2LocationConfig(router, _locationStrategy) {\n        var _this = _super.call(this, router, is(PathLocationStrategy)(_locationStrategy)) || this;\n        _this._locationStrategy = _locationStrategy;\n        return _this;\n    }\n    Ng2LocationConfig.prototype.baseHref = function (href) {\n        return this._locationStrategy.getBaseHref();\n    };\n    return Ng2LocationConfig;\n}(BrowserLocationConfig));\n\n/**\n * # UI-Router for Angular (v2+)\n *\n * - [@uirouter/angular home page](https://ui-router.github.io/ng2)\n * - [tutorials](https://ui-router.github.io/tutorial/ng2/helloworld)\n * - [quick start repository](http://github.com/ui-router/quickstart-ng2)\n *\n * Getting started:\n *\n * - Use npm. Add a dependency on latest `@uirouter/angular`\n * - Import UI-Router classes directly from `\"@uirouter/angular\"`\n *\n * ```js\n * import {StateRegistry} from \"@uirouter/angular\";\n * ```\n *\n * - Create application states (as defined by [[Ng2StateDeclaration]]).\n *\n * ```js\n * export let state1: Ng2StateDeclaration = {\n *   name: 'state1',\n *   component: State1Component,\n *   url: '/one'\n * }\n *\n * export let state2: Ng2StateDeclaration = {\n *   name: 'state2',\n *   component: State2Component,\n *   url: '/two'\n * }\n * ```\n *\n * - Import a [[UIRouterModule.forChild]] module into your feature `NgModule`s.\n *\n * ```js\n * @ NgModule({\n *   imports: [\n *     SharedModule,\n *     UIRouterModule.forChild({ states: [state1, state2 ] })\n *   ],\n *   declarations: [\n *     State1Component,\n *     State2Component,\n *   ]\n * })\n * export class MyFeatureModule {}\n * ```\n *\n * - Import a [[UIRouterModule.forRoot]] module into your application root `NgModule`\n * - Either bootstrap a [[UIView]] component, or add a `<ui-view></ui-view>` viewport to your root component.\n *\n * ```js\n * @ NgModule({\n *   imports: [\n *     BrowserModule,\n *     UIRouterModule.forRoot({ states: [ homeState ] }),\n *     MyFeatureModule,\n *   ],\n *   declarations: [\n *     HomeComponent\n *   ]\n *   bootstrap: [ UIView ]\n * })\n * class RootAppModule {}\n *\n * browserPlatformDynamic.bootstrapModule(RootAppModule);\n * ```\n *\n * - Optionally specify a configuration class [[ChildModule.configClass]] for any module\n * to perform any router configuration during bootstrap or lazyload.\n * Pass the class to [[UIRouterModule.forRoot]] or [[UIRouterModule.forChild]].\n *\n * ```js\n * import {UIRouter} from \"@uirouter/angular\";\n *\n * @ Injectable()\n * export class MyUIRouterConfig {\n *   // Constructor is injectable\n *   constructor(uiRouter: UIRouter) {\n *     uiRouter.urlMatcherFactory.type('datetime', myDateTimeParamType);\n *   }\n * }\n * ```\n *\n * @preferred @module ng2\n */\n/**\n * This is a factory function for a UIRouter instance\n *\n * Creates a UIRouter instance and configures it for Angular, then invokes router bootstrap.\n * This function is used as an Angular `useFactory` Provider.\n */\nfunction uiRouterFactory(locationStrategy, rootModules, modules, injector) {\n    if (rootModules.length !== 1) {\n        throw new Error(\"Exactly one UIRouterModule.forRoot() should be in the bootstrapped app module's imports: []\");\n    }\n    // ----------------- Create router -----------------\n    // Create a new ng2 UIRouter and configure it for ng2\n    var router = new UIRouter();\n    // Add RxJS plugin\n    router.plugin(UIRouterRx);\n    // Add $q-like and $injector-like service APIs\n    router.plugin(servicesPlugin);\n    // ----------------- Monkey Patches ----------------\n    // Monkey patch the services.$injector to use the root ng2 Injector\n    services.$injector.get = injector.get.bind(injector);\n    // ----------------- Configure for ng2 -------------\n    router.locationService = new Ng2LocationServices(router, locationStrategy, isPlatformBrowser(injector.get(PLATFORM_ID)));\n    router.locationConfig = new Ng2LocationConfig(router, locationStrategy);\n    // Apply ng2 ui-view handling code\n    var viewConfigFactory = function (path, config) { return new Ng2ViewConfig(path, config); };\n    router.viewService._pluginapi._viewConfigFactory('ng2', viewConfigFactory);\n    // Apply statebuilder decorator for ng2 NgModule registration\n    var registry = router.stateRegistry;\n    registry.decorator('views', ng2ViewsBuilder);\n    registry.decorator('lazyLoad', ng2LazyLoadBuilder);\n    // Prep the tree of NgModule by placing the root NgModule's Injector on the root state.\n    var ng2InjectorResolvable = Resolvable.fromData(NATIVE_INJECTOR_TOKEN, injector);\n    registry.root().resolvables.push(ng2InjectorResolvable);\n    // Auto-flush the parameter type queue\n    router.urlMatcherFactory.$get();\n    // ----------------- Initialize router -------------\n    rootModules.forEach(function (moduleConfig) { return applyRootModuleConfig(router, injector, moduleConfig); });\n    modules.forEach(function (moduleConfig) { return applyModuleConfig(router, injector, moduleConfig); });\n    return router;\n}\n// Start monitoring the URL when the app starts\nfunction appInitializer(router) {\n    return function () {\n        if (!router.urlRouter.interceptDeferred) {\n            router.urlService.listen();\n            router.urlService.sync();\n        }\n    };\n}\nfunction parentUIViewInjectFactory(r) {\n    return { fqn: null, context: r.root() };\n}\nvar _UIROUTER_INSTANCE_PROVIDERS = [\n    {\n        provide: UIRouter,\n        useFactory: uiRouterFactory,\n        deps: [LocationStrategy, UIROUTER_ROOT_MODULE, UIROUTER_MODULE_TOKEN, Injector],\n    },\n    { provide: UIView.PARENT_INJECT, useFactory: parentUIViewInjectFactory, deps: [StateRegistry] },\n    { provide: APP_INITIALIZER, useFactory: appInitializer, deps: [UIRouter], multi: true },\n];\nfunction fnStateService(r) {\n    return r.stateService;\n}\nfunction fnTransitionService(r) {\n    return r.transitionService;\n}\nfunction fnUrlMatcherFactory(r) {\n    return r.urlMatcherFactory;\n}\nfunction fnUrlRouter(r) {\n    return r.urlRouter;\n}\nfunction fnUrlService(r) {\n    return r.urlService;\n}\nfunction fnViewService(r) {\n    return r.viewService;\n}\nfunction fnStateRegistry(r) {\n    return r.stateRegistry;\n}\nfunction fnGlobals(r) {\n    return r.globals;\n}\nvar _UIROUTER_SERVICE_PROVIDERS = [\n    { provide: StateService, useFactory: fnStateService, deps: [UIRouter] },\n    { provide: TransitionService, useFactory: fnTransitionService, deps: [UIRouter] },\n    { provide: UrlMatcherFactory, useFactory: fnUrlMatcherFactory, deps: [UIRouter] },\n    { provide: UrlRouter, useFactory: fnUrlRouter, deps: [UIRouter] },\n    { provide: UrlService, useFactory: fnUrlService, deps: [UIRouter] },\n    { provide: ViewService, useFactory: fnViewService, deps: [UIRouter] },\n    { provide: StateRegistry, useFactory: fnStateRegistry, deps: [UIRouter] },\n    { provide: UIRouterGlobals, useFactory: fnGlobals, deps: [UIRouter] },\n];\n/**\n * The UI-Router providers, for use in your application bootstrap\n *\n * @deprecated use [[UIRouterModule.forRoot]]\n */\nvar UIROUTER_PROVIDERS = _UIROUTER_INSTANCE_PROVIDERS.concat(_UIROUTER_SERVICE_PROVIDERS);\n\n/** @ng2api @module ng2 */ /** for typedoc */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AnchorUISref, Ng2ViewConfig, UIROUTER_DIRECTIVES, UIROUTER_MODULE_TOKEN, UIROUTER_PROVIDERS, UIROUTER_ROOT_MODULE, UIROUTER_STATES, UIRouterModule, UISref, UISrefActive, UISrefStatus, UIView, _UIROUTER_DIRECTIVES, _UIROUTER_INSTANCE_PROVIDERS, _UIROUTER_SERVICE_PROVIDERS, appInitializer, applyModuleConfig, applyNgModule, applyRootModuleConfig, fnGlobals, fnStateRegistry, fnStateService, fnTransitionService, fnUrlMatcherFactory, fnUrlRouter, fnUrlService, fnViewService, loadModuleFactory, loadNgModule, locationStrategy, makeChildProviders, makeRootProviders, multiProviderParentChildDelta, ng2LazyLoadBuilder, ng2ViewsBuilder, onTransitionReady, parentUIViewInjectFactory, uiRouterFactory, Éµ0 };\n//# sourceMappingURL=uirouter-angular.js.map\n"],"names":["ng2ViewsBuilder","state","views","viewsObject","$default","pick","forEach","config","name","isFunction","component","Object","keys","length","$type","$context","$name","normalized","ViewService","normalizeUIViewTarget","$uiViewName","uiViewName","$uiViewContextAnchor","uiViewContextAnchor","id","Ng2ViewConfig","path","viewDecl","this","$id","loaded","prototype","load","services","$q","when","MergeInjector","injectors","_i","arguments","Error","get","token","notFoundValue","i","val","NOT_FOUND","id$1","ng2ComponentInputs","factory","inputs","map","input","prop","propName","templateName","Éµ0","UIView","router","parent","viewContainerRef","_uiViewData","_parent","UIView_1","defineProperty","set","enumerable","configurable","parse","ngOnInit","_this","parentFqn","fqn","creationContext","context","configUpdated","_viewConfigUpdated","bind","undefined","_deregisterUiCanExitHook","transitionService","onBefore","trans","_invokeUiCanExitHook","_deregisterUiOnParamsChangedHook","onSuccess","_invokeUiOnParamsChangedHook","_deregisterUIView","viewService","registerUIView","instance","_componentRef","uiCanExitFn","uiCanExit","exiting","indexOf","onStart","call","$transition$","uiOnParamsChanged","viewState","ResolveContext","getResolvable","data","toParams_1","params","fromParams_1","getNodeSchema","node","paramSchema","toSchema","treeChanges","reduce","unnestR","fromSchema_1","changedToParams","filter","param","idx","type","equals","changedKeys_1","x","newValues","key","_disposeLast","destroy","ngOnDestroy","trace","traceUIViewConfigUpdated","_applyUpdatedConfig","changeDetectorRef","markForCheck","componentInjector","_getComponentInjector","componentClass","compFactory","ComponentFactoryResolver","resolveComponentFactory","_componentTarget","createComponent","_applyInputBindings","newProviders","getTokens","r","resolved","provide","useValue","injector","parentInject","push","PARENT_INJECT","parentComponentInjector","moduleInjector","NATIVE_INJECTOR_TOKEN","mergedParentInjector","ReflectiveInjector","resolveAndCreate","bindings","explicitBoundProps","explicitInputTuples","acc","concat","find","implicitInputTuples","tuple","inArray","resolvable","__decorate","ViewChild","read","ViewContainerRef","static","__metadata","Input","String","Component","selector","exportAs","template","__param","Inject","UIRouter","applyModuleConfig","uiRouter","module","states","stateRegistry","register","applyRootModuleConfig","isDefined","deferIntercept","urlService","otherwise","rules","initial","AnchorUISref","_el","_renderer","openInNewTab","nativeElement","target","update","href","setProperty","removeAttribute","Directive","ElementRef","Renderer2","UISref","_router","_anchorUISref","targetState$","ReplaySubject","_emit","_statesSub","globals","states$","subscribe","options","ngOnChanges","changes","unsubscribe","$state","stateService","newTarget","getOptions","next","defaultOpts","relative","inherit","source","extend","go","button","ctrlKey","metaKey","isNumber","HostListener","Function","Number","Boolean","Optional","inactiveStatus","active","exact","entering","targetStates","spreadToSubPaths","basePath","appendPath","PathUtils","subPath","n","getSrefStatus","event","srefTarget","pathMatchesTarget","exists","targetParamVals","buildPath","hasOwnProperty","tailNode","tail","paramValues","Param","pathMatches","tc","isStartEvent","evt","activePath","to","from","anyTrueR","retained","mergeSrefStatus","left","right","UISrefStatus","_hostUiSref","_globals","uiSrefStatus","EventEmitter","status","assign","ngAfterContentInit","transEvents$","start$","pipe","switchMap","transStart$","of","transResult","promise","then","transFinish$","withHostSref","childrenSrefs","identity","uniqR","_srefs$","BehaviorSubject","_srefs","toArray","_srefChangesSub","srefs","targetStates$","combineLatest","sref","_subscription","targets","_setStatus","emit","Output","ContentChildren","descendants","QueryList","Host","Self","UIRouterGlobals","UISrefActive","rnd","host","_classes","_classesEq","cls","addClass","removeClass","split","_UIROUTER_DIRECTIVES","UIROUTER_DIRECTIVES","UIROUTER_ROOT_MODULE","InjectionToken","UIROUTER_MODULE_TOKEN","UIROUTER_STATES","onTransitionReady","root","mod","deferInitialRender","Promise","resolve","invokeLimit","makeRootProviders","multi","ANALYZE_FOR_ENTRY_COMPONENTS","APP_INITIALIZER","useFactory","deps","TransitionService","makeChildProviders","locationStrategy","useHash","LocationStrategy","useClass","HashLocationStrategy","PathLocationStrategy","UIRouterModule","UIRouterModule_1","forRoot","ngModule","providers","__spread","_UIROUTER_INSTANCE_PROVIDERS","_UIROUTER_SERVICE_PROVIDERS","forChild","NgModule","imports","CommonModule","declarations","exports","entryComponents","loadNgModule","moduleToLoad","transition","stateObject","ng2Injector","loadModuleFactory","create","moduleRef","applyNgModule","isString","NgModuleFactoryLoader","compiler","Compiler","__esModule","t","NgModuleFactory","compileModuleAsync","ng2Module","parentInjector","lazyLoadState","registry","originalName","originalState","isFuture","exec","replacementName","newRootModules","multiProviderParentChildDelta","newChildModules","console","log","newStateObjects","replacementState","resolvables","Resolvable","fromData","child","childVals","parentVals","ng2LazyLoadBuilder","loadNgModuleFn","lazyLoad","Ng2LocationServices","_super","_locationStrategy","isBrowser","onPopState","_listener","__extends","_get","replace","getBaseHref","_set","title","url","_a","parseUrl","search","hash","urlWithHash","replaceState","pushState","dispose","BaseLocationServices","Ng2LocationConfig","is","baseHref","BrowserLocationConfig","uiRouterFactory","rootModules","modules","plugin","UIRouterRx","servicesPlugin","$injector","locationService","isPlatformBrowser","PLATFORM_ID","locationConfig","_pluginapi","_viewConfigFactory","decorator","ng2InjectorResolvable","urlMatcherFactory","$get","moduleConfig","appInitializer","urlRouter","interceptDeferred","listen","sync","parentUIViewInjectFactory","Injector","StateRegistry","fnStateService","fnTransitionService","fnUrlMatcherFactory","fnUrlRouter","fnUrlService","fnViewService","fnStateRegistry","fnGlobals","StateService","UrlMatcherFactory","UrlRouter","UrlService","UIROUTER_PROVIDERS"],"mappings":"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"}