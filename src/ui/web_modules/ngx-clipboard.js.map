{"version":3,"file":"ngx-clipboard.js","sources":["../node_modules/ngx-window-token/fesm2015/ngx-window-token.js","../node_modules/ngx-clipboard/fesm2015/ngx-clipboard.js"],"sourcesContent":["import { InjectionToken } from '@angular/core';\n\nconst WINDOW = new InjectionToken('WindowToken', typeof window !== 'undefined' && window.document\r\n    ? { providedIn: 'root', factory: () => window }\r\n    : { providedIn: 'root', factory: () => undefined });\n\n/*\r\n * Public API Surface of ngx-window-token\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { WINDOW };\n//# sourceMappingURL=ngx-window-token.js.map\n","import { DOCUMENT, CommonModule } from '@angular/common';\nimport { ɵɵdefineInjectable, ɵɵinject, Injectable, Inject, Optional, EventEmitter, Directive, Input, Output, HostListener, ViewContainerRef, TemplateRef, NgModule } from '@angular/core';\nimport { WINDOW } from 'ngx-window-token';\nimport { Subject } from 'rxjs';\n\n/**\r\n * The following code is heavily copied from https://github.com/zenorocha/clipboard.js\r\n */\r\nclass ClipboardService {\r\n    constructor(document, window) {\r\n        this.document = document;\r\n        this.window = window;\r\n        this.copySubject = new Subject();\r\n        this.copyResponse$ = this.copySubject.asObservable();\r\n        this.config = {};\r\n    }\r\n    configure(config) {\r\n        this.config = config;\r\n    }\r\n    copy(content) {\r\n        if (!this.isSupported || !content) {\r\n            return this.pushCopyResponse({ isSuccess: false, content });\r\n        }\r\n        const copyResult = this.copyFromContent(content);\r\n        if (copyResult) {\r\n            return this.pushCopyResponse({ content, isSuccess: copyResult });\r\n        }\r\n        return this.pushCopyResponse({ isSuccess: false, content });\r\n    }\r\n    get isSupported() {\r\n        return !!this.document.queryCommandSupported && !!this.document.queryCommandSupported('copy') && !!this.window;\r\n    }\r\n    isTargetValid(element) {\r\n        if (element instanceof HTMLInputElement || element instanceof HTMLTextAreaElement) {\r\n            if (element.hasAttribute('disabled')) {\r\n                throw new Error('Invalid \"target\" attribute. Please use \"readonly\" instead of \"disabled\" attribute');\r\n            }\r\n            return true;\r\n        }\r\n        throw new Error('Target should be input or textarea');\r\n    }\r\n    /**\r\n     * Attempts to copy from an input `targetElm`\r\n     */\r\n    copyFromInputElement(targetElm, isFocus = true) {\r\n        try {\r\n            this.selectTarget(targetElm);\r\n            const re = this.copyText();\r\n            this.clearSelection(isFocus ? targetElm : undefined, this.window);\r\n            return re && this.isCopySuccessInIE11();\r\n        }\r\n        catch (error) {\r\n            return false;\r\n        }\r\n    }\r\n    /**\r\n     * This is a hack for IE11 to return `true` even if copy fails.\r\n     */\r\n    isCopySuccessInIE11() {\r\n        const clipboardData = this.window['clipboardData'];\r\n        if (clipboardData && clipboardData.getData) {\r\n            if (!clipboardData.getData('Text')) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * Creates a fake textarea element, sets its value from `text` property,\r\n     * and makes a selection on it.\r\n     */\r\n    copyFromContent(content, container = this.document.body) {\r\n        // check if the temp textarea still belongs to the current container.\r\n        // In case we have multiple places using ngx-clipboard, one is in a modal using container but the other one is not.\r\n        if (this.tempTextArea && !container.contains(this.tempTextArea)) {\r\n            this.destroy(this.tempTextArea.parentElement || undefined);\r\n        }\r\n        if (!this.tempTextArea) {\r\n            this.tempTextArea = this.createTempTextArea(this.document, this.window);\r\n            try {\r\n                container.appendChild(this.tempTextArea);\r\n            }\r\n            catch (error) {\r\n                throw new Error('Container should be a Dom element');\r\n            }\r\n        }\r\n        this.tempTextArea.value = content;\r\n        const toReturn = this.copyFromInputElement(this.tempTextArea, false);\r\n        if (this.config.cleanUpAfterCopy) {\r\n            this.destroy(this.tempTextArea.parentElement || undefined);\r\n        }\r\n        return toReturn;\r\n    }\r\n    /**\r\n     * Remove temporary textarea if any exists.\r\n     */\r\n    destroy(container = this.document.body) {\r\n        if (this.tempTextArea) {\r\n            container.removeChild(this.tempTextArea);\r\n            // removeChild doesn't remove the reference from memory\r\n            this.tempTextArea = undefined;\r\n        }\r\n    }\r\n    /**\r\n     * Select the target html input element.\r\n     */\r\n    selectTarget(inputElement) {\r\n        inputElement.select();\r\n        inputElement.setSelectionRange(0, inputElement.value.length);\r\n        return inputElement.value.length;\r\n    }\r\n    copyText() {\r\n        return this.document.execCommand('copy');\r\n    }\r\n    /**\r\n     * Moves focus away from `target` and back to the trigger, removes current selection.\r\n     */\r\n    clearSelection(inputElement, window) {\r\n        var _a;\r\n        inputElement && inputElement.focus();\r\n        (_a = window.getSelection()) === null || _a === void 0 ? void 0 : _a.removeAllRanges();\r\n    }\r\n    /**\r\n     * Creates a fake textarea for copy command.\r\n     */\r\n    createTempTextArea(doc, window) {\r\n        const isRTL = doc.documentElement.getAttribute('dir') === 'rtl';\r\n        let ta;\r\n        ta = doc.createElement('textarea');\r\n        // Prevent zooming on iOS\r\n        ta.style.fontSize = '12pt';\r\n        // Reset box model\r\n        ta.style.border = '0';\r\n        ta.style.padding = '0';\r\n        ta.style.margin = '0';\r\n        // Move element out of screen horizontally\r\n        ta.style.position = 'absolute';\r\n        ta.style[isRTL ? 'right' : 'left'] = '-9999px';\r\n        // Move element to the same position vertically\r\n        const yPosition = window.pageYOffset || doc.documentElement.scrollTop;\r\n        ta.style.top = yPosition + 'px';\r\n        ta.setAttribute('readonly', '');\r\n        return ta;\r\n    }\r\n    /**\r\n     * Pushes copy operation response to copySubject, to provide global access\r\n     * to the response.\r\n     */\r\n    pushCopyResponse(response) {\r\n        this.copySubject.next(response);\r\n    }\r\n    /**\r\n     * @deprecated use pushCopyResponse instead.\r\n     */\r\n    pushCopyReponse(response) {\r\n        this.pushCopyResponse(response);\r\n    }\r\n}\r\nClipboardService.ɵprov = ɵɵdefineInjectable({ factory: function ClipboardService_Factory() { return new ClipboardService(ɵɵinject(DOCUMENT), ɵɵinject(WINDOW, 8)); }, token: ClipboardService, providedIn: \"root\" });\r\nClipboardService.decorators = [\r\n    { type: Injectable, args: [{ providedIn: 'root' },] }\r\n];\r\nClipboardService.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\r\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [WINDOW,] }] }\r\n];\n\nclass ClipboardDirective {\r\n    constructor(clipboardSrv) {\r\n        this.clipboardSrv = clipboardSrv;\r\n        this.cbOnSuccess = new EventEmitter();\r\n        this.cbOnError = new EventEmitter();\r\n    }\r\n    // tslint:disable-next-line:no-empty\r\n    ngOnInit() { }\r\n    ngOnDestroy() {\r\n        this.clipboardSrv.destroy(this.container);\r\n    }\r\n    onClick(event) {\r\n        if (!this.clipboardSrv.isSupported) {\r\n            this.handleResult(false, undefined, event);\r\n        }\r\n        else if (this.targetElm && this.clipboardSrv.isTargetValid(this.targetElm)) {\r\n            this.handleResult(this.clipboardSrv.copyFromInputElement(this.targetElm), this.targetElm.value, event);\r\n        }\r\n        else if (this.cbContent) {\r\n            this.handleResult(this.clipboardSrv.copyFromContent(this.cbContent, this.container), this.cbContent, event);\r\n        }\r\n    }\r\n    /**\r\n     * Fires an event based on the copy operation result.\r\n     * @param succeeded\r\n     */\r\n    handleResult(succeeded, copiedContent, event) {\r\n        let response = {\r\n            isSuccess: succeeded,\r\n            event\r\n        };\r\n        if (succeeded) {\r\n            response = Object.assign(response, {\r\n                content: copiedContent,\r\n                successMessage: this.cbSuccessMsg\r\n            });\r\n            this.cbOnSuccess.emit(response);\r\n        }\r\n        else {\r\n            this.cbOnError.emit(response);\r\n        }\r\n        this.clipboardSrv.pushCopyResponse(response);\r\n    }\r\n}\r\nClipboardDirective.decorators = [\r\n    { type: Directive, args: [{\r\n                selector: '[ngxClipboard]'\r\n            },] }\r\n];\r\nClipboardDirective.ctorParameters = () => [\r\n    { type: ClipboardService }\r\n];\r\nClipboardDirective.propDecorators = {\r\n    targetElm: [{ type: Input, args: ['ngxClipboard',] }],\r\n    container: [{ type: Input }],\r\n    cbContent: [{ type: Input }],\r\n    cbSuccessMsg: [{ type: Input }],\r\n    cbOnSuccess: [{ type: Output }],\r\n    cbOnError: [{ type: Output }],\r\n    onClick: [{ type: HostListener, args: ['click', ['$event.target'],] }]\r\n};\n\nclass ClipboardIfSupportedDirective {\r\n    constructor(_clipboardService, _viewContainerRef, _templateRef) {\r\n        this._clipboardService = _clipboardService;\r\n        this._viewContainerRef = _viewContainerRef;\r\n        this._templateRef = _templateRef;\r\n    }\r\n    ngOnInit() {\r\n        if (this._clipboardService.isSupported) {\r\n            this._viewContainerRef.createEmbeddedView(this._templateRef);\r\n        }\r\n    }\r\n}\r\nClipboardIfSupportedDirective.decorators = [\r\n    { type: Directive, args: [{\r\n                selector: '[ngxClipboardIfSupported]'\r\n            },] }\r\n];\r\nClipboardIfSupportedDirective.ctorParameters = () => [\r\n    { type: ClipboardService },\r\n    { type: ViewContainerRef },\r\n    { type: TemplateRef }\r\n];\n\nclass ClipboardModule {\r\n}\r\nClipboardModule.decorators = [\r\n    { type: NgModule, args: [{\r\n                imports: [CommonModule],\r\n                declarations: [ClipboardDirective, ClipboardIfSupportedDirective],\r\n                exports: [ClipboardDirective, ClipboardIfSupportedDirective]\r\n            },] }\r\n];\n\n/*\r\n * Public API Surface of ngx-clipboard\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { ClipboardDirective, ClipboardIfSupportedDirective, ClipboardModule, ClipboardService };\n//# sourceMappingURL=ngx-clipboard.js.map\n"],"names":["WINDOW","InjectionToken","window","document","providedIn","factory","ClipboardService","[object Object]","this","copySubject","Subject","copyResponse$","asObservable","config","content","isSupported","pushCopyResponse","isSuccess","copyResult","copyFromContent","queryCommandSupported","element","HTMLInputElement","HTMLTextAreaElement","hasAttribute","Error","targetElm","isFocus","selectTarget","re","copyText","clearSelection","undefined","isCopySuccessInIE11","error","clipboardData","getData","container","body","tempTextArea","contains","destroy","parentElement","createTempTextArea","appendChild","value","toReturn","copyFromInputElement","cleanUpAfterCopy","removeChild","inputElement","select","setSelectionRange","length","execCommand","_a","focus","getSelection","removeAllRanges","doc","isRTL","documentElement","getAttribute","ta","createElement","style","fontSize","border","padding","margin","position","yPosition","pageYOffset","scrollTop","top","setAttribute","response","next","ɵprov","ɵɵdefineInjectable","ɵɵinject","DOCUMENT","token","decorators","type","Injectable","args","ctorParameters","Inject","Optional","ClipboardDirective","clipboardSrv","cbOnSuccess","EventEmitter","cbOnError","event","isTargetValid","handleResult","cbContent","succeeded","copiedContent","Object","assign","successMessage","cbSuccessMsg","emit","Directive","selector","propDecorators","Input","Output","onClick","HostListener","ClipboardIfSupportedDirective","_clipboardService","_viewContainerRef","_templateRef","createEmbeddedView","ViewContainerRef","TemplateRef","ClipboardModule","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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"}