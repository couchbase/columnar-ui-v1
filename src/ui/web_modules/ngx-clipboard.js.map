{"version":3,"file":"ngx-clipboard.js","sources":["../node_modules/ngx-window-token/fesm5/ngx-window-token.js","../node_modules/ngx-clipboard/fesm5/ngx-clipboard.js"],"sourcesContent":["import { InjectionToken } from '@angular/core';\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/** @type {?} */\r\nvar WINDOW = new InjectionToken('WindowToken', typeof window !== 'undefined' && window.document ? { providedIn: 'root', factory: (/**\r\n     * @return {?}\r\n     */\r\n    function () { return window; }) } : undefined);\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\nexport { WINDOW };\n\n//# sourceMappingURL=ngx-window-token.js.map","import { WINDOW } from 'ngx-window-token';\nimport { Subject } from 'rxjs';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { Inject, Injectable, Optional, Directive, TemplateRef, ViewContainerRef, EventEmitter, HostListener, Input, Output, NgModule, defineInjectable, inject } from '@angular/core';\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * The following code is heavily copied from https://github.com/zenorocha/clipboard.js\r\n */\r\nvar ClipboardService = /** @class */ (function () {\r\n    function ClipboardService(document, window) {\r\n        this.document = document;\r\n        this.window = window;\r\n        this.copySubject = new Subject();\r\n        this.copyResponse$ = this.copySubject.asObservable();\r\n        this.config = {};\r\n    }\r\n    /**\r\n     * @param {?} config\r\n     * @return {?}\r\n     */\r\n    ClipboardService.prototype.configure = /**\r\n     * @param {?} config\r\n     * @return {?}\r\n     */\r\n    function (config) {\r\n        this.config = config;\r\n    };\r\n    /**\r\n     * @param {?} content\r\n     * @return {?}\r\n     */\r\n    ClipboardService.prototype.copy = /**\r\n     * @param {?} content\r\n     * @return {?}\r\n     */\r\n    function (content) {\r\n        if (!this.isSupported || !content) {\r\n            return this.pushCopyResponse({ isSuccess: false, content: content });\r\n        }\r\n        /** @type {?} */\r\n        var copyResult = this.copyFromContent(content);\r\n        if (copyResult) {\r\n            return this.pushCopyResponse({ content: content, isSuccess: copyResult });\r\n        }\r\n        return this.pushCopyResponse({ isSuccess: false, content: content });\r\n    };\r\n    Object.defineProperty(ClipboardService.prototype, \"isSupported\", {\r\n        get: /**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            return !!this.document.queryCommandSupported && !!this.document.queryCommandSupported('copy') && !!this.window;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @param {?} element\r\n     * @return {?}\r\n     */\r\n    ClipboardService.prototype.isTargetValid = /**\r\n     * @param {?} element\r\n     * @return {?}\r\n     */\r\n    function (element) {\r\n        if (element instanceof HTMLInputElement || element instanceof HTMLTextAreaElement) {\r\n            if (element.hasAttribute('disabled')) {\r\n                throw new Error('Invalid \"target\" attribute. Please use \"readonly\" instead of \"disabled\" attribute');\r\n            }\r\n            return true;\r\n        }\r\n        throw new Error('Target should be input or textarea');\r\n    };\r\n    /**\r\n     * Attempts to copy from an input `targetElm`\r\n     */\r\n    /**\r\n     * Attempts to copy from an input `targetElm`\r\n     * @param {?} targetElm\r\n     * @param {?=} isFocus\r\n     * @return {?}\r\n     */\r\n    ClipboardService.prototype.copyFromInputElement = /**\r\n     * Attempts to copy from an input `targetElm`\r\n     * @param {?} targetElm\r\n     * @param {?=} isFocus\r\n     * @return {?}\r\n     */\r\n    function (targetElm, isFocus) {\r\n        if (isFocus === void 0) { isFocus = true; }\r\n        try {\r\n            this.selectTarget(targetElm);\r\n            /** @type {?} */\r\n            var re = this.copyText();\r\n            this.clearSelection(isFocus ? targetElm : undefined, this.window);\r\n            return re && this.isCopySuccessInIE11();\r\n        }\r\n        catch (error) {\r\n            return false;\r\n        }\r\n    };\r\n    /**\r\n     * This is a hack for IE11 to return `true` even if copy fails.\r\n     */\r\n    /**\r\n     * This is a hack for IE11 to return `true` even if copy fails.\r\n     * @return {?}\r\n     */\r\n    ClipboardService.prototype.isCopySuccessInIE11 = /**\r\n     * This is a hack for IE11 to return `true` even if copy fails.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        /** @type {?} */\r\n        var clipboardData = this.window['clipboardData'];\r\n        if (clipboardData && clipboardData.getData) {\r\n            if (!clipboardData.getData('Text')) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * Creates a fake textarea element, sets its value from `text` property,\r\n     * and makes a selection on it.\r\n     */\r\n    /**\r\n     * Creates a fake textarea element, sets its value from `text` property,\r\n     * and makes a selection on it.\r\n     * @param {?} content\r\n     * @param {?=} container\r\n     * @return {?}\r\n     */\r\n    ClipboardService.prototype.copyFromContent = /**\r\n     * Creates a fake textarea element, sets its value from `text` property,\r\n     * and makes a selection on it.\r\n     * @param {?} content\r\n     * @param {?=} container\r\n     * @return {?}\r\n     */\r\n    function (content, container) {\r\n        if (container === void 0) { container = this.document.body; }\r\n        // check if the temp textarea still belongs to the current container.\r\n        // In case we have multiple places using ngx-clipboard, one is in a modal using container but the other one is not.\r\n        if (this.tempTextArea && !container.contains(this.tempTextArea)) {\r\n            this.destroy(this.tempTextArea.parentElement);\r\n        }\r\n        if (!this.tempTextArea) {\r\n            this.tempTextArea = this.createTempTextArea(this.document, this.window);\r\n            try {\r\n                container.appendChild(this.tempTextArea);\r\n            }\r\n            catch (error) {\r\n                throw new Error('Container should be a Dom element');\r\n            }\r\n        }\r\n        this.tempTextArea.value = content;\r\n        /** @type {?} */\r\n        var toReturn = this.copyFromInputElement(this.tempTextArea, false);\r\n        if (this.config.cleanUpAfterCopy) {\r\n            this.destroy(this.tempTextArea.parentElement);\r\n        }\r\n        return toReturn;\r\n    };\r\n    /**\r\n     * Remove temporary textarea if any exists.\r\n     */\r\n    /**\r\n     * Remove temporary textarea if any exists.\r\n     * @param {?=} container\r\n     * @return {?}\r\n     */\r\n    ClipboardService.prototype.destroy = /**\r\n     * Remove temporary textarea if any exists.\r\n     * @param {?=} container\r\n     * @return {?}\r\n     */\r\n    function (container) {\r\n        if (container === void 0) { container = this.document.body; }\r\n        if (this.tempTextArea) {\r\n            container.removeChild(this.tempTextArea);\r\n            // removeChild doesn't remove the reference from memory\r\n            this.tempTextArea = undefined;\r\n        }\r\n    };\r\n    /**\r\n     * Select the target html input element.\r\n     */\r\n    /**\r\n     * Select the target html input element.\r\n     * @private\r\n     * @param {?} inputElement\r\n     * @return {?}\r\n     */\r\n    ClipboardService.prototype.selectTarget = /**\r\n     * Select the target html input element.\r\n     * @private\r\n     * @param {?} inputElement\r\n     * @return {?}\r\n     */\r\n    function (inputElement) {\r\n        inputElement.select();\r\n        inputElement.setSelectionRange(0, inputElement.value.length);\r\n        return inputElement.value.length;\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    ClipboardService.prototype.copyText = /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        return this.document.execCommand('copy');\r\n    };\r\n    /**\r\n     * Moves focus away from `target` and back to the trigger, removes current selection.\r\n     */\r\n    /**\r\n     * Moves focus away from `target` and back to the trigger, removes current selection.\r\n     * @private\r\n     * @param {?} inputElement\r\n     * @param {?} window\r\n     * @return {?}\r\n     */\r\n    ClipboardService.prototype.clearSelection = /**\r\n     * Moves focus away from `target` and back to the trigger, removes current selection.\r\n     * @private\r\n     * @param {?} inputElement\r\n     * @param {?} window\r\n     * @return {?}\r\n     */\r\n    function (inputElement, window) {\r\n        inputElement && inputElement.focus();\r\n        window.getSelection().removeAllRanges();\r\n    };\r\n    /**\r\n     * Creates a fake textarea for copy command.\r\n     */\r\n    /**\r\n     * Creates a fake textarea for copy command.\r\n     * @private\r\n     * @param {?} doc\r\n     * @param {?} window\r\n     * @return {?}\r\n     */\r\n    ClipboardService.prototype.createTempTextArea = /**\r\n     * Creates a fake textarea for copy command.\r\n     * @private\r\n     * @param {?} doc\r\n     * @param {?} window\r\n     * @return {?}\r\n     */\r\n    function (doc, window) {\r\n        /** @type {?} */\r\n        var isRTL = doc.documentElement.getAttribute('dir') === 'rtl';\r\n        /** @type {?} */\r\n        var ta;\r\n        ta = doc.createElement('textarea');\r\n        // Prevent zooming on iOS\r\n        ta.style.fontSize = '12pt';\r\n        // Reset box model\r\n        ta.style.border = '0';\r\n        ta.style.padding = '0';\r\n        ta.style.margin = '0';\r\n        // Move element out of screen horizontally\r\n        ta.style.position = 'absolute';\r\n        ta.style[isRTL ? 'right' : 'left'] = '-9999px';\r\n        // Move element to the same position vertically\r\n        /** @type {?} */\r\n        var yPosition = window.pageYOffset || doc.documentElement.scrollTop;\r\n        ta.style.top = yPosition + 'px';\r\n        ta.setAttribute('readonly', '');\r\n        return ta;\r\n    };\r\n    /**\r\n     * Pushes copy operation response to copySubject, to provide global access\r\n     * to the response.\r\n     */\r\n    /**\r\n     * Pushes copy operation response to copySubject, to provide global access\r\n     * to the response.\r\n     * @param {?} response\r\n     * @return {?}\r\n     */\r\n    ClipboardService.prototype.pushCopyResponse = /**\r\n     * Pushes copy operation response to copySubject, to provide global access\r\n     * to the response.\r\n     * @param {?} response\r\n     * @return {?}\r\n     */\r\n    function (response) {\r\n        this.copySubject.next(response);\r\n    };\r\n    /**\r\n     * @deprecated use pushCopyResponse instead.\r\n     */\r\n    /**\r\n     * @deprecated use pushCopyResponse instead.\r\n     * @param {?} response\r\n     * @return {?}\r\n     */\r\n    ClipboardService.prototype.pushCopyReponse = /**\r\n     * @deprecated use pushCopyResponse instead.\r\n     * @param {?} response\r\n     * @return {?}\r\n     */\r\n    function (response) {\r\n        this.pushCopyResponse(response);\r\n    };\r\n    ClipboardService.decorators = [\r\n        { type: Injectable, args: [{ providedIn: 'root' },] }\r\n    ];\r\n    /** @nocollapse */\r\n    ClipboardService.ctorParameters = function () { return [\r\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\r\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [WINDOW,] }] }\r\n    ]; };\r\n    /** @nocollapse */ ClipboardService.ngInjectableDef = defineInjectable({ factory: function ClipboardService_Factory() { return new ClipboardService(inject(DOCUMENT), inject(WINDOW, 8)); }, token: ClipboardService, providedIn: \"root\" });\r\n    return ClipboardService;\r\n}());\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nvar ClipboardDirective = /** @class */ (function () {\r\n    function ClipboardDirective(clipboardSrv) {\r\n        this.clipboardSrv = clipboardSrv;\r\n        this.cbOnSuccess = new EventEmitter();\r\n        this.cbOnError = new EventEmitter();\r\n    }\r\n    // tslint:disable-next-line:no-empty\r\n    // tslint:disable-next-line:no-empty\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ClipboardDirective.prototype.ngOnInit = \r\n    // tslint:disable-next-line:no-empty\r\n    /**\r\n     * @return {?}\r\n     */\r\n    function () { };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ClipboardDirective.prototype.ngOnDestroy = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        this.clipboardSrv.destroy(this.container);\r\n    };\r\n    /**\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    ClipboardDirective.prototype.onClick = /**\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    function (event) {\r\n        if (!this.clipboardSrv.isSupported) {\r\n            this.handleResult(false, undefined, event);\r\n        }\r\n        else if (this.targetElm && this.clipboardSrv.isTargetValid(this.targetElm)) {\r\n            this.handleResult(this.clipboardSrv.copyFromInputElement(this.targetElm), this.targetElm.value, event);\r\n        }\r\n        else if (this.cbContent) {\r\n            this.handleResult(this.clipboardSrv.copyFromContent(this.cbContent, this.container), this.cbContent, event);\r\n        }\r\n    };\r\n    /**\r\n     * Fires an event based on the copy operation result.\r\n     * @param succeeded\r\n     */\r\n    /**\r\n     * Fires an event based on the copy operation result.\r\n     * @private\r\n     * @param {?} succeeded\r\n     * @param {?} copiedContent\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    ClipboardDirective.prototype.handleResult = /**\r\n     * Fires an event based on the copy operation result.\r\n     * @private\r\n     * @param {?} succeeded\r\n     * @param {?} copiedContent\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    function (succeeded, copiedContent, event) {\r\n        /** @type {?} */\r\n        var response = {\r\n            isSuccess: succeeded,\r\n            event: event\r\n        };\r\n        if (succeeded) {\r\n            response = Object.assign(response, {\r\n                content: copiedContent,\r\n                successMessage: this.cbSuccessMsg\r\n            });\r\n            this.cbOnSuccess.emit(response);\r\n        }\r\n        else {\r\n            this.cbOnError.emit(response);\r\n        }\r\n        this.clipboardSrv.pushCopyResponse(response);\r\n    };\r\n    ClipboardDirective.decorators = [\r\n        { type: Directive, args: [{\r\n                    selector: '[ngxClipboard]'\r\n                },] }\r\n    ];\r\n    /** @nocollapse */\r\n    ClipboardDirective.ctorParameters = function () { return [\r\n        { type: ClipboardService }\r\n    ]; };\r\n    ClipboardDirective.propDecorators = {\r\n        targetElm: [{ type: Input, args: ['ngxClipboard',] }],\r\n        container: [{ type: Input }],\r\n        cbContent: [{ type: Input }],\r\n        cbSuccessMsg: [{ type: Input }],\r\n        cbOnSuccess: [{ type: Output }],\r\n        cbOnError: [{ type: Output }],\r\n        onClick: [{ type: HostListener, args: ['click', ['$event.target'],] }]\r\n    };\r\n    return ClipboardDirective;\r\n}());\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nvar ClipboardIfSupportedDirective = /** @class */ (function () {\r\n    function ClipboardIfSupportedDirective(_clipboardService, _viewContainerRef, _templateRef) {\r\n        this._clipboardService = _clipboardService;\r\n        this._viewContainerRef = _viewContainerRef;\r\n        this._templateRef = _templateRef;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ClipboardIfSupportedDirective.prototype.ngOnInit = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        if (this._clipboardService.isSupported) {\r\n            this._viewContainerRef.createEmbeddedView(this._templateRef);\r\n        }\r\n    };\r\n    ClipboardIfSupportedDirective.decorators = [\r\n        { type: Directive, args: [{\r\n                    selector: '[ngxClipboardIfSupported]'\r\n                },] }\r\n    ];\r\n    /** @nocollapse */\r\n    ClipboardIfSupportedDirective.ctorParameters = function () { return [\r\n        { type: ClipboardService },\r\n        { type: ViewContainerRef },\r\n        { type: TemplateRef }\r\n    ]; };\r\n    return ClipboardIfSupportedDirective;\r\n}());\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nvar ClipboardModule = /** @class */ (function () {\r\n    function ClipboardModule() {\r\n    }\r\n    ClipboardModule.decorators = [\r\n        { type: NgModule, args: [{\r\n                    imports: [CommonModule],\r\n                    declarations: [ClipboardDirective, ClipboardIfSupportedDirective],\r\n                    exports: [ClipboardDirective, ClipboardIfSupportedDirective]\r\n                },] }\r\n    ];\r\n    return ClipboardModule;\r\n}());\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\nexport { ClipboardService, ClipboardDirective, ClipboardModule, ClipboardIfSupportedDirective };\n\n//# sourceMappingURL=ngx-clipboard.js.map"],"names":["WINDOW","InjectionToken","window","document","providedIn","factory","undefined","ClipboardService","this","copySubject","Subject","copyResponse$","asObservable","config","prototype","configure","copy","content","isSupported","pushCopyResponse","isSuccess","copyResult","copyFromContent","Object","defineProperty","get","queryCommandSupported","enumerable","configurable","isTargetValid","element","HTMLInputElement","HTMLTextAreaElement","hasAttribute","Error","copyFromInputElement","targetElm","isFocus","selectTarget","re","copyText","clearSelection","isCopySuccessInIE11","error","clipboardData","getData","container","body","tempTextArea","contains","destroy","parentElement","createTempTextArea","appendChild","value","toReturn","cleanUpAfterCopy","removeChild","inputElement","select","setSelectionRange","length","execCommand","focus","getSelection","removeAllRanges","doc","ta","isRTL","documentElement","getAttribute","createElement","style","fontSize","border","padding","margin","position","yPosition","pageYOffset","scrollTop","top","setAttribute","response","next","pushCopyReponse","decorators","type","Injectable","args","ctorParameters","Inject","DOCUMENT","Optional","ngInjectableDef","defineInjectable","inject","token","ClipboardDirective","clipboardSrv","cbOnSuccess","EventEmitter","cbOnError","ngOnInit","ngOnDestroy","onClick","event","handleResult","cbContent","succeeded","copiedContent","assign","successMessage","cbSuccessMsg","emit","Directive","selector","propDecorators","Input","Output","HostListener","ClipboardIfSupportedDirective","_clipboardService","_viewContainerRef","_templateRef","createEmbeddedView","ViewContainerRef","TemplateRef","ClipboardModule","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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"}