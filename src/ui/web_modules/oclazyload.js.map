{"version":3,"file":"oclazyload.js","sources":["../node_modules/oclazyload/dist/ocLazyLoad.js"],"sourcesContent":["/**\n * oclazyload - Load modules on demand (lazy load) with angularJS\n * @version v1.0.10\n * @link https://github.com/ocombe/ocLazyLoad\n * @license MIT\n * @author Olivier Combe <olivier.combe@gmail.com>\n */\n(function (angular, window) {\n    'use strict';\n\n    var regModules = ['ng', 'oc.lazyLoad'],\n        regInvokes = {},\n        regConfigs = [],\n        modulesToLoad = [],\n        // modules to load from angular.module or other sources\n    realModules = [],\n        // real modules called from angular.module\n    recordDeclarations = [],\n        broadcast = angular.noop,\n        runBlocks = {},\n        justLoaded = [];\n\n    var ocLazyLoad = angular.module('oc.lazyLoad', ['ng']);\n\n    ocLazyLoad.provider('$ocLazyLoad', [\"$controllerProvider\", \"$provide\", \"$compileProvider\", \"$filterProvider\", \"$injector\", \"$animateProvider\", function ($controllerProvider, $provide, $compileProvider, $filterProvider, $injector, $animateProvider) {\n        var modules = {},\n            providers = {\n            $controllerProvider: $controllerProvider,\n            $compileProvider: $compileProvider,\n            $filterProvider: $filterProvider,\n            $provide: $provide, // other things (constant, decorator, provider, factory, service)\n            $injector: $injector,\n            $animateProvider: $animateProvider\n        },\n            debug = false,\n            events = false,\n            moduleCache = [],\n            modulePromises = {};\n\n        moduleCache.push = function (value) {\n            if (this.indexOf(value) === -1) {\n                Array.prototype.push.apply(this, arguments);\n            }\n        };\n\n        this.config = function (config) {\n            // If we want to define modules configs\n            if (angular.isDefined(config.modules)) {\n                if (angular.isArray(config.modules)) {\n                    angular.forEach(config.modules, function (moduleConfig) {\n                        modules[moduleConfig.name] = moduleConfig;\n                    });\n                } else {\n                    modules[config.modules.name] = config.modules;\n                }\n            }\n\n            if (angular.isDefined(config.debug)) {\n                debug = config.debug;\n            }\n\n            if (angular.isDefined(config.events)) {\n                events = config.events;\n            }\n        };\n\n        /**\r\n         * Get the list of existing registered modules\r\n         * @param element\r\n         */\n        this._init = function _init(element) {\n            // this is probably useless now because we override angular.bootstrap\n            if (modulesToLoad.length === 0) {\n                var elements = [element],\n                    names = ['ng:app', 'ng-app', 'x-ng-app', 'data-ng-app'],\n                    NG_APP_CLASS_REGEXP = /\\sng[:\\-]app(:\\s*([\\w\\d_]+);?)?\\s/,\n                    append = function append(elm) {\n                    return elm && elements.push(elm);\n                };\n\n                angular.forEach(names, function (name) {\n                    names[name] = true;\n                    append(document.getElementById(name));\n                    name = name.replace(':', '\\\\:');\n                    if (typeof element[0] !== 'undefined' && element[0].querySelectorAll) {\n                        angular.forEach(element[0].querySelectorAll('.' + name), append);\n                        angular.forEach(element[0].querySelectorAll('.' + name + '\\\\:'), append);\n                        angular.forEach(element[0].querySelectorAll('[' + name + ']'), append);\n                    }\n                });\n\n                angular.forEach(elements, function (elm) {\n                    if (modulesToLoad.length === 0) {\n                        var className = ' ' + element.className + ' ';\n                        var match = NG_APP_CLASS_REGEXP.exec(className);\n                        if (match) {\n                            modulesToLoad.push((match[2] || '').replace(/\\s+/g, ','));\n                        } else {\n                            angular.forEach(elm.attributes, function (attr) {\n                                if (modulesToLoad.length === 0 && names[attr.name]) {\n                                    modulesToLoad.push(attr.value);\n                                }\n                            });\n                        }\n                    }\n                });\n            }\n\n            if (modulesToLoad.length === 0 && !((window.jasmine || window.mocha) && angular.isDefined(angular.mock))) {\n                console.error('No module found during bootstrap, unable to init ocLazyLoad. You should always use the ng-app directive or angular.boostrap when you use ocLazyLoad.');\n            }\n\n            var addReg = function addReg(moduleName) {\n                if (regModules.indexOf(moduleName) === -1) {\n                    // register existing modules\n                    regModules.push(moduleName);\n                    var mainModule = angular.module(moduleName);\n\n                    // register existing components (directives, services, ...)\n                    _invokeQueue(null, mainModule._invokeQueue, moduleName);\n                    _invokeQueue(null, mainModule._configBlocks, moduleName); // angular 1.3+\n\n                    angular.forEach(mainModule.requires, addReg);\n                }\n            };\n\n            angular.forEach(modulesToLoad, function (moduleName) {\n                addReg(moduleName);\n            });\n\n            modulesToLoad = []; // reset for next bootstrap\n            recordDeclarations.pop(); // wait for the next lazy load\n        };\n\n        /**\r\n         * Like JSON.stringify but that doesn't throw on circular references\r\n         * @param obj\r\n         */\n        var stringify = function stringify(obj) {\n            try {\n                return JSON.stringify(obj);\n            } catch (e) {\n                var cache = [];\n                return JSON.stringify(obj, function (key, value) {\n                    if (angular.isObject(value) && value !== null) {\n                        if (cache.indexOf(value) !== -1) {\n                            // Circular reference found, discard key\n                            return;\n                        }\n                        // Store value in our collection\n                        cache.push(value);\n                    }\n                    return value;\n                });\n            }\n        };\n\n        var hashCode = function hashCode(str) {\n            var hash = 0,\n                i,\n                chr,\n                len;\n            if (str.length == 0) {\n                return hash;\n            }\n            for (i = 0, len = str.length; i < len; i++) {\n                chr = str.charCodeAt(i);\n                hash = (hash << 5) - hash + chr;\n                hash |= 0; // Convert to 32bit integer\n            }\n            return hash;\n        };\n\n        function _register(providers, registerModules, params) {\n            if (registerModules) {\n                var k,\n                    moduleName,\n                    moduleFn,\n                    tempRunBlocks = [];\n                for (k = registerModules.length - 1; k >= 0; k--) {\n                    moduleName = registerModules[k];\n                    if (!angular.isString(moduleName)) {\n                        moduleName = getModuleName(moduleName);\n                    }\n                    if (!moduleName || justLoaded.indexOf(moduleName) !== -1 || modules[moduleName] && realModules.indexOf(moduleName) === -1) {\n                        continue;\n                    }\n                    // new if not registered\n                    var newModule = regModules.indexOf(moduleName) === -1;\n                    moduleFn = ngModuleFct(moduleName);\n                    if (newModule) {\n                        regModules.push(moduleName);\n                        _register(providers, moduleFn.requires, params);\n                    }\n                    if (moduleFn._runBlocks.length > 0) {\n                        // new run blocks detected! Replace the old ones (if existing)\n                        runBlocks[moduleName] = [];\n                        while (moduleFn._runBlocks.length > 0) {\n                            runBlocks[moduleName].push(moduleFn._runBlocks.shift());\n                        }\n                    }\n                    if (angular.isDefined(runBlocks[moduleName]) && (newModule || params.rerun)) {\n                        tempRunBlocks = tempRunBlocks.concat(runBlocks[moduleName]);\n                    }\n                    _invokeQueue(providers, moduleFn._invokeQueue, moduleName, params.reconfig);\n                    _invokeQueue(providers, moduleFn._configBlocks, moduleName, params.reconfig); // angular 1.3+\n                    broadcast(newModule ? 'ocLazyLoad.moduleLoaded' : 'ocLazyLoad.moduleReloaded', moduleName);\n                    registerModules.pop();\n                    justLoaded.push(moduleName);\n                }\n                // execute the run blocks at the end\n                var instanceInjector = providers.getInstanceInjector();\n                angular.forEach(tempRunBlocks, function (fn) {\n                    instanceInjector.invoke(fn);\n                });\n            }\n        }\n\n        function _registerInvokeList(args, moduleName) {\n            var invokeList = args[2][0],\n                type = args[1],\n                newInvoke = false;\n            if (angular.isUndefined(regInvokes[moduleName])) {\n                regInvokes[moduleName] = {};\n            }\n            if (angular.isUndefined(regInvokes[moduleName][type])) {\n                regInvokes[moduleName][type] = {};\n            }\n            var onInvoke = function onInvoke(invokeName, invoke) {\n                if (!regInvokes[moduleName][type].hasOwnProperty(invokeName)) {\n                    regInvokes[moduleName][type][invokeName] = [];\n                }\n                if (checkHashes(invoke, regInvokes[moduleName][type][invokeName])) {\n                    newInvoke = true;\n                    regInvokes[moduleName][type][invokeName].push(invoke);\n                    broadcast('ocLazyLoad.componentLoaded', [moduleName, type, invokeName]);\n                }\n            };\n\n            function checkHashes(potentialNew, invokes) {\n                var isNew = true,\n                    newHash;\n                if (invokes.length) {\n                    newHash = signature(potentialNew);\n                    angular.forEach(invokes, function (invoke) {\n                        isNew = isNew && signature(invoke) !== newHash;\n                    });\n                }\n                return isNew;\n            }\n\n            function signature(data) {\n                if (angular.isArray(data)) {\n                    // arrays are objects, we need to test for it first\n                    return hashCode(data.toString());\n                } else if (angular.isObject(data)) {\n                    // constants & values for example\n                    return hashCode(stringify(data));\n                } else {\n                    if (angular.isDefined(data) && data !== null) {\n                        return hashCode(data.toString());\n                    } else {\n                        // null & undefined constants\n                        return data;\n                    }\n                }\n            }\n\n            if (angular.isString(invokeList)) {\n                onInvoke(invokeList, args[2][1]);\n            } else if (angular.isObject(invokeList)) {\n                angular.forEach(invokeList, function (invoke, key) {\n                    if (angular.isString(invoke)) {\n                        // decorators for example\n                        onInvoke(invoke, invokeList[1]);\n                    } else {\n                        // components registered as object lists {\"componentName\": function() {}}\n                        onInvoke(key, invoke);\n                    }\n                });\n            } else {\n                return false;\n            }\n            return newInvoke;\n        }\n\n        function _invokeQueue(providers, queue, moduleName, reconfig) {\n            if (!queue) {\n                return;\n            }\n\n            var i, len, args, provider;\n            for (i = 0, len = queue.length; i < len; i++) {\n                args = queue[i];\n                if (angular.isArray(args)) {\n                    if (providers !== null) {\n                        if (providers.hasOwnProperty(args[0])) {\n                            provider = providers[args[0]];\n                        } else {\n                            throw new Error('unsupported provider ' + args[0]);\n                        }\n                    }\n                    var isNew = _registerInvokeList(args, moduleName);\n                    if (args[1] !== 'invoke') {\n                        if (isNew && angular.isDefined(provider)) {\n                            provider[args[1]].apply(provider, args[2]);\n                        }\n                    } else {\n                        // config block\n                        var callInvoke = function callInvoke(fct) {\n                            var invoked = regConfigs.indexOf(moduleName + '-' + fct);\n                            if (invoked === -1 || reconfig) {\n                                if (invoked === -1) {\n                                    regConfigs.push(moduleName + '-' + fct);\n                                }\n                                if (angular.isDefined(provider)) {\n                                    provider[args[1]].apply(provider, args[2]);\n                                }\n                            }\n                        };\n                        if (angular.isFunction(args[2][0])) {\n                            callInvoke(args[2][0]);\n                        } else if (angular.isArray(args[2][0])) {\n                            for (var j = 0, jlen = args[2][0].length; j < jlen; j++) {\n                                if (angular.isFunction(args[2][0][j])) {\n                                    callInvoke(args[2][0][j]);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        function getModuleName(module) {\n            var moduleName = null;\n            if (angular.isString(module)) {\n                moduleName = module;\n            } else if (angular.isObject(module) && module.hasOwnProperty('name') && angular.isString(module.name)) {\n                moduleName = module.name;\n            }\n            return moduleName;\n        }\n\n        function moduleExists(moduleName) {\n            if (!angular.isString(moduleName)) {\n                return false;\n            }\n            try {\n                return ngModuleFct(moduleName);\n            } catch (e) {\n                if (/No module/.test(e) || e.message.indexOf('$injector:nomod') > -1) {\n                    return false;\n                }\n            }\n        }\n\n        this.$get = [\"$log\", \"$rootElement\", \"$rootScope\", \"$cacheFactory\", \"$q\", function ($log, $rootElement, $rootScope, $cacheFactory, $q) {\n            var instanceInjector,\n                filesCache = $cacheFactory('ocLazyLoad');\n\n            if (!debug) {\n                $log = {};\n                $log['error'] = angular.noop;\n                $log['warn'] = angular.noop;\n                $log['info'] = angular.noop;\n            }\n\n            // Make this lazy because when $get() is called the instance injector hasn't been assigned to the rootElement yet\n            providers.getInstanceInjector = function () {\n                return instanceInjector ? instanceInjector : instanceInjector = $rootElement.data('$injector') || angular.injector();\n            };\n\n            broadcast = function broadcast(eventName, params) {\n                if (events) {\n                    $rootScope.$broadcast(eventName, params);\n                }\n                if (debug) {\n                    $log.info(eventName, params);\n                }\n            };\n\n            function reject(e) {\n                var deferred = $q.defer();\n                $log.error(e.message);\n                deferred.reject(e);\n                return deferred.promise;\n            }\n\n            return {\n                _broadcast: broadcast,\n\n                _$log: $log,\n\n                /**\r\n                 * Returns the files cache used by the loaders to store the files currently loading\r\n                 * @returns {*}\r\n                 */\n                _getFilesCache: function getFilesCache() {\n                    return filesCache;\n                },\n\n                /**\r\n                 * Let the service know that it should monitor angular.module because files are loading\r\n                 * @param watch boolean\r\n                 */\n                toggleWatch: function toggleWatch(watch) {\n                    if (watch) {\n                        recordDeclarations.push(true);\n                    } else {\n                        recordDeclarations.pop();\n                    }\n                },\n\n                /**\r\n                 * Let you get a module config object\r\n                 * @param moduleName String the name of the module\r\n                 * @returns {*}\r\n                 */\n                getModuleConfig: function getModuleConfig(moduleName) {\n                    if (!angular.isString(moduleName)) {\n                        throw new Error('You need to give the name of the module to get');\n                    }\n                    if (!modules[moduleName]) {\n                        return null;\n                    }\n                    return angular.copy(modules[moduleName]);\n                },\n\n                /**\r\n                 * Let you define a module config object\r\n                 * @param moduleConfig Object the module config object\r\n                 * @returns {*}\r\n                 */\n                setModuleConfig: function setModuleConfig(moduleConfig) {\n                    if (!angular.isObject(moduleConfig)) {\n                        throw new Error('You need to give the module config object to set');\n                    }\n                    modules[moduleConfig.name] = moduleConfig;\n                    return moduleConfig;\n                },\n\n                /**\r\n                 * Returns the list of loaded modules\r\n                 * @returns {string[]}\r\n                 */\n                getModules: function getModules() {\n                    return regModules;\n                },\n\n                /**\r\n                 * Let you check if a module has been loaded into Angular or not\r\n                 * @param modulesNames String/Object a module name, or a list of module names\r\n                 * @returns {boolean}\r\n                 */\n                isLoaded: function isLoaded(modulesNames) {\n                    var moduleLoaded = function moduleLoaded(module) {\n                        var isLoaded = regModules.indexOf(module) > -1;\n                        if (!isLoaded) {\n                            isLoaded = !!moduleExists(module);\n                        }\n                        return isLoaded;\n                    };\n                    if (angular.isString(modulesNames)) {\n                        modulesNames = [modulesNames];\n                    }\n                    if (angular.isArray(modulesNames)) {\n                        var i, len;\n                        for (i = 0, len = modulesNames.length; i < len; i++) {\n                            if (!moduleLoaded(modulesNames[i])) {\n                                return false;\n                            }\n                        }\n                        return true;\n                    } else {\n                        throw new Error('You need to define the module(s) name(s)');\n                    }\n                },\n\n                /**\r\n                 * Given a module, return its name\r\n                 * @param module\r\n                 * @returns {String}\r\n                 */\n                _getModuleName: getModuleName,\n\n                /**\r\n                 * Returns a module if it exists\r\n                 * @param moduleName\r\n                 * @returns {module}\r\n                 */\n                _getModule: function getModule(moduleName) {\n                    try {\n                        return ngModuleFct(moduleName);\n                    } catch (e) {\n                        // this error message really suxx\n                        if (/No module/.test(e) || e.message.indexOf('$injector:nomod') > -1) {\n                            e.message = 'The module \"' + stringify(moduleName) + '\" that you are trying to load does not exist. ' + e.message;\n                        }\n                        throw e;\n                    }\n                },\n\n                /**\r\n                 * Check if a module exists and returns it if it does\r\n                 * @param moduleName\r\n                 * @returns {boolean}\r\n                 */\n                moduleExists: moduleExists,\n\n                /**\r\n                 * Load the dependencies, and might try to load new files depending on the config\r\n                 * @param moduleName (String or Array of Strings)\r\n                 * @param localParams\r\n                 * @returns {*}\r\n                 * @private\r\n                 */\n                _loadDependencies: function _loadDependencies(moduleName, localParams) {\n                    var loadedModule,\n                        requires,\n                        diff,\n                        promisesList = [],\n                        self = this;\n\n                    moduleName = self._getModuleName(moduleName);\n\n                    if (moduleName === null) {\n                        return $q.when();\n                    } else {\n                        try {\n                            loadedModule = self._getModule(moduleName);\n                        } catch (e) {\n                            return reject(e);\n                        }\n                        // get unloaded requires\n                        requires = self.getRequires(loadedModule);\n                    }\n\n                    angular.forEach(requires, function (requireEntry) {\n                        // If no configuration is provided, try and find one from a previous load.\n                        // If there isn't one, bail and let the normal flow run\n                        if (angular.isString(requireEntry)) {\n                            var config = self.getModuleConfig(requireEntry);\n                            if (config === null) {\n                                moduleCache.push(requireEntry); // We don't know about this module, but something else might, so push it anyway.\n                                return;\n                            }\n                            requireEntry = config;\n                            // ignore the name because it's probably not a real module name\n                            config.name = undefined;\n                        }\n\n                        // Check if this dependency has been loaded previously\n                        if (self.moduleExists(requireEntry.name)) {\n                            // compare against the already loaded module to see if the new definition adds any new files\n                            diff = requireEntry.files.filter(function (n) {\n                                return self.getModuleConfig(requireEntry.name).files.indexOf(n) < 0;\n                            });\n\n                            // If the module was redefined, advise via the console\n                            if (diff.length !== 0) {\n                                self._$log.warn('Module \"', moduleName, '\" attempted to redefine configuration for dependency. \"', requireEntry.name, '\"\\n Additional Files Loaded:', diff);\n                            }\n\n                            // Push everything to the file loader, it will weed out the duplicates.\n                            if (angular.isDefined(self.filesLoader)) {\n                                // if a files loader is defined\n                                promisesList.push(self.filesLoader(requireEntry, localParams).then(function () {\n                                    return self._loadDependencies(requireEntry);\n                                }));\n                            } else {\n                                return reject(new Error('Error: New dependencies need to be loaded from external files (' + requireEntry.files + '), but no loader has been defined.'));\n                            }\n                            return;\n                        } else if (angular.isArray(requireEntry)) {\n                            var files = [];\n                            angular.forEach(requireEntry, function (entry) {\n                                // let's check if the entry is a file name or a config name\n                                var config = self.getModuleConfig(entry);\n                                if (config === null) {\n                                    files.push(entry);\n                                } else if (config.files) {\n                                    files = files.concat(config.files);\n                                }\n                            });\n                            if (files.length > 0) {\n                                requireEntry = {\n                                    files: files\n                                };\n                            }\n                        } else if (angular.isObject(requireEntry)) {\n                            if (requireEntry.hasOwnProperty('name') && requireEntry['name']) {\n                                // The dependency doesn't exist in the module cache and is a new configuration, so store and push it.\n                                self.setModuleConfig(requireEntry);\n                                moduleCache.push(requireEntry['name']);\n                            }\n                        }\n\n                        // Check if the dependency has any files that need to be loaded. If there are, push a new promise to the promise list.\n                        if (angular.isDefined(requireEntry.files) && requireEntry.files.length !== 0) {\n                            if (angular.isDefined(self.filesLoader)) {\n                                // if a files loader is defined\n                                promisesList.push(self.filesLoader(requireEntry, localParams).then(function () {\n                                    return self._loadDependencies(requireEntry);\n                                }));\n                            } else {\n                                return reject(new Error('Error: the module \"' + requireEntry.name + '\" is defined in external files (' + requireEntry.files + '), but no loader has been defined.'));\n                            }\n                        }\n                    });\n\n                    // Create a wrapper promise to watch the promise list and resolve it once everything is done.\n                    return $q.all(promisesList);\n                },\n\n                /**\r\n                 * Inject new modules into Angular\r\n                 * @param moduleName\r\n                 * @param localParams\r\n                 * @param real\r\n                 */\n                inject: function inject(moduleName) {\n                    var localParams = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n                    var real = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];\n\n                    var self = this,\n                        deferred = $q.defer();\n                    if (angular.isDefined(moduleName) && moduleName !== null) {\n                        if (angular.isArray(moduleName)) {\n                            var promisesList = [];\n                            angular.forEach(moduleName, function (module) {\n                                promisesList.push(self.inject(module, localParams, real));\n                            });\n                            return $q.all(promisesList);\n                        } else {\n                            self._addToLoadList(self._getModuleName(moduleName), true, real);\n                        }\n                    }\n                    if (modulesToLoad.length > 0) {\n                        var res = modulesToLoad.slice(); // clean copy\n                        var loadNext = function loadNext(moduleName) {\n                            moduleCache.push(moduleName);\n                            modulePromises[moduleName] = deferred.promise;\n                            self._loadDependencies(moduleName, localParams).then(function success() {\n                                try {\n                                    justLoaded = [];\n                                    _register(providers, moduleCache, localParams);\n                                } catch (e) {\n                                    self._$log.error(e.message);\n                                    deferred.reject(e);\n                                    return;\n                                }\n\n                                if (modulesToLoad.length > 0) {\n                                    loadNext(modulesToLoad.shift()); // load the next in list\n                                } else {\n                                        deferred.resolve(res); // everything has been loaded, resolve\n                                    }\n                            }, function error(err) {\n                                deferred.reject(err);\n                            });\n                        };\n\n                        // load the first in list\n                        loadNext(modulesToLoad.shift());\n                    } else if (localParams && localParams.name && modulePromises[localParams.name]) {\n                        return modulePromises[localParams.name];\n                    } else {\n                        deferred.resolve();\n                    }\n                    return deferred.promise;\n                },\n\n                /**\r\n                 * Get the list of required modules/services/... for this module\r\n                 * @param module\r\n                 * @returns {Array}\r\n                 */\n                getRequires: function getRequires(module) {\n                    var requires = [];\n                    angular.forEach(module.requires, function (requireModule) {\n                        if (regModules.indexOf(requireModule) === -1) {\n                            requires.push(requireModule);\n                        }\n                    });\n                    return requires;\n                },\n\n                /**\r\n                 * Invoke the new modules & component by their providers\r\n                 * @param providers\r\n                 * @param queue\r\n                 * @param moduleName\r\n                 * @param reconfig\r\n                 * @private\r\n                 */\n                _invokeQueue: _invokeQueue,\n\n                /**\r\n                 * Check if a module has been invoked and registers it if not\r\n                 * @param args\r\n                 * @param moduleName\r\n                 * @returns {boolean} is new\r\n                 */\n                _registerInvokeList: _registerInvokeList,\n\n                /**\r\n                 * Register a new module and loads it, executing the run/config blocks if needed\r\n                 * @param providers\r\n                 * @param registerModules\r\n                 * @param params\r\n                 * @private\r\n                 */\n                _register: _register,\n\n                /**\r\n                 * Add a module name to the list of modules that will be loaded in the next inject\r\n                 * @param name\r\n                 * @param force\r\n                 * @private\r\n                 */\n                _addToLoadList: _addToLoadList,\n\n                /**\r\n                 * Unregister modules (you shouldn't have to use this)\r\n                 * @param modules\r\n                 */\n                _unregister: function _unregister(modules) {\n                    if (angular.isDefined(modules)) {\n                        if (angular.isArray(modules)) {\n                            angular.forEach(modules, function (module) {\n                                regInvokes[module] = undefined;\n                            });\n                        }\n                    }\n                }\n            };\n        }];\n\n        // Let's get the list of loaded modules & components\n        this._init(angular.element(window.document));\n    }]);\n\n    var bootstrapFct = angular.bootstrap;\n    angular.bootstrap = function (element, modules, config) {\n        // Clean state from previous bootstrap\n        regModules = ['ng', 'oc.lazyLoad'];\n        regInvokes = {};\n        regConfigs = [];\n        modulesToLoad = [];\n        realModules = [];\n        recordDeclarations = [];\n        broadcast = angular.noop;\n        runBlocks = {};\n        justLoaded = [];\n        // we use slice to make a clean copy\n        angular.forEach(modules.slice(), function (module) {\n            _addToLoadList(module, true, true);\n        });\n        return bootstrapFct(element, modules, config);\n    };\n\n    var _addToLoadList = function _addToLoadList(name, force, real) {\n        if ((recordDeclarations.length > 0 || force) && angular.isString(name) && modulesToLoad.indexOf(name) === -1) {\n            modulesToLoad.push(name);\n            if (real) {\n                realModules.push(name);\n            }\n        }\n    };\n\n    var ngModuleFct = angular.module;\n    angular.module = function (name, requires, configFn) {\n        _addToLoadList(name, false, true);\n        return ngModuleFct(name, requires, configFn);\n    };\n\n    // CommonJS package manager support:\n    if (typeof module !== 'undefined' && typeof exports !== 'undefined' && module.exports === exports) {\n        module.exports = 'oc.lazyLoad';\n    }\n})(angular, window);\n(function (angular) {\n    'use strict';\n\n    angular.module('oc.lazyLoad').directive('ocLazyLoad', [\"$ocLazyLoad\", \"$compile\", \"$animate\", \"$parse\", \"$timeout\", function ($ocLazyLoad, $compile, $animate, $parse, $timeout) {\n        return {\n            restrict: 'A',\n            terminal: true,\n            priority: 1000,\n            compile: function compile(element, attrs) {\n                // we store the content and remove it before compilation\n                var content = element[0].innerHTML;\n                element.html('');\n\n                return function ($scope, $element, $attr) {\n                    var model = $parse($attr.ocLazyLoad);\n                    $scope.$watch(function () {\n                        return model($scope) || $attr.ocLazyLoad; // it can be a module name (string), an object, an array, or a scope reference to any of this\n                    }, function (moduleName) {\n                        if (angular.isDefined(moduleName)) {\n                            $ocLazyLoad.load(moduleName).then(function () {\n                                // Attach element contents to DOM and then compile them.\n                                // This prevents an issue where IE invalidates saved element objects (HTMLCollections)\n                                // of the compiled contents when attaching to the parent DOM.\n                                $animate.enter(content, $element);\n                                // get the new content & compile it\n                                $compile($element.contents())($scope);\n                            });\n                        }\n                    }, true);\n                };\n            }\n        };\n    }]);\n})(angular);\n(function (angular) {\n    'use strict';\n\n    angular.module('oc.lazyLoad').config([\"$provide\", function ($provide) {\n        $provide.decorator('$ocLazyLoad', [\"$delegate\", \"$q\", \"$window\", \"$interval\", function ($delegate, $q, $window, $interval) {\n            var uaCssChecked = false,\n                useCssLoadPatch = false,\n                anchor = $window.document.getElementsByTagName('head')[0] || $window.document.getElementsByTagName('body')[0];\n\n            /**\r\n             * Load a js/css file\r\n             * @param type\r\n             * @param path\r\n             * @param params\r\n             * @returns promise\r\n             */\n            $delegate.buildElement = function buildElement(type, path, params) {\n                var deferred = $q.defer(),\n                    el,\n                    loaded,\n                    filesCache = $delegate._getFilesCache(),\n                    cacheBuster = function cacheBuster(url) {\n                    var dc = new Date().getTime();\n                    if (url.indexOf('?') >= 0) {\n                        if (url.substring(0, url.length - 1) === '&') {\n                            return url + '_dc=' + dc;\n                        }\n                        return url + '&_dc=' + dc;\n                    } else {\n                        return url + '?_dc=' + dc;\n                    }\n                };\n\n                // Store the promise early so the file load can be detected by other parallel lazy loads\n                // (ie: multiple routes on one page) a 'true' value isn't sufficient\n                // as it causes false positive load results.\n                if (angular.isUndefined(filesCache.get(path))) {\n                    filesCache.put(path, deferred.promise);\n                }\n\n                // Switch in case more content types are added later\n                switch (type) {\n                    case 'css':\n                        el = $window.document.createElement('link');\n                        el.type = 'text/css';\n                        el.rel = 'stylesheet';\n                        el.href = params.cache === false ? cacheBuster(path) : path;\n                        break;\n                    case 'js':\n                        el = $window.document.createElement('script');\n                        el.src = params.cache === false ? cacheBuster(path) : path;\n                        break;\n                    default:\n                        filesCache.remove(path);\n                        deferred.reject(new Error('Requested type \"' + type + '\" is not known. Could not inject \"' + path + '\"'));\n                        break;\n                }\n                el.onload = el['onreadystatechange'] = function (e) {\n                    if (el['readyState'] && !/^c|loade/.test(el['readyState']) || loaded) return;\n                    el.onload = el['onreadystatechange'] = null;\n                    loaded = 1;\n                    $delegate._broadcast('ocLazyLoad.fileLoaded', path);\n                    deferred.resolve(el);\n                };\n                el.onerror = function () {\n                    filesCache.remove(path);\n                    deferred.reject(new Error('Unable to load ' + path));\n                };\n                el.async = params.serie ? 0 : 1;\n\n                var insertBeforeElem = anchor.lastChild;\n                if (params.insertBefore) {\n                    var element = angular.element(angular.isDefined(window.jQuery) ? params.insertBefore : document.querySelector(params.insertBefore));\n                    if (element && element.length > 0) {\n                        insertBeforeElem = element[0];\n                    }\n                }\n                insertBeforeElem.parentNode.insertBefore(el, insertBeforeElem);\n\n                /*\r\n                 The event load or readystatechange doesn't fire in:\r\n                 - PhantomJS 1.9 (headless webkit browser)\r\n                 - iOS < 6       (default mobile browser)\r\n                 - Android < 4.4 (default mobile browser)\r\n                 - Safari < 6    (desktop browser)\r\n                 */\n                if (type == 'css') {\n                    if (!uaCssChecked) {\n                        var ua = $window.navigator.userAgent.toLowerCase();\n\n                        if (ua.indexOf('phantomjs/1.9') > -1) {\n                            // PhantomJS ~1.9\n                            useCssLoadPatch = true;\n                        } else if (/iP(hone|od|ad)/.test($window.navigator.platform)) {\n                            // iOS < 6\n                            var v = $window.navigator.appVersion.match(/OS (\\d+)_(\\d+)_?(\\d+)?/);\n                            var iOSVersion = parseFloat([parseInt(v[1], 10), parseInt(v[2], 10), parseInt(v[3] || 0, 10)].join('.'));\n                            useCssLoadPatch = iOSVersion < 6;\n                        } else if (ua.indexOf('android') > -1) {\n                            // Android < 4.4\n                            var androidVersion = parseFloat(ua.slice(ua.indexOf('android') + 8));\n                            useCssLoadPatch = androidVersion < 4.4;\n                        } else if (ua.indexOf('safari') > -1) {\n                            // Safari < 6\n                            var versionMatch = ua.match(/version\\/([\\.\\d]+)/i);\n                            useCssLoadPatch = versionMatch && versionMatch[1] && parseFloat(versionMatch[1]) < 6;\n                        }\n                    }\n\n                    if (useCssLoadPatch) {\n                        var tries = 1000; // * 20 = 20000 miliseconds\n                        var interval = $interval(function () {\n                            try {\n                                el.sheet.cssRules;\n                                $interval.cancel(interval);\n                                el.onload();\n                            } catch (e) {\n                                if (--tries <= 0) {\n                                    el.onerror();\n                                }\n                            }\n                        }, 20);\n                    }\n                }\n\n                return deferred.promise;\n            };\n\n            return $delegate;\n        }]);\n    }]);\n})(angular);\n(function (angular) {\n    'use strict';\n\n    angular.module('oc.lazyLoad').config([\"$provide\", function ($provide) {\n        $provide.decorator('$ocLazyLoad', [\"$delegate\", \"$q\", function ($delegate, $q) {\n            /**\r\n             * The function that loads new files\r\n             * @param config\r\n             * @param params\r\n             * @returns {*}\r\n             */\n            $delegate.filesLoader = function filesLoader(config) {\n                var params = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n                var cssFiles = [],\n                    templatesFiles = [],\n                    jsFiles = [],\n                    promises = [],\n                    cachePromise = null,\n                    filesCache = $delegate._getFilesCache();\n\n                $delegate.toggleWatch(true); // start watching angular.module calls\n\n                angular.extend(params, config);\n\n                var pushFile = function pushFile(path) {\n                    var file_type = null,\n                        m;\n                    if (angular.isObject(path)) {\n                        file_type = path.type;\n                        path = path.path;\n                    }\n                    cachePromise = filesCache.get(path);\n                    if (angular.isUndefined(cachePromise) || params.cache === false) {\n\n                        // always check for requirejs syntax just in case\n                        if ((m = /^(css|less|html|htm|js)?(?=!)/.exec(path)) !== null) {\n                            // Detect file type using preceding type declaration (ala requireJS)\n                            file_type = m[1];\n                            path = path.substr(m[1].length + 1, path.length); // Strip the type from the path\n                        }\n\n                        if (!file_type) {\n                            if ((m = /[.](css|less|html|htm|js)?((\\?|#).*)?$/.exec(path)) !== null) {\n                                // Detect file type via file extension\n                                file_type = m[1];\n                            } else if (!$delegate.jsLoader.hasOwnProperty('ocLazyLoadLoader') && $delegate.jsLoader.hasOwnProperty('requirejs')) {\n                                // requirejs\n                                file_type = 'js';\n                            } else {\n                                $delegate._$log.error('File type could not be determined. ' + path);\n                                return;\n                            }\n                        }\n\n                        if ((file_type === 'css' || file_type === 'less') && cssFiles.indexOf(path) === -1) {\n                            cssFiles.push(path);\n                        } else if ((file_type === 'html' || file_type === 'htm') && templatesFiles.indexOf(path) === -1) {\n                            templatesFiles.push(path);\n                        } else if (file_type === 'js' || jsFiles.indexOf(path) === -1) {\n                            jsFiles.push(path);\n                        } else {\n                            $delegate._$log.error('File type is not valid. ' + path);\n                        }\n                    } else if (cachePromise) {\n                        promises.push(cachePromise);\n                    }\n                };\n\n                if (params.serie) {\n                    pushFile(params.files.shift());\n                } else {\n                    angular.forEach(params.files, function (path) {\n                        pushFile(path);\n                    });\n                }\n\n                if (cssFiles.length > 0) {\n                    var cssDeferred = $q.defer();\n                    $delegate.cssLoader(cssFiles, function (err) {\n                        if (angular.isDefined(err) && $delegate.cssLoader.hasOwnProperty('ocLazyLoadLoader')) {\n                            $delegate._$log.error(err);\n                            cssDeferred.reject(err);\n                        } else {\n                            cssDeferred.resolve();\n                        }\n                    }, params);\n                    promises.push(cssDeferred.promise);\n                }\n\n                if (templatesFiles.length > 0) {\n                    var templatesDeferred = $q.defer();\n                    $delegate.templatesLoader(templatesFiles, function (err) {\n                        if (angular.isDefined(err) && $delegate.templatesLoader.hasOwnProperty('ocLazyLoadLoader')) {\n                            $delegate._$log.error(err);\n                            templatesDeferred.reject(err);\n                        } else {\n                            templatesDeferred.resolve();\n                        }\n                    }, params);\n                    promises.push(templatesDeferred.promise);\n                }\n\n                if (jsFiles.length > 0) {\n                    var jsDeferred = $q.defer();\n                    $delegate.jsLoader(jsFiles, function (err) {\n                        if (angular.isDefined(err) && ($delegate.jsLoader.hasOwnProperty(\"ocLazyLoadLoader\") || $delegate.jsLoader.hasOwnProperty(\"requirejs\"))) {\n                            $delegate._$log.error(err);\n                            jsDeferred.reject(err);\n                        } else {\n                            jsDeferred.resolve();\n                        }\n                    }, params);\n                    promises.push(jsDeferred.promise);\n                }\n\n                if (promises.length === 0) {\n                    var deferred = $q.defer(),\n                        err = \"Error: no file to load has been found, if you're trying to load an existing module you should use the 'inject' method instead of 'load'.\";\n                    $delegate._$log.error(err);\n                    deferred.reject(err);\n                    return deferred.promise;\n                } else if (params.serie && params.files.length > 0) {\n                    return $q.all(promises).then(function () {\n                        return $delegate.filesLoader(config, params);\n                    });\n                } else {\n                    return $q.all(promises)['finally'](function (res) {\n                        $delegate.toggleWatch(false); // stop watching angular.module calls\n                        return res;\n                    });\n                }\n            };\n\n            /**\r\n             * Load a module or a list of modules into Angular\r\n             * @param module Mixed the name of a predefined module config object, or a module config object, or an array of either\r\n             * @param params Object optional parameters\r\n             * @returns promise\r\n             */\n            $delegate.load = function (originalModule) {\n                var originalParams = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n                var self = this,\n                    config = null,\n                    deferredList = [],\n                    deferred = $q.defer(),\n                    errText;\n\n                // clean copy\n                var module = angular.copy(originalModule);\n                var params = angular.copy(originalParams);\n\n                // If module is an array, break it down\n                if (angular.isArray(module)) {\n                    // Resubmit each entry as a single module\n                    angular.forEach(module, function (m) {\n                        deferredList.push(self.load(m, params));\n                    });\n\n                    // Resolve the promise once everything has loaded\n                    $q.all(deferredList).then(function (res) {\n                        deferred.resolve(res);\n                    }, function (err) {\n                        deferred.reject(err);\n                    });\n\n                    return deferred.promise;\n                }\n\n                // Get or Set a configuration depending on what was passed in\n                if (angular.isString(module)) {\n                    config = self.getModuleConfig(module);\n                    if (!config) {\n                        config = {\n                            files: [module]\n                        };\n                    }\n                } else if (angular.isObject(module)) {\n                    // case {type: 'js', path: lazyLoadUrl + 'testModule.fakejs'}\n                    if (angular.isDefined(module.path) && angular.isDefined(module.type)) {\n                        config = {\n                            files: [module]\n                        };\n                    } else {\n                        config = self.setModuleConfig(module);\n                    }\n                }\n\n                if (config === null) {\n                    var moduleName = self._getModuleName(module);\n                    errText = 'Module \"' + (moduleName || 'unknown') + '\" is not configured, cannot load.';\n                    $delegate._$log.error(errText);\n                    deferred.reject(new Error(errText));\n                    return deferred.promise;\n                } else {\n                    // deprecated\n                    if (angular.isDefined(config.template)) {\n                        if (angular.isUndefined(config.files)) {\n                            config.files = [];\n                        }\n                        if (angular.isString(config.template)) {\n                            config.files.push(config.template);\n                        } else if (angular.isArray(config.template)) {\n                            config.files.concat(config.template);\n                        }\n                    }\n                }\n\n                var localParams = angular.extend({}, params, config);\n\n                // if someone used an external loader and called the load function with just the module name\n                if (angular.isUndefined(config.files) && angular.isDefined(config.name) && $delegate.moduleExists(config.name)) {\n                    return $delegate.inject(config.name, localParams, true);\n                }\n\n                $delegate.filesLoader(config, localParams).then(function () {\n                    $delegate.inject(null, localParams).then(function (res) {\n                        deferred.resolve(res);\n                    }, function (err) {\n                        deferred.reject(err);\n                    });\n                }, function (err) {\n                    deferred.reject(err);\n                });\n\n                return deferred.promise;\n            };\n\n            // return the patched service\n            return $delegate;\n        }]);\n    }]);\n})(angular);\n(function (angular) {\n    'use strict';\n\n    angular.module('oc.lazyLoad').config([\"$provide\", function ($provide) {\n        $provide.decorator('$ocLazyLoad', [\"$delegate\", \"$q\", function ($delegate, $q) {\n            /**\r\n             * cssLoader function\r\n             * @type Function\r\n             * @param paths array list of css files to load\r\n             * @param callback to call when everything is loaded. We use a callback and not a promise\r\n             * @param params object config parameters\r\n             * because the user can overwrite cssLoader and it will probably not use promises :(\r\n             */\n            $delegate.cssLoader = function (paths, callback, params) {\n                var promises = [];\n                angular.forEach(paths, function (path) {\n                    promises.push($delegate.buildElement('css', path, params));\n                });\n                $q.all(promises).then(function () {\n                    callback();\n                }, function (err) {\n                    callback(err);\n                });\n            };\n            $delegate.cssLoader.ocLazyLoadLoader = true;\n\n            return $delegate;\n        }]);\n    }]);\n})(angular);\n(function (angular) {\n    'use strict';\n\n    angular.module('oc.lazyLoad').config([\"$provide\", function ($provide) {\n        $provide.decorator('$ocLazyLoad', [\"$delegate\", \"$q\", function ($delegate, $q) {\n            /**\r\n             * jsLoader function\r\n             * @type Function\r\n             * @param paths array list of js files to load\r\n             * @param callback to call when everything is loaded. We use a callback and not a promise\r\n             * @param params object config parameters\r\n             * because the user can overwrite jsLoader and it will probably not use promises :(\r\n             */\n            $delegate.jsLoader = function (paths, callback, params) {\n                var promises = [];\n                angular.forEach(paths, function (path) {\n                    promises.push($delegate.buildElement('js', path, params));\n                });\n                $q.all(promises).then(function () {\n                    callback();\n                }, function (err) {\n                    callback(err);\n                });\n            };\n            $delegate.jsLoader.ocLazyLoadLoader = true;\n\n            return $delegate;\n        }]);\n    }]);\n})(angular);\n(function (angular) {\n    'use strict';\n\n    angular.module('oc.lazyLoad').config([\"$provide\", function ($provide) {\n        $provide.decorator('$ocLazyLoad', [\"$delegate\", \"$templateCache\", \"$q\", \"$http\", function ($delegate, $templateCache, $q, $http) {\n            /**\r\n             * templatesLoader function\r\n             * @type Function\r\n             * @param paths array list of css files to load\r\n             * @param callback to call when everything is loaded. We use a callback and not a promise\r\n             * @param params object config parameters for $http\r\n             * because the user can overwrite templatesLoader and it will probably not use promises :(\r\n             */\n            $delegate.templatesLoader = function (paths, callback, params) {\n                var promises = [],\n                    filesCache = $delegate._getFilesCache();\n\n                angular.forEach(paths, function (url) {\n                    var deferred = $q.defer();\n                    promises.push(deferred.promise);\n                    $http.get(url, params).then(function (response) {\n                        var data = response.data;\n                        if (angular.isString(data) && data.length > 0) {\n                            angular.forEach(angular.element(data), function (node) {\n                                if (node.nodeName === 'SCRIPT' && node.type === 'text/ng-template') {\n                                    $templateCache.put(node.id, node.innerHTML);\n                                }\n                            });\n                        }\n                        if (angular.isUndefined(filesCache.get(url))) {\n                            filesCache.put(url, true);\n                        }\n                        deferred.resolve();\n                    })['catch'](function (response) {\n                        deferred.reject(new Error('Unable to load template file \"' + url + '\": ' + response.data));\n                    });\n                });\n                return $q.all(promises).then(function () {\n                    callback();\n                }, function (err) {\n                    callback(err);\n                });\n            };\n            $delegate.templatesLoader.ocLazyLoadLoader = true;\n\n            return $delegate;\n        }]);\n    }]);\n})(angular);\n// Array.indexOf polyfill for IE8\nif (!Array.prototype.indexOf) {\n        Array.prototype.indexOf = function (searchElement, fromIndex) {\n                var k;\n\n                // 1. Let O be the result of calling ToObject passing\n                //    the this value as the argument.\n                if (this == null) {\n                        throw new TypeError('\"this\" is null or not defined');\n                }\n\n                var O = Object(this);\n\n                // 2. Let lenValue be the result of calling the Get\n                //    internal method of O with the argument \"length\".\n                // 3. Let len be ToUint32(lenValue).\n                var len = O.length >>> 0;\n\n                // 4. If len is 0, return -1.\n                if (len === 0) {\n                        return -1;\n                }\n\n                // 5. If argument fromIndex was passed let n be\n                //    ToInteger(fromIndex); else let n be 0.\n                var n = +fromIndex || 0;\n\n                if (Math.abs(n) === Infinity) {\n                        n = 0;\n                }\n\n                // 6. If n >= len, return -1.\n                if (n >= len) {\n                        return -1;\n                }\n\n                // 7. If n >= 0, then Let k be n.\n                // 8. Else, n<0, Let k be len - abs(n).\n                //    If k is less than 0, then let k be 0.\n                k = Math.max(n >= 0 ? n : len - Math.abs(n), 0);\n\n                // 9. Repeat, while k < len\n                while (k < len) {\n                        // a. Let Pk be ToString(k).\n                        //   This is implicit for LHS operands of the in operator\n                        // b. Let kPresent be the result of calling the\n                        //    HasProperty internal method of O with argument Pk.\n                        //   This step can be combined with c\n                        // c. If kPresent is true, then\n                        //    i.  Let elementK be the result of calling the Get\n                        //        internal method of O with the argument ToString(k).\n                        //   ii.  Let same be the result of applying the\n                        //        Strict Equality Comparison Algorithm to\n                        //        searchElement and elementK.\n                        //  iii.  If same is true, return k.\n                        if (k in O && O[k] === searchElement) {\n                                return k;\n                        }\n                        k++;\n                }\n                return -1;\n        };\n}"],"names":["angular","window","regModules","regInvokes","regConfigs","modulesToLoad","realModules","recordDeclarations","broadcast","noop","runBlocks","justLoaded","module","provider","$controllerProvider","$provide","$compileProvider","$filterProvider","$injector","$animateProvider","modules","providers","debug","events","moduleCache","modulePromises","push","value","this","indexOf","Array","prototype","apply","arguments","config","isDefined","isArray","forEach","moduleConfig","name","_init","element","length","elements","names","NG_APP_CLASS_REGEXP","append","elm","document","getElementById","replace","querySelectorAll","className","match","exec","attributes","attr","jasmine","mocha","mock","console","error","moduleName","addReg","mainModule","_invokeQueue","_configBlocks","requires","pop","stringify","obj","JSON","e","cache","key","isObject","hashCode","str","i","len","hash","charCodeAt","_register","registerModules","params","k","moduleFn","tempRunBlocks","isString","getModuleName","newModule","ngModuleFct","_runBlocks","shift","rerun","concat","reconfig","instanceInjector","getInstanceInjector","fn","invoke","_registerInvokeList","args","invokeList","type","newInvoke","isUndefined","onInvoke","invokeName","hasOwnProperty","potentialNew","invokes","newHash","isNew","signature","checkHashes","data","toString","queue","Error","callInvoke","fct","invoked","isFunction","j","jlen","moduleExists","test","message","$get","$log","$rootElement","$rootScope","$cacheFactory","$q","filesCache","reject","deferred","defer","promise","injector","_broadcast","eventName","$broadcast","info","_$log","_getFilesCache","toggleWatch","watch","getModuleConfig","copy","setModuleConfig","getModules","isLoaded","modulesNames","moduleLoaded","_getModuleName","_getModule","_loadDependencies","localParams","loadedModule","diff","promisesList","self","when","getRequires","requireEntry","undefined","files","filter","n","warn","filesLoader","then","entry","all","inject","real","_addToLoadList","res","slice","loadNext","resolve","err","requireModule","_unregister","bootstrapFct","bootstrap","force","configFn","exports","directive","$ocLazyLoad","$compile","$animate","$parse","$timeout","restrict","terminal","priority","compile","attrs","content","innerHTML","html","$scope","$element","$attr","model","ocLazyLoad","$watch","load","enter","contents","decorator","$delegate","$window","$interval","useCssLoadPatch","anchor","getElementsByTagName","buildElement","path","el","loaded","cacheBuster","url","dc","Date","getTime","substring","get","put","createElement","rel","href","src","remove","onload","onerror","async","serie","insertBeforeElem","lastChild","insertBefore","jQuery","querySelector","parentNode","ua","navigator","userAgent","toLowerCase","platform","v","appVersion","iOSVersion","parseFloat","parseInt","join","androidVersion","versionMatch","tries","interval","sheet","cssRules","cancel","cssFiles","templatesFiles","jsFiles","promises","cachePromise","extend","pushFile","m","file_type","substr","jsLoader","cssDeferred","cssLoader","templatesDeferred","templatesLoader","jsDeferred","originalModule","errText","originalParams","deferredList","template","paths","callback","ocLazyLoadLoader","$templateCache","$http","response","node","nodeName","id","searchElement","fromIndex","TypeError","O","Object","Math","abs","Infinity","max"],"mappings":"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"}