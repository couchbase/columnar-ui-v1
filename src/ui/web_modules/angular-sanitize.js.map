{"version":3,"file":"angular-sanitize.js","sources":["../node_modules/angular-sanitize/angular-sanitize.js","../node_modules/angular-sanitize/index.js"],"sourcesContent":["/**\n * @license AngularJS v1.6.9\n * (c) 2010-2018 Google, Inc. http://angularjs.org\n * License: MIT\n */\n(function(window, angular) {'use strict';\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *     Any commits to this file should be reviewed with security in mind.  *\n *   Changes to this file can potentially create security vulnerabilities. *\n *          An approval from 2 Core members with history of modifying      *\n *                         this file is required.                          *\n *                                                                         *\n *  Does the change somehow allow for arbitrary javascript to be executed? *\n *    Or allows for someone to change the prototype of built-in objects?   *\n *     Or gives undesired access to variables likes document or window?    *\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n\nvar $sanitizeMinErr = angular.$$minErr('$sanitize');\nvar bind;\nvar extend;\nvar forEach;\nvar isDefined;\nvar lowercase;\nvar noop;\nvar nodeContains;\nvar htmlParser;\nvar htmlSanitizeWriter;\n\n/**\n * @ngdoc module\n * @name ngSanitize\n * @description\n *\n * The `ngSanitize` module provides functionality to sanitize HTML.\n *\n * See {@link ngSanitize.$sanitize `$sanitize`} for usage.\n */\n\n/**\n * @ngdoc service\n * @name $sanitize\n * @kind function\n *\n * @description\n *   Sanitizes an html string by stripping all potentially dangerous tokens.\n *\n *   The input is sanitized by parsing the HTML into tokens. All safe tokens (from a whitelist) are\n *   then serialized back to properly escaped html string. This means that no unsafe input can make\n *   it into the returned string.\n *\n *   The whitelist for URL sanitization of attribute values is configured using the functions\n *   `aHrefSanitizationWhitelist` and `imgSrcSanitizationWhitelist` of {@link ng.$compileProvider\n *   `$compileProvider`}.\n *\n *   The input may also contain SVG markup if this is enabled via {@link $sanitizeProvider}.\n *\n * @param {string} html HTML input.\n * @returns {string} Sanitized HTML.\n *\n * @example\n   <example module=\"sanitizeExample\" deps=\"angular-sanitize.js\" name=\"sanitize-service\">\n   <file name=\"index.html\">\n     <script>\n         angular.module('sanitizeExample', ['ngSanitize'])\n           .controller('ExampleController', ['$scope', '$sce', function($scope, $sce) {\n             $scope.snippet =\n               '<p style=\"color:blue\">an html\\n' +\n               '<em onmouseover=\"this.textContent=\\'PWN3D!\\'\">click here</em>\\n' +\n               'snippet</p>';\n             $scope.deliberatelyTrustDangerousSnippet = function() {\n               return $sce.trustAsHtml($scope.snippet);\n             };\n           }]);\n     </script>\n     <div ng-controller=\"ExampleController\">\n        Snippet: <textarea ng-model=\"snippet\" cols=\"60\" rows=\"3\"></textarea>\n       <table>\n         <tr>\n           <td>Directive</td>\n           <td>How</td>\n           <td>Source</td>\n           <td>Rendered</td>\n         </tr>\n         <tr id=\"bind-html-with-sanitize\">\n           <td>ng-bind-html</td>\n           <td>Automatically uses $sanitize</td>\n           <td><pre>&lt;div ng-bind-html=\"snippet\"&gt;<br/>&lt;/div&gt;</pre></td>\n           <td><div ng-bind-html=\"snippet\"></div></td>\n         </tr>\n         <tr id=\"bind-html-with-trust\">\n           <td>ng-bind-html</td>\n           <td>Bypass $sanitize by explicitly trusting the dangerous value</td>\n           <td>\n           <pre>&lt;div ng-bind-html=\"deliberatelyTrustDangerousSnippet()\"&gt;\n&lt;/div&gt;</pre>\n           </td>\n           <td><div ng-bind-html=\"deliberatelyTrustDangerousSnippet()\"></div></td>\n         </tr>\n         <tr id=\"bind-default\">\n           <td>ng-bind</td>\n           <td>Automatically escapes</td>\n           <td><pre>&lt;div ng-bind=\"snippet\"&gt;<br/>&lt;/div&gt;</pre></td>\n           <td><div ng-bind=\"snippet\"></div></td>\n         </tr>\n       </table>\n       </div>\n   </file>\n   <file name=\"protractor.js\" type=\"protractor\">\n     it('should sanitize the html snippet by default', function() {\n       expect(element(by.css('#bind-html-with-sanitize div')).getAttribute('innerHTML')).\n         toBe('<p>an html\\n<em>click here</em>\\nsnippet</p>');\n     });\n\n     it('should inline raw snippet if bound to a trusted value', function() {\n       expect(element(by.css('#bind-html-with-trust div')).getAttribute('innerHTML')).\n         toBe(\"<p style=\\\"color:blue\\\">an html\\n\" +\n              \"<em onmouseover=\\\"this.textContent='PWN3D!'\\\">click here</em>\\n\" +\n              \"snippet</p>\");\n     });\n\n     it('should escape snippet without any filter', function() {\n       expect(element(by.css('#bind-default div')).getAttribute('innerHTML')).\n         toBe(\"&lt;p style=\\\"color:blue\\\"&gt;an html\\n\" +\n              \"&lt;em onmouseover=\\\"this.textContent='PWN3D!'\\\"&gt;click here&lt;/em&gt;\\n\" +\n              \"snippet&lt;/p&gt;\");\n     });\n\n     it('should update', function() {\n       element(by.model('snippet')).clear();\n       element(by.model('snippet')).sendKeys('new <b onclick=\"alert(1)\">text</b>');\n       expect(element(by.css('#bind-html-with-sanitize div')).getAttribute('innerHTML')).\n         toBe('new <b>text</b>');\n       expect(element(by.css('#bind-html-with-trust div')).getAttribute('innerHTML')).toBe(\n         'new <b onclick=\"alert(1)\">text</b>');\n       expect(element(by.css('#bind-default div')).getAttribute('innerHTML')).toBe(\n         \"new &lt;b onclick=\\\"alert(1)\\\"&gt;text&lt;/b&gt;\");\n     });\n   </file>\n   </example>\n */\n\n\n/**\n * @ngdoc provider\n * @name $sanitizeProvider\n * @this\n *\n * @description\n * Creates and configures {@link $sanitize} instance.\n */\nfunction $SanitizeProvider() {\n  var svgEnabled = false;\n\n  this.$get = ['$$sanitizeUri', function($$sanitizeUri) {\n    if (svgEnabled) {\n      extend(validElements, svgElements);\n    }\n    return function(html) {\n      var buf = [];\n      htmlParser(html, htmlSanitizeWriter(buf, function(uri, isImage) {\n        return !/^unsafe:/.test($$sanitizeUri(uri, isImage));\n      }));\n      return buf.join('');\n    };\n  }];\n\n\n  /**\n   * @ngdoc method\n   * @name $sanitizeProvider#enableSvg\n   * @kind function\n   *\n   * @description\n   * Enables a subset of svg to be supported by the sanitizer.\n   *\n   * <div class=\"alert alert-warning\">\n   *   <p>By enabling this setting without taking other precautions, you might expose your\n   *   application to click-hijacking attacks. In these attacks, sanitized svg elements could be positioned\n   *   outside of the containing element and be rendered over other elements on the page (e.g. a login\n   *   link). Such behavior can then result in phishing incidents.</p>\n   *\n   *   <p>To protect against these, explicitly setup `overflow: hidden` css rule for all potential svg\n   *   tags within the sanitized content:</p>\n   *\n   *   <br>\n   *\n   *   <pre><code>\n   *   .rootOfTheIncludedContent svg {\n   *     overflow: hidden !important;\n   *   }\n   *   </code></pre>\n   * </div>\n   *\n   * @param {boolean=} flag Enable or disable SVG support in the sanitizer.\n   * @returns {boolean|ng.$sanitizeProvider} Returns the currently configured value if called\n   *    without an argument or self for chaining otherwise.\n   */\n  this.enableSvg = function(enableSvg) {\n    if (isDefined(enableSvg)) {\n      svgEnabled = enableSvg;\n      return this;\n    } else {\n      return svgEnabled;\n    }\n  };\n\n  //////////////////////////////////////////////////////////////////////////////////////////////////\n  // Private stuff\n  //////////////////////////////////////////////////////////////////////////////////////////////////\n\n  bind = angular.bind;\n  extend = angular.extend;\n  forEach = angular.forEach;\n  isDefined = angular.isDefined;\n  lowercase = angular.lowercase;\n  noop = angular.noop;\n\n  htmlParser = htmlParserImpl;\n  htmlSanitizeWriter = htmlSanitizeWriterImpl;\n\n  nodeContains = window.Node.prototype.contains || /** @this */ function(arg) {\n    // eslint-disable-next-line no-bitwise\n    return !!(this.compareDocumentPosition(arg) & 16);\n  };\n\n  // Regular Expressions for parsing tags and attributes\n  var SURROGATE_PAIR_REGEXP = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g,\n    // Match everything outside of normal chars and \" (quote character)\n    NON_ALPHANUMERIC_REGEXP = /([^#-~ |!])/g;\n\n\n  // Good source of info about elements and attributes\n  // http://dev.w3.org/html5/spec/Overview.html#semantics\n  // http://simon.html5.org/html-elements\n\n  // Safe Void Elements - HTML5\n  // http://dev.w3.org/html5/spec/Overview.html#void-elements\n  var voidElements = toMap('area,br,col,hr,img,wbr');\n\n  // Elements that you can, intentionally, leave open (and which close themselves)\n  // http://dev.w3.org/html5/spec/Overview.html#optional-tags\n  var optionalEndTagBlockElements = toMap('colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr'),\n      optionalEndTagInlineElements = toMap('rp,rt'),\n      optionalEndTagElements = extend({},\n                                              optionalEndTagInlineElements,\n                                              optionalEndTagBlockElements);\n\n  // Safe Block Elements - HTML5\n  var blockElements = extend({}, optionalEndTagBlockElements, toMap('address,article,' +\n          'aside,blockquote,caption,center,del,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,' +\n          'h6,header,hgroup,hr,ins,map,menu,nav,ol,pre,section,table,ul'));\n\n  // Inline Elements - HTML5\n  var inlineElements = extend({}, optionalEndTagInlineElements, toMap('a,abbr,acronym,b,' +\n          'bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,q,ruby,rp,rt,s,' +\n          'samp,small,span,strike,strong,sub,sup,time,tt,u,var'));\n\n  // SVG Elements\n  // https://wiki.whatwg.org/wiki/Sanitization_rules#svg_Elements\n  // Note: the elements animate,animateColor,animateMotion,animateTransform,set are intentionally omitted.\n  // They can potentially allow for arbitrary javascript to be executed. See #11290\n  var svgElements = toMap('circle,defs,desc,ellipse,font-face,font-face-name,font-face-src,g,glyph,' +\n          'hkern,image,linearGradient,line,marker,metadata,missing-glyph,mpath,path,polygon,polyline,' +\n          'radialGradient,rect,stop,svg,switch,text,title,tspan');\n\n  // Blocked Elements (will be stripped)\n  var blockedElements = toMap('script,style');\n\n  var validElements = extend({},\n                                     voidElements,\n                                     blockElements,\n                                     inlineElements,\n                                     optionalEndTagElements);\n\n  //Attributes that have href and hence need to be sanitized\n  var uriAttrs = toMap('background,cite,href,longdesc,src,xlink:href,xml:base');\n\n  var htmlAttrs = toMap('abbr,align,alt,axis,bgcolor,border,cellpadding,cellspacing,class,clear,' +\n      'color,cols,colspan,compact,coords,dir,face,headers,height,hreflang,hspace,' +\n      'ismap,lang,language,nohref,nowrap,rel,rev,rows,rowspan,rules,' +\n      'scope,scrolling,shape,size,span,start,summary,tabindex,target,title,type,' +\n      'valign,value,vspace,width');\n\n  // SVG attributes (without \"id\" and \"name\" attributes)\n  // https://wiki.whatwg.org/wiki/Sanitization_rules#svg_Attributes\n  var svgAttrs = toMap('accent-height,accumulate,additive,alphabetic,arabic-form,ascent,' +\n      'baseProfile,bbox,begin,by,calcMode,cap-height,class,color,color-rendering,content,' +\n      'cx,cy,d,dx,dy,descent,display,dur,end,fill,fill-rule,font-family,font-size,font-stretch,' +\n      'font-style,font-variant,font-weight,from,fx,fy,g1,g2,glyph-name,gradientUnits,hanging,' +\n      'height,horiz-adv-x,horiz-origin-x,ideographic,k,keyPoints,keySplines,keyTimes,lang,' +\n      'marker-end,marker-mid,marker-start,markerHeight,markerUnits,markerWidth,mathematical,' +\n      'max,min,offset,opacity,orient,origin,overline-position,overline-thickness,panose-1,' +\n      'path,pathLength,points,preserveAspectRatio,r,refX,refY,repeatCount,repeatDur,' +\n      'requiredExtensions,requiredFeatures,restart,rotate,rx,ry,slope,stemh,stemv,stop-color,' +\n      'stop-opacity,strikethrough-position,strikethrough-thickness,stroke,stroke-dasharray,' +\n      'stroke-dashoffset,stroke-linecap,stroke-linejoin,stroke-miterlimit,stroke-opacity,' +\n      'stroke-width,systemLanguage,target,text-anchor,to,transform,type,u1,u2,underline-position,' +\n      'underline-thickness,unicode,unicode-range,units-per-em,values,version,viewBox,visibility,' +\n      'width,widths,x,x-height,x1,x2,xlink:actuate,xlink:arcrole,xlink:role,xlink:show,xlink:title,' +\n      'xlink:type,xml:base,xml:lang,xml:space,xmlns,xmlns:xlink,y,y1,y2,zoomAndPan', true);\n\n  var validAttrs = extend({},\n                                  uriAttrs,\n                                  svgAttrs,\n                                  htmlAttrs);\n\n  function toMap(str, lowercaseKeys) {\n    var obj = {}, items = str.split(','), i;\n    for (i = 0; i < items.length; i++) {\n      obj[lowercaseKeys ? lowercase(items[i]) : items[i]] = true;\n    }\n    return obj;\n  }\n\n  /**\n   * Create an inert document that contains the dirty HTML that needs sanitizing\n   * Depending upon browser support we use one of three strategies for doing this.\n   * Support: Safari 10.x -> XHR strategy\n   * Support: Firefox -> DomParser strategy\n   */\n  var getInertBodyElement /* function(html: string): HTMLBodyElement */ = (function(window, document) {\n    var inertDocument;\n    if (document && document.implementation) {\n      inertDocument = document.implementation.createHTMLDocument('inert');\n    } else {\n      throw $sanitizeMinErr('noinert', 'Can\\'t create an inert html document');\n    }\n    var inertBodyElement = (inertDocument.documentElement || inertDocument.getDocumentElement()).querySelector('body');\n\n    // Check for the Safari 10.1 bug - which allows JS to run inside the SVG G element\n    inertBodyElement.innerHTML = '<svg><g onload=\"this.parentNode.remove()\"></g></svg>';\n    if (!inertBodyElement.querySelector('svg')) {\n      return getInertBodyElement_XHR;\n    } else {\n      // Check for the Firefox bug - which prevents the inner img JS from being sanitized\n      inertBodyElement.innerHTML = '<svg><p><style><img src=\"</style><img src=x onerror=alert(1)//\">';\n      if (inertBodyElement.querySelector('svg img')) {\n        return getInertBodyElement_DOMParser;\n      } else {\n        return getInertBodyElement_InertDocument;\n      }\n    }\n\n    function getInertBodyElement_XHR(html) {\n      // We add this dummy element to ensure that the rest of the content is parsed as expected\n      // e.g. leading whitespace is maintained and tags like `<meta>` do not get hoisted to the `<head>` tag.\n      html = '<remove></remove>' + html;\n      try {\n        html = encodeURI(html);\n      } catch (e) {\n        return undefined;\n      }\n      var xhr = new window.XMLHttpRequest();\n      xhr.responseType = 'document';\n      xhr.open('GET', 'data:text/html;charset=utf-8,' + html, false);\n      xhr.send(null);\n      var body = xhr.response.body;\n      body.firstChild.remove();\n      return body;\n    }\n\n    function getInertBodyElement_DOMParser(html) {\n      // We add this dummy element to ensure that the rest of the content is parsed as expected\n      // e.g. leading whitespace is maintained and tags like `<meta>` do not get hoisted to the `<head>` tag.\n      html = '<remove></remove>' + html;\n      try {\n        var body = new window.DOMParser().parseFromString(html, 'text/html').body;\n        body.firstChild.remove();\n        return body;\n      } catch (e) {\n        return undefined;\n      }\n    }\n\n    function getInertBodyElement_InertDocument(html) {\n      inertBodyElement.innerHTML = html;\n\n      // Support: IE 9-11 only\n      // strip custom-namespaced attributes on IE<=11\n      if (document.documentMode) {\n        stripCustomNsAttrs(inertBodyElement);\n      }\n\n      return inertBodyElement;\n    }\n  })(window, window.document);\n\n  /**\n   * @example\n   * htmlParser(htmlString, {\n   *     start: function(tag, attrs) {},\n   *     end: function(tag) {},\n   *     chars: function(text) {},\n   *     comment: function(text) {}\n   * });\n   *\n   * @param {string} html string\n   * @param {object} handler\n   */\n  function htmlParserImpl(html, handler) {\n    if (html === null || html === undefined) {\n      html = '';\n    } else if (typeof html !== 'string') {\n      html = '' + html;\n    }\n\n    var inertBodyElement = getInertBodyElement(html);\n    if (!inertBodyElement) return '';\n\n    //mXSS protection\n    var mXSSAttempts = 5;\n    do {\n      if (mXSSAttempts === 0) {\n        throw $sanitizeMinErr('uinput', 'Failed to sanitize html because the input is unstable');\n      }\n      mXSSAttempts--;\n\n      // trigger mXSS if it is going to happen by reading and writing the innerHTML\n      html = inertBodyElement.innerHTML;\n      inertBodyElement = getInertBodyElement(html);\n    } while (html !== inertBodyElement.innerHTML);\n\n    var node = inertBodyElement.firstChild;\n    while (node) {\n      switch (node.nodeType) {\n        case 1: // ELEMENT_NODE\n          handler.start(node.nodeName.toLowerCase(), attrToMap(node.attributes));\n          break;\n        case 3: // TEXT NODE\n          handler.chars(node.textContent);\n          break;\n      }\n\n      var nextNode;\n      if (!(nextNode = node.firstChild)) {\n        if (node.nodeType === 1) {\n          handler.end(node.nodeName.toLowerCase());\n        }\n        nextNode = getNonDescendant('nextSibling', node);\n        if (!nextNode) {\n          while (nextNode == null) {\n            node = getNonDescendant('parentNode', node);\n            if (node === inertBodyElement) break;\n            nextNode = getNonDescendant('nextSibling', node);\n            if (node.nodeType === 1) {\n              handler.end(node.nodeName.toLowerCase());\n            }\n          }\n        }\n      }\n      node = nextNode;\n    }\n\n    while ((node = inertBodyElement.firstChild)) {\n      inertBodyElement.removeChild(node);\n    }\n  }\n\n  function attrToMap(attrs) {\n    var map = {};\n    for (var i = 0, ii = attrs.length; i < ii; i++) {\n      var attr = attrs[i];\n      map[attr.name] = attr.value;\n    }\n    return map;\n  }\n\n\n  /**\n   * Escapes all potentially dangerous characters, so that the\n   * resulting string can be safely inserted into attribute or\n   * element text.\n   * @param value\n   * @returns {string} escaped text\n   */\n  function encodeEntities(value) {\n    return value.\n      replace(/&/g, '&amp;').\n      replace(SURROGATE_PAIR_REGEXP, function(value) {\n        var hi = value.charCodeAt(0);\n        var low = value.charCodeAt(1);\n        return '&#' + (((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000) + ';';\n      }).\n      replace(NON_ALPHANUMERIC_REGEXP, function(value) {\n        return '&#' + value.charCodeAt(0) + ';';\n      }).\n      replace(/</g, '&lt;').\n      replace(/>/g, '&gt;');\n  }\n\n  /**\n   * create an HTML/XML writer which writes to buffer\n   * @param {Array} buf use buf.join('') to get out sanitized html string\n   * @returns {object} in the form of {\n   *     start: function(tag, attrs) {},\n   *     end: function(tag) {},\n   *     chars: function(text) {},\n   *     comment: function(text) {}\n   * }\n   */\n  function htmlSanitizeWriterImpl(buf, uriValidator) {\n    var ignoreCurrentElement = false;\n    var out = bind(buf, buf.push);\n    return {\n      start: function(tag, attrs) {\n        tag = lowercase(tag);\n        if (!ignoreCurrentElement && blockedElements[tag]) {\n          ignoreCurrentElement = tag;\n        }\n        if (!ignoreCurrentElement && validElements[tag] === true) {\n          out('<');\n          out(tag);\n          forEach(attrs, function(value, key) {\n            var lkey = lowercase(key);\n            var isImage = (tag === 'img' && lkey === 'src') || (lkey === 'background');\n            if (validAttrs[lkey] === true &&\n              (uriAttrs[lkey] !== true || uriValidator(value, isImage))) {\n              out(' ');\n              out(key);\n              out('=\"');\n              out(encodeEntities(value));\n              out('\"');\n            }\n          });\n          out('>');\n        }\n      },\n      end: function(tag) {\n        tag = lowercase(tag);\n        if (!ignoreCurrentElement && validElements[tag] === true && voidElements[tag] !== true) {\n          out('</');\n          out(tag);\n          out('>');\n        }\n        // eslint-disable-next-line eqeqeq\n        if (tag == ignoreCurrentElement) {\n          ignoreCurrentElement = false;\n        }\n      },\n      chars: function(chars) {\n        if (!ignoreCurrentElement) {\n          out(encodeEntities(chars));\n        }\n      }\n    };\n  }\n\n\n  /**\n   * When IE9-11 comes across an unknown namespaced attribute e.g. 'xlink:foo' it adds 'xmlns:ns1' attribute to declare\n   * ns1 namespace and prefixes the attribute with 'ns1' (e.g. 'ns1:xlink:foo'). This is undesirable since we don't want\n   * to allow any of these custom attributes. This method strips them all.\n   *\n   * @param node Root element to process\n   */\n  function stripCustomNsAttrs(node) {\n    while (node) {\n      if (node.nodeType === window.Node.ELEMENT_NODE) {\n        var attrs = node.attributes;\n        for (var i = 0, l = attrs.length; i < l; i++) {\n          var attrNode = attrs[i];\n          var attrName = attrNode.name.toLowerCase();\n          if (attrName === 'xmlns:ns1' || attrName.lastIndexOf('ns1:', 0) === 0) {\n            node.removeAttributeNode(attrNode);\n            i--;\n            l--;\n          }\n        }\n      }\n\n      var nextNode = node.firstChild;\n      if (nextNode) {\n        stripCustomNsAttrs(nextNode);\n      }\n\n      node = getNonDescendant('nextSibling', node);\n    }\n  }\n\n  function getNonDescendant(propName, node) {\n    // An element is clobbered if its `propName` property points to one of its descendants\n    var nextNode = node[propName];\n    if (nextNode && nodeContains.call(node, nextNode)) {\n      throw $sanitizeMinErr('elclob', 'Failed to sanitize html because the element is clobbered: {0}', node.outerHTML || node.outerText);\n    }\n    return nextNode;\n  }\n}\n\nfunction sanitizeText(chars) {\n  var buf = [];\n  var writer = htmlSanitizeWriter(buf, noop);\n  writer.chars(chars);\n  return buf.join('');\n}\n\n\n// define ngSanitize module and register $sanitize service\nangular.module('ngSanitize', [])\n  .provider('$sanitize', $SanitizeProvider)\n  .info({ angularVersion: '1.6.9' });\n\n/**\n * @ngdoc filter\n * @name linky\n * @kind function\n *\n * @description\n * Finds links in text input and turns them into html links. Supports `http/https/ftp/sftp/mailto` and\n * plain email address links.\n *\n * Requires the {@link ngSanitize `ngSanitize`} module to be installed.\n *\n * @param {string} text Input text.\n * @param {string} [target] Window (`_blank|_self|_parent|_top`) or named frame to open links in.\n * @param {object|function(url)} [attributes] Add custom attributes to the link element.\n *\n *    Can be one of:\n *\n *    - `object`: A map of attributes\n *    - `function`: Takes the url as a parameter and returns a map of attributes\n *\n *    If the map of attributes contains a value for `target`, it overrides the value of\n *    the target parameter.\n *\n *\n * @returns {string} Html-linkified and {@link $sanitize sanitized} text.\n *\n * @usage\n   <span ng-bind-html=\"linky_expression | linky\"></span>\n *\n * @example\n   <example module=\"linkyExample\" deps=\"angular-sanitize.js\" name=\"linky-filter\">\n     <file name=\"index.html\">\n       <div ng-controller=\"ExampleController\">\n       Snippet: <textarea ng-model=\"snippet\" cols=\"60\" rows=\"3\"></textarea>\n       <table>\n         <tr>\n           <th>Filter</th>\n           <th>Source</th>\n           <th>Rendered</th>\n         </tr>\n         <tr id=\"linky-filter\">\n           <td>linky filter</td>\n           <td>\n             <pre>&lt;div ng-bind-html=\"snippet | linky\"&gt;<br>&lt;/div&gt;</pre>\n           </td>\n           <td>\n             <div ng-bind-html=\"snippet | linky\"></div>\n           </td>\n         </tr>\n         <tr id=\"linky-target\">\n          <td>linky target</td>\n          <td>\n            <pre>&lt;div ng-bind-html=\"snippetWithSingleURL | linky:'_blank'\"&gt;<br>&lt;/div&gt;</pre>\n          </td>\n          <td>\n            <div ng-bind-html=\"snippetWithSingleURL | linky:'_blank'\"></div>\n          </td>\n         </tr>\n         <tr id=\"linky-custom-attributes\">\n          <td>linky custom attributes</td>\n          <td>\n            <pre>&lt;div ng-bind-html=\"snippetWithSingleURL | linky:'_self':{rel: 'nofollow'}\"&gt;<br>&lt;/div&gt;</pre>\n          </td>\n          <td>\n            <div ng-bind-html=\"snippetWithSingleURL | linky:'_self':{rel: 'nofollow'}\"></div>\n          </td>\n         </tr>\n         <tr id=\"escaped-html\">\n           <td>no filter</td>\n           <td><pre>&lt;div ng-bind=\"snippet\"&gt;<br>&lt;/div&gt;</pre></td>\n           <td><div ng-bind=\"snippet\"></div></td>\n         </tr>\n       </table>\n     </file>\n     <file name=\"script.js\">\n       angular.module('linkyExample', ['ngSanitize'])\n         .controller('ExampleController', ['$scope', function($scope) {\n           $scope.snippet =\n             'Pretty text with some links:\\n' +\n             'http://angularjs.org/,\\n' +\n             'mailto:us@somewhere.org,\\n' +\n             'another@somewhere.org,\\n' +\n             'and one more: ftp://127.0.0.1/.';\n           $scope.snippetWithSingleURL = 'http://angularjs.org/';\n         }]);\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n       it('should linkify the snippet with urls', function() {\n         expect(element(by.id('linky-filter')).element(by.binding('snippet | linky')).getText()).\n             toBe('Pretty text with some links: http://angularjs.org/, us@somewhere.org, ' +\n                  'another@somewhere.org, and one more: ftp://127.0.0.1/.');\n         expect(element.all(by.css('#linky-filter a')).count()).toEqual(4);\n       });\n\n       it('should not linkify snippet without the linky filter', function() {\n         expect(element(by.id('escaped-html')).element(by.binding('snippet')).getText()).\n             toBe('Pretty text with some links: http://angularjs.org/, mailto:us@somewhere.org, ' +\n                  'another@somewhere.org, and one more: ftp://127.0.0.1/.');\n         expect(element.all(by.css('#escaped-html a')).count()).toEqual(0);\n       });\n\n       it('should update', function() {\n         element(by.model('snippet')).clear();\n         element(by.model('snippet')).sendKeys('new http://link.');\n         expect(element(by.id('linky-filter')).element(by.binding('snippet | linky')).getText()).\n             toBe('new http://link.');\n         expect(element.all(by.css('#linky-filter a')).count()).toEqual(1);\n         expect(element(by.id('escaped-html')).element(by.binding('snippet')).getText())\n             .toBe('new http://link.');\n       });\n\n       it('should work with the target property', function() {\n        expect(element(by.id('linky-target')).\n            element(by.binding(\"snippetWithSingleURL | linky:'_blank'\")).getText()).\n            toBe('http://angularjs.org/');\n        expect(element(by.css('#linky-target a')).getAttribute('target')).toEqual('_blank');\n       });\n\n       it('should optionally add custom attributes', function() {\n        expect(element(by.id('linky-custom-attributes')).\n            element(by.binding(\"snippetWithSingleURL | linky:'_self':{rel: 'nofollow'}\")).getText()).\n            toBe('http://angularjs.org/');\n        expect(element(by.css('#linky-custom-attributes a')).getAttribute('rel')).toEqual('nofollow');\n       });\n     </file>\n   </example>\n */\nangular.module('ngSanitize').filter('linky', ['$sanitize', function($sanitize) {\n  var LINKY_URL_REGEXP =\n        /((s?ftp|https?):\\/\\/|(www\\.)|(mailto:)?[A-Za-z0-9._%+-]+@)\\S*[^\\s.;,(){}<>\"\\u201d\\u2019]/i,\n      MAILTO_REGEXP = /^mailto:/i;\n\n  var linkyMinErr = angular.$$minErr('linky');\n  var isDefined = angular.isDefined;\n  var isFunction = angular.isFunction;\n  var isObject = angular.isObject;\n  var isString = angular.isString;\n\n  return function(text, target, attributes) {\n    if (text == null || text === '') return text;\n    if (!isString(text)) throw linkyMinErr('notstring', 'Expected string but received: {0}', text);\n\n    var attributesFn =\n      isFunction(attributes) ? attributes :\n      isObject(attributes) ? function getAttributesObject() {return attributes;} :\n      function getEmptyAttributesObject() {return {};};\n\n    var match;\n    var raw = text;\n    var html = [];\n    var url;\n    var i;\n    while ((match = raw.match(LINKY_URL_REGEXP))) {\n      // We can not end in these as they are sometimes found at the end of the sentence\n      url = match[0];\n      // if we did not match ftp/http/www/mailto then assume mailto\n      if (!match[2] && !match[4]) {\n        url = (match[3] ? 'http://' : 'mailto:') + url;\n      }\n      i = match.index;\n      addText(raw.substr(0, i));\n      addLink(url, match[0].replace(MAILTO_REGEXP, ''));\n      raw = raw.substring(i + match[0].length);\n    }\n    addText(raw);\n    return $sanitize(html.join(''));\n\n    function addText(text) {\n      if (!text) {\n        return;\n      }\n      html.push(sanitizeText(text));\n    }\n\n    function addLink(url, text) {\n      var key, linkAttributes = attributesFn(url);\n      html.push('<a ');\n\n      for (key in linkAttributes) {\n        html.push(key + '=\"' + linkAttributes[key] + '\" ');\n      }\n\n      if (isDefined(target) && !('target' in linkAttributes)) {\n        html.push('target=\"',\n                  target,\n                  '\" ');\n      }\n      html.push('href=\"',\n                url.replace(/\"/g, '&quot;'),\n                '\">');\n      addText(text);\n      html.push('</a>');\n    }\n  };\n}]);\n\n\n})(window, window.angular);\n","require('./angular-sanitize');\nmodule.exports = 'ngSanitize';\n"],"names":["window","angular","bind","extend","forEach","isDefined","lowercase","noop","nodeContains","htmlParser","htmlSanitizeWriter","$sanitizeMinErr","$$minErr","module","provider","svgEnabled","this","$get","$$sanitizeUri","validElements","svgElements","html","buf","uri","isImage","test","join","enableSvg","handler","inertBodyElement","getInertBodyElement","mXSSAttempts","innerHTML","node","firstChild","nodeType","start","nodeName","toLowerCase","attrToMap","attributes","chars","textContent","nextNode","end","getNonDescendant","removeChild","uriValidator","ignoreCurrentElement","out","push","tag","attrs","blockedElements","value","key","lkey","validAttrs","uriAttrs","encodeEntities","voidElements","Node","prototype","contains","arg","compareDocumentPosition","SURROGATE_PAIR_REGEXP","NON_ALPHANUMERIC_REGEXP","toMap","optionalEndTagBlockElements","optionalEndTagInlineElements","optionalEndTagElements","blockElements","inlineElements","htmlAttrs","svgAttrs","str","lowercaseKeys","i","obj","items","split","length","document","inertDocument","implementation","createHTMLDocument","documentElement","getDocumentElement","querySelector","body","DOMParser","parseFromString","remove","e","documentMode","stripCustomNsAttrs","encodeURI","xhr","XMLHttpRequest","responseType","open","send","response","map","ii","attr","name","replace","charCodeAt","ELEMENT_NODE","l","attrNode","attrName","lastIndexOf","removeAttributeNode","propName","call","outerHTML","outerText","info","angularVersion","filter","$sanitize","LINKY_URL_REGEXP","MAILTO_REGEXP","linkyMinErr","isFunction","isObject","isString","text","target","match","url","attributesFn","raw","index","addText","substr","addLink","substring","linkAttributes"],"mappings":"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"}