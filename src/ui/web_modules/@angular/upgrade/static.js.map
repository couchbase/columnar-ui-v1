{"version":3,"file":"static.js","sources":["../../../node_modules/@angular/upgrade/fesm5/static.js"],"sourcesContent":["/**\n * @license Angular v8.2.14\n * (c) 2010-2019 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { __read, __extends, __spread, __decorate, __metadata } from 'tslib';\nimport { Injector, ChangeDetectorRef, Testability, TestabilityRegistry, ApplicationRef, SimpleChange, NgZone, ComponentFactoryResolver, Version, ɵNOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR, ɵlooseIdentical, EventEmitter, isDevMode, NgModule } from '@angular/core';\nimport { platformBrowser } from '@angular/platform-browser';\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction noNg() {\n    throw new Error('AngularJS v1.x is not loaded!');\n}\nvar noNgElement = (function () { return noNg(); });\nnoNgElement.cleanData = noNg;\nvar angular = {\n    bootstrap: noNg,\n    module: noNg,\n    element: noNgElement,\n    injector: noNg,\n    version: undefined,\n    resumeBootstrap: noNg,\n    getTestability: noNg\n};\ntry {\n    if (window.hasOwnProperty('angular')) {\n        angular = window.angular;\n    }\n}\ncatch (_a) {\n    // ignore in CJS mode.\n}\n/**\n * @deprecated Use `setAngularJSGlobal` instead.\n *\n * @publicApi\n */\nfunction setAngularLib(ng) {\n    setAngularJSGlobal(ng);\n}\n/**\n * @deprecated Use `getAngularJSGlobal` instead.\n *\n * @publicApi\n */\nfunction getAngularLib() {\n    return getAngularJSGlobal();\n}\n/**\n * Resets the AngularJS global.\n *\n * Used when AngularJS is loaded lazily, and not available on `window`.\n *\n * @publicApi\n */\nfunction setAngularJSGlobal(ng) {\n    angular = ng;\n}\n/**\n * Returns the current AngularJS global.\n *\n * @publicApi\n */\nfunction getAngularJSGlobal() {\n    return angular;\n}\nvar bootstrap = function (e, modules, config) {\n    return angular.bootstrap(e, modules, config);\n};\n// Do not declare as `module` to avoid webpack bug\n// (see https://github.com/angular/angular/issues/30050).\nvar module_ = function (prefix, dependencies) {\n    return angular.module(prefix, dependencies);\n};\nvar element = (function (e) { return angular.element(e); });\nelement.cleanData = function (nodes) { return angular.element.cleanData(nodes); };\nvar injector = function (modules, strictDi) { return angular.injector(modules, strictDi); };\nvar resumeBootstrap = function () { return angular.resumeBootstrap(); };\nvar getTestability = function (e) { return angular.getTestability(e); };\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar $COMPILE = '$compile';\nvar $CONTROLLER = '$controller';\nvar $DELEGATE = '$delegate';\nvar $EXCEPTION_HANDLER = '$exceptionHandler';\nvar $HTTP_BACKEND = '$httpBackend';\nvar $INJECTOR = '$injector';\nvar $INTERVAL = '$interval';\nvar $PARSE = '$parse';\nvar $PROVIDE = '$provide';\nvar $ROOT_SCOPE = '$rootScope';\nvar $SCOPE = '$scope';\nvar $TEMPLATE_CACHE = '$templateCache';\nvar $TEMPLATE_REQUEST = '$templateRequest';\nvar $$TESTABILITY = '$$testability';\nvar COMPILER_KEY = '$$angularCompiler';\nvar DOWNGRADED_MODULE_COUNT_KEY = '$$angularDowngradedModuleCount';\nvar GROUP_PROJECTABLE_NODES_KEY = '$$angularGroupProjectableNodes';\nvar INJECTOR_KEY = '$$angularInjector';\nvar LAZY_MODULE_REF = '$$angularLazyModuleRef';\nvar NG_ZONE_KEY = '$$angularNgZone';\nvar UPGRADE_APP_TYPE_KEY = '$$angularUpgradeAppType';\nvar REQUIRE_INJECTOR = '?^^' + INJECTOR_KEY;\nvar REQUIRE_NG_MODEL = '?ngModel';\nvar UPGRADE_MODULE_NAME = '$$UpgradeModule';\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A `PropertyBinding` represents a mapping between a property name\n * and an attribute name. It is parsed from a string of the form\n * `\"prop: attr\"`; or simply `\"propAndAttr\" where the property\n * and attribute have the same identifier.\n */\nvar PropertyBinding = /** @class */ (function () {\n    function PropertyBinding(prop, attr) {\n        this.prop = prop;\n        this.attr = attr;\n        this.parseBinding();\n    }\n    PropertyBinding.prototype.parseBinding = function () {\n        this.bracketAttr = \"[\" + this.attr + \"]\";\n        this.parenAttr = \"(\" + this.attr + \")\";\n        this.bracketParenAttr = \"[(\" + this.attr + \")]\";\n        var capitalAttr = this.attr.charAt(0).toUpperCase() + this.attr.substr(1);\n        this.onAttr = \"on\" + capitalAttr;\n        this.bindAttr = \"bind\" + capitalAttr;\n        this.bindonAttr = \"bindon\" + capitalAttr;\n    };\n    return PropertyBinding;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar DIRECTIVE_PREFIX_REGEXP = /^(?:x|data)[:\\-_]/i;\nvar DIRECTIVE_SPECIAL_CHARS_REGEXP = /[:\\-_]+(.)/g;\nfunction onError(e) {\n    // TODO: (misko): We seem to not have a stack trace here!\n    if (console.error) {\n        console.error(e, e.stack);\n    }\n    else {\n        // tslint:disable-next-line:no-console\n        console.log(e, e.stack);\n    }\n    throw e;\n}\nfunction controllerKey(name) {\n    return '$' + name + 'Controller';\n}\nfunction directiveNormalize(name) {\n    return name.replace(DIRECTIVE_PREFIX_REGEXP, '')\n        .replace(DIRECTIVE_SPECIAL_CHARS_REGEXP, function (_, letter) { return letter.toUpperCase(); });\n}\nfunction getTypeName(type) {\n    // Return the name of the type or the first line of its stringified version.\n    return type.overriddenName || type.name || type.toString().split('\\n')[0];\n}\nfunction getDowngradedModuleCount($injector) {\n    return $injector.has(DOWNGRADED_MODULE_COUNT_KEY) ? $injector.get(DOWNGRADED_MODULE_COUNT_KEY) :\n        0;\n}\nfunction getUpgradeAppType($injector) {\n    return $injector.has(UPGRADE_APP_TYPE_KEY) ? $injector.get(UPGRADE_APP_TYPE_KEY) :\n        0 /* None */;\n}\nfunction isFunction(value) {\n    return typeof value === 'function';\n}\nfunction validateInjectionKey($injector, downgradedModule, injectionKey, attemptedAction) {\n    var upgradeAppType = getUpgradeAppType($injector);\n    var downgradedModuleCount = getDowngradedModuleCount($injector);\n    // Check for common errors.\n    switch (upgradeAppType) {\n        case 1 /* Dynamic */:\n        case 2 /* Static */:\n            if (downgradedModule) {\n                throw new Error(\"Error while \" + attemptedAction + \": 'downgradedModule' unexpectedly specified.\\n\" +\n                    'You should not specify a value for \\'downgradedModule\\', unless you are downgrading ' +\n                    'more than one Angular module (via \\'downgradeModule()\\').');\n            }\n            break;\n        case 3 /* Lite */:\n            if (!downgradedModule && (downgradedModuleCount >= 2)) {\n                throw new Error(\"Error while \" + attemptedAction + \": 'downgradedModule' not specified.\\n\" +\n                    'This application contains more than one downgraded Angular module, thus you need to ' +\n                    'always specify \\'downgradedModule\\' when downgrading components and injectables.');\n            }\n            if (!$injector.has(injectionKey)) {\n                throw new Error(\"Error while \" + attemptedAction + \": Unable to find the specified downgraded module.\\n\" +\n                    'Did you forget to downgrade an Angular module or include it in the AngularJS ' +\n                    'application?');\n            }\n            break;\n        default:\n            throw new Error(\"Error while \" + attemptedAction + \": Not a valid '@angular/upgrade' application.\\n\" +\n                'Did you forget to downgrade an Angular module or include it in the AngularJS ' +\n                'application?');\n    }\n}\nvar Deferred = /** @class */ (function () {\n    function Deferred() {\n        var _this = this;\n        this.promise = new Promise(function (res, rej) {\n            _this.resolve = res;\n            _this.reject = rej;\n        });\n    }\n    return Deferred;\n}());\n/**\n * @return Whether the passed-in component implements the subset of the\n *     `ControlValueAccessor` interface needed for AngularJS `ng-model`\n *     compatibility.\n */\nfunction supportsNgModel(component) {\n    return typeof component.writeValue === 'function' &&\n        typeof component.registerOnChange === 'function';\n}\n/**\n * Glue the AngularJS `NgModelController` (if it exists) to the component\n * (if it implements the needed subset of the `ControlValueAccessor` interface).\n */\nfunction hookupNgModel(ngModel, component) {\n    if (ngModel && supportsNgModel(component)) {\n        ngModel.$render = function () { component.writeValue(ngModel.$viewValue); };\n        component.registerOnChange(ngModel.$setViewValue.bind(ngModel));\n        if (typeof component.registerOnTouched === 'function') {\n            component.registerOnTouched(ngModel.$setTouched.bind(ngModel));\n        }\n    }\n}\n/**\n * Test two values for strict equality, accounting for the fact that `NaN !== NaN`.\n */\nfunction strictEquals(val1, val2) {\n    return val1 === val2 || (val1 !== val1 && val2 !== val2);\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar INITIAL_VALUE = {\n    __UNINITIALIZED__: true\n};\nvar DowngradeComponentAdapter = /** @class */ (function () {\n    function DowngradeComponentAdapter(element, attrs, scope, ngModel, parentInjector, $injector, $compile, $parse, componentFactory, wrapCallback) {\n        this.element = element;\n        this.attrs = attrs;\n        this.scope = scope;\n        this.ngModel = ngModel;\n        this.parentInjector = parentInjector;\n        this.$injector = $injector;\n        this.$compile = $compile;\n        this.$parse = $parse;\n        this.componentFactory = componentFactory;\n        this.wrapCallback = wrapCallback;\n        this.implementsOnChanges = false;\n        this.inputChangeCount = 0;\n        this.inputChanges = {};\n        this.componentScope = scope.$new();\n    }\n    DowngradeComponentAdapter.prototype.compileContents = function () {\n        var _this = this;\n        var compiledProjectableNodes = [];\n        var projectableNodes = this.groupProjectableNodes();\n        var linkFns = projectableNodes.map(function (nodes) { return _this.$compile(nodes); });\n        this.element.empty();\n        linkFns.forEach(function (linkFn) {\n            linkFn(_this.scope, function (clone) {\n                compiledProjectableNodes.push(clone);\n                _this.element.append(clone);\n            });\n        });\n        return compiledProjectableNodes;\n    };\n    DowngradeComponentAdapter.prototype.createComponent = function (projectableNodes) {\n        var providers = [{ provide: $SCOPE, useValue: this.componentScope }];\n        var childInjector = Injector.create({ providers: providers, parent: this.parentInjector, name: 'DowngradeComponentAdapter' });\n        this.componentRef =\n            this.componentFactory.create(childInjector, projectableNodes, this.element[0]);\n        this.viewChangeDetector = this.componentRef.injector.get(ChangeDetectorRef);\n        this.changeDetector = this.componentRef.changeDetectorRef;\n        this.component = this.componentRef.instance;\n        // testability hook is commonly added during component bootstrap in\n        // packages/core/src/application_ref.bootstrap()\n        // in downgraded application, component creation will take place here as well as adding the\n        // testability hook.\n        var testability = this.componentRef.injector.get(Testability, null);\n        if (testability) {\n            this.componentRef.injector.get(TestabilityRegistry)\n                .registerApplication(this.componentRef.location.nativeElement, testability);\n        }\n        hookupNgModel(this.ngModel, this.component);\n    };\n    DowngradeComponentAdapter.prototype.setupInputs = function (manuallyAttachView, propagateDigest) {\n        var _this = this;\n        if (propagateDigest === void 0) { propagateDigest = true; }\n        var attrs = this.attrs;\n        var inputs = this.componentFactory.inputs || [];\n        var _loop_1 = function (i) {\n            var input = new PropertyBinding(inputs[i].propName, inputs[i].templateName);\n            var expr = null;\n            if (attrs.hasOwnProperty(input.attr)) {\n                var observeFn_1 = (function (prop) {\n                    var prevValue = INITIAL_VALUE;\n                    return function (currValue) {\n                        // Initially, both `$observe()` and `$watch()` will call this function.\n                        if (!strictEquals(prevValue, currValue)) {\n                            if (prevValue === INITIAL_VALUE) {\n                                prevValue = currValue;\n                            }\n                            _this.updateInput(prop, prevValue, currValue);\n                            prevValue = currValue;\n                        }\n                    };\n                })(input.prop);\n                attrs.$observe(input.attr, observeFn_1);\n                // Use `$watch()` (in addition to `$observe()`) in order to initialize the input in time\n                // for `ngOnChanges()`. This is necessary if we are already in a `$digest`, which means that\n                // `ngOnChanges()` (which is called by a watcher) will run before the `$observe()` callback.\n                var unwatch_1 = this_1.componentScope.$watch(function () {\n                    unwatch_1();\n                    unwatch_1 = null;\n                    observeFn_1(attrs[input.attr]);\n                });\n            }\n            else if (attrs.hasOwnProperty(input.bindAttr)) {\n                expr = attrs[input.bindAttr];\n            }\n            else if (attrs.hasOwnProperty(input.bracketAttr)) {\n                expr = attrs[input.bracketAttr];\n            }\n            else if (attrs.hasOwnProperty(input.bindonAttr)) {\n                expr = attrs[input.bindonAttr];\n            }\n            else if (attrs.hasOwnProperty(input.bracketParenAttr)) {\n                expr = attrs[input.bracketParenAttr];\n            }\n            if (expr != null) {\n                var watchFn = (function (prop) { return function (currValue, prevValue) {\n                    return _this.updateInput(prop, prevValue, currValue);\n                }; })(input.prop);\n                this_1.componentScope.$watch(expr, watchFn);\n            }\n        };\n        var this_1 = this;\n        for (var i = 0; i < inputs.length; i++) {\n            _loop_1(i);\n        }\n        // Invoke `ngOnChanges()` and Change Detection (when necessary)\n        var detectChanges = function () { return _this.changeDetector.detectChanges(); };\n        var prototype = this.componentFactory.componentType.prototype;\n        this.implementsOnChanges = !!(prototype && prototype.ngOnChanges);\n        this.componentScope.$watch(function () { return _this.inputChangeCount; }, this.wrapCallback(function () {\n            // Invoke `ngOnChanges()`\n            if (_this.implementsOnChanges) {\n                var inputChanges = _this.inputChanges;\n                _this.inputChanges = {};\n                _this.component.ngOnChanges(inputChanges);\n            }\n            _this.viewChangeDetector.markForCheck();\n            // If opted out of propagating digests, invoke change detection when inputs change.\n            if (!propagateDigest) {\n                detectChanges();\n            }\n        }));\n        // If not opted out of propagating digests, invoke change detection on every digest\n        if (propagateDigest) {\n            this.componentScope.$watch(this.wrapCallback(detectChanges));\n        }\n        // If necessary, attach the view so that it will be dirty-checked.\n        // (Allow time for the initial input values to be set and `ngOnChanges()` to be called.)\n        if (manuallyAttachView || !propagateDigest) {\n            var unwatch_2 = this.componentScope.$watch(function () {\n                unwatch_2();\n                unwatch_2 = null;\n                var appRef = _this.parentInjector.get(ApplicationRef);\n                appRef.attachView(_this.componentRef.hostView);\n            });\n        }\n    };\n    DowngradeComponentAdapter.prototype.setupOutputs = function () {\n        var attrs = this.attrs;\n        var outputs = this.componentFactory.outputs || [];\n        for (var j = 0; j < outputs.length; j++) {\n            var output = new PropertyBinding(outputs[j].propName, outputs[j].templateName);\n            var bindonAttr = output.bindonAttr.substring(0, output.bindonAttr.length - 6);\n            var bracketParenAttr = \"[(\" + output.bracketParenAttr.substring(2, output.bracketParenAttr.length - 8) + \")]\";\n            // order below is important - first update bindings then evaluate expressions\n            if (attrs.hasOwnProperty(bindonAttr)) {\n                this.subscribeToOutput(output, attrs[bindonAttr], true);\n            }\n            if (attrs.hasOwnProperty(bracketParenAttr)) {\n                this.subscribeToOutput(output, attrs[bracketParenAttr], true);\n            }\n            if (attrs.hasOwnProperty(output.onAttr)) {\n                this.subscribeToOutput(output, attrs[output.onAttr]);\n            }\n            if (attrs.hasOwnProperty(output.parenAttr)) {\n                this.subscribeToOutput(output, attrs[output.parenAttr]);\n            }\n        }\n    };\n    DowngradeComponentAdapter.prototype.subscribeToOutput = function (output, expr, isAssignment) {\n        var _this = this;\n        if (isAssignment === void 0) { isAssignment = false; }\n        var getter = this.$parse(expr);\n        var setter = getter.assign;\n        if (isAssignment && !setter) {\n            throw new Error(\"Expression '\" + expr + \"' is not assignable!\");\n        }\n        var emitter = this.component[output.prop];\n        if (emitter) {\n            emitter.subscribe({\n                next: isAssignment ? function (v) { return setter(_this.scope, v); } :\n                    function (v) { return getter(_this.scope, { '$event': v }); }\n            });\n        }\n        else {\n            throw new Error(\"Missing emitter '\" + output.prop + \"' on component '\" + getTypeName(this.componentFactory.componentType) + \"'!\");\n        }\n    };\n    DowngradeComponentAdapter.prototype.registerCleanup = function () {\n        var _this = this;\n        var testabilityRegistry = this.componentRef.injector.get(TestabilityRegistry);\n        var destroyComponentRef = this.wrapCallback(function () { return _this.componentRef.destroy(); });\n        var destroyed = false;\n        this.element.on('$destroy', function () { return _this.componentScope.$destroy(); });\n        this.componentScope.$on('$destroy', function () {\n            if (!destroyed) {\n                destroyed = true;\n                testabilityRegistry.unregisterApplication(_this.componentRef.location.nativeElement);\n                destroyComponentRef();\n            }\n        });\n    };\n    DowngradeComponentAdapter.prototype.getInjector = function () { return this.componentRef.injector; };\n    DowngradeComponentAdapter.prototype.updateInput = function (prop, prevValue, currValue) {\n        if (this.implementsOnChanges) {\n            this.inputChanges[prop] = new SimpleChange(prevValue, currValue, prevValue === currValue);\n        }\n        this.inputChangeCount++;\n        this.component[prop] = currValue;\n    };\n    DowngradeComponentAdapter.prototype.groupProjectableNodes = function () {\n        var ngContentSelectors = this.componentFactory.ngContentSelectors;\n        return groupNodesBySelector(ngContentSelectors, this.element.contents());\n    };\n    return DowngradeComponentAdapter;\n}());\n/**\n * Group a set of DOM nodes into `ngContent` groups, based on the given content selectors.\n */\nfunction groupNodesBySelector(ngContentSelectors, nodes) {\n    var projectableNodes = [];\n    var wildcardNgContentIndex;\n    for (var i = 0, ii = ngContentSelectors.length; i < ii; ++i) {\n        projectableNodes[i] = [];\n    }\n    for (var j = 0, jj = nodes.length; j < jj; ++j) {\n        var node = nodes[j];\n        var ngContentIndex = findMatchingNgContentIndex(node, ngContentSelectors);\n        if (ngContentIndex != null) {\n            projectableNodes[ngContentIndex].push(node);\n        }\n    }\n    return projectableNodes;\n}\nfunction findMatchingNgContentIndex(element, ngContentSelectors) {\n    var ngContentIndices = [];\n    var wildcardNgContentIndex = -1;\n    for (var i = 0; i < ngContentSelectors.length; i++) {\n        var selector = ngContentSelectors[i];\n        if (selector === '*') {\n            wildcardNgContentIndex = i;\n        }\n        else {\n            if (matchesSelector(element, selector)) {\n                ngContentIndices.push(i);\n            }\n        }\n    }\n    ngContentIndices.sort();\n    if (wildcardNgContentIndex !== -1) {\n        ngContentIndices.push(wildcardNgContentIndex);\n    }\n    return ngContentIndices.length ? ngContentIndices[0] : null;\n}\nvar _matches;\nfunction matchesSelector(el, selector) {\n    if (!_matches) {\n        var elProto = Element.prototype;\n        _matches = elProto.matches || elProto.matchesSelector || elProto.mozMatchesSelector ||\n            elProto.msMatchesSelector || elProto.oMatchesSelector || elProto.webkitMatchesSelector;\n    }\n    return el.nodeType === Node.ELEMENT_NODE ? _matches.call(el, selector) : false;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction isThenable(obj) {\n    return !!obj && isFunction(obj.then);\n}\n/**\n * Synchronous, promise-like object.\n */\nvar SyncPromise = /** @class */ (function () {\n    function SyncPromise() {\n        this.resolved = false;\n        this.callbacks = [];\n    }\n    SyncPromise.all = function (valuesOrPromises) {\n        var aggrPromise = new SyncPromise();\n        var resolvedCount = 0;\n        var results = [];\n        var resolve = function (idx, value) {\n            results[idx] = value;\n            if (++resolvedCount === valuesOrPromises.length)\n                aggrPromise.resolve(results);\n        };\n        valuesOrPromises.forEach(function (p, idx) {\n            if (isThenable(p)) {\n                p.then(function (v) { return resolve(idx, v); });\n            }\n            else {\n                resolve(idx, p);\n            }\n        });\n        return aggrPromise;\n    };\n    SyncPromise.prototype.resolve = function (value) {\n        // Do nothing, if already resolved.\n        if (this.resolved)\n            return;\n        this.value = value;\n        this.resolved = true;\n        // Run the queued callbacks.\n        this.callbacks.forEach(function (callback) { return callback(value); });\n        this.callbacks.length = 0;\n    };\n    SyncPromise.prototype.then = function (callback) {\n        if (this.resolved) {\n            callback(this.value);\n        }\n        else {\n            this.callbacks.push(callback);\n        }\n    };\n    return SyncPromise;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @description\n *\n * A helper function that allows an Angular component to be used from AngularJS.\n *\n * *Part of the [upgrade/static](api?query=upgrade%2Fstatic)\n * library for hybrid upgrade apps that support AoT compilation*\n *\n * This helper function returns a factory function to be used for registering\n * an AngularJS wrapper directive for \"downgrading\" an Angular component.\n *\n * @usageNotes\n * ### Examples\n *\n * Let's assume that you have an Angular component called `ng2Heroes` that needs\n * to be made available in AngularJS templates.\n *\n * {@example upgrade/static/ts/full/module.ts region=\"ng2-heroes\"}\n *\n * We must create an AngularJS [directive](https://docs.angularjs.org/guide/directive)\n * that will make this Angular component available inside AngularJS templates.\n * The `downgradeComponent()` function returns a factory function that we\n * can use to define the AngularJS directive that wraps the \"downgraded\" component.\n *\n * {@example upgrade/static/ts/full/module.ts region=\"ng2-heroes-wrapper\"}\n *\n * @param info contains information about the Component that is being downgraded:\n *\n * - `component: Type<any>`: The type of the Component that will be downgraded\n * - `downgradedModule?: string`: The name of the downgraded module (if any) that the component\n *   \"belongs to\", as returned by a call to `downgradeModule()`. It is the module, whose\n *   corresponding Angular module will be bootstrapped, when the component needs to be instantiated.\n *   <br />\n *   (This option is only necessary when using `downgradeModule()` to downgrade more than one\n *   Angular module.)\n * - `propagateDigest?: boolean`: Whether to perform {@link ChangeDetectorRef#detectChanges\n *   change detection} on the component on every\n *   [$digest](https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$digest). If set to `false`,\n *   change detection will still be performed when any of the component's inputs changes.\n *   (Default: true)\n *\n * @returns a factory function that can be used to register the component in an\n * AngularJS module.\n *\n * @publicApi\n */\nfunction downgradeComponent(info) {\n    var directiveFactory = function ($compile, $injector, $parse) {\n        // When using `downgradeModule()`, we need to handle certain things specially. For example:\n        // - We always need to attach the component view to the `ApplicationRef` for it to be\n        //   dirty-checked.\n        // - We need to ensure callbacks to Angular APIs (e.g. change detection) are run inside the\n        //   Angular zone.\n        //   NOTE: This is not needed, when using `UpgradeModule`, because `$digest()` will be run\n        //         inside the Angular zone (except if explicitly escaped, in which case we shouldn't\n        //         force it back in).\n        var isNgUpgradeLite = getUpgradeAppType($injector) === 3 /* Lite */;\n        var wrapCallback = !isNgUpgradeLite ? function (cb) { return cb; } : function (cb) { return function () { return NgZone.isInAngularZone() ? cb() : ngZone.run(cb); }; };\n        var ngZone;\n        // When downgrading multiple modules, special handling is needed wrt injectors.\n        var hasMultipleDowngradedModules = isNgUpgradeLite && (getDowngradedModuleCount($injector) > 1);\n        return {\n            restrict: 'E',\n            terminal: true,\n            require: [REQUIRE_INJECTOR, REQUIRE_NG_MODEL],\n            link: function (scope, element, attrs, required) {\n                // We might have to compile the contents asynchronously, because this might have been\n                // triggered by `UpgradeNg1ComponentAdapterBuilder`, before the Angular templates have\n                // been compiled.\n                var ngModel = required[1];\n                var parentInjector = required[0];\n                var moduleInjector = undefined;\n                var ranAsync = false;\n                if (!parentInjector || hasMultipleDowngradedModules) {\n                    var downgradedModule = info.downgradedModule || '';\n                    var lazyModuleRefKey = \"\" + LAZY_MODULE_REF + downgradedModule;\n                    var attemptedAction = \"instantiating component '\" + getTypeName(info.component) + \"'\";\n                    validateInjectionKey($injector, downgradedModule, lazyModuleRefKey, attemptedAction);\n                    var lazyModuleRef = $injector.get(lazyModuleRefKey);\n                    moduleInjector = lazyModuleRef.injector || lazyModuleRef.promise;\n                }\n                // Notes:\n                //\n                // There are two injectors: `finalModuleInjector` and `finalParentInjector` (they might be\n                // the same instance, but that is irrelevant):\n                // - `finalModuleInjector` is used to retrieve `ComponentFactoryResolver`, thus it must be\n                //   on the same tree as the `NgModule` that declares this downgraded component.\n                // - `finalParentInjector` is used for all other injection purposes.\n                //   (Note that Angular knows to only traverse the component-tree part of that injector,\n                //   when looking for an injectable and then switch to the module injector.)\n                //\n                // There are basically three cases:\n                // - If there is no parent component (thus no `parentInjector`), we bootstrap the downgraded\n                //   `NgModule` and use its injector as both `finalModuleInjector` and\n                //   `finalParentInjector`.\n                // - If there is a parent component (and thus a `parentInjector`) and we are sure that it\n                //   belongs to the same `NgModule` as this downgraded component (e.g. because there is only\n                //   one downgraded module, we use that `parentInjector` as both `finalModuleInjector` and\n                //   `finalParentInjector`.\n                // - If there is a parent component, but it may belong to a different `NgModule`, then we\n                //   use the `parentInjector` as `finalParentInjector` and this downgraded component's\n                //   declaring `NgModule`'s injector as `finalModuleInjector`.\n                //   Note 1: If the `NgModule` is already bootstrapped, we just get its injector (we don't\n                //           bootstrap again).\n                //   Note 2: It is possible that (while there are multiple downgraded modules) this\n                //           downgraded component and its parent component both belong to the same NgModule.\n                //           In that case, we could have used the `parentInjector` as both\n                //           `finalModuleInjector` and `finalParentInjector`, but (for simplicity) we are\n                //           treating this case as if they belong to different `NgModule`s. That doesn't\n                //           really affect anything, since `parentInjector` has `moduleInjector` as ancestor\n                //           and trying to resolve `ComponentFactoryResolver` from either one will return\n                //           the same instance.\n                // If there is a parent component, use its injector as parent injector.\n                // If this is a \"top-level\" Angular component, use the module injector.\n                var finalParentInjector = parentInjector || moduleInjector;\n                // If this is a \"top-level\" Angular component or the parent component may belong to a\n                // different `NgModule`, use the module injector for module-specific dependencies.\n                // If there is a parent component that belongs to the same `NgModule`, use its injector.\n                var finalModuleInjector = moduleInjector || parentInjector;\n                var doDowngrade = function (injector, moduleInjector) {\n                    // Retrieve `ComponentFactoryResolver` from the injector tied to the `NgModule` this\n                    // component belongs to.\n                    var componentFactoryResolver = moduleInjector.get(ComponentFactoryResolver);\n                    var componentFactory = componentFactoryResolver.resolveComponentFactory(info.component);\n                    if (!componentFactory) {\n                        throw new Error(\"Expecting ComponentFactory for: \" + getTypeName(info.component));\n                    }\n                    var injectorPromise = new ParentInjectorPromise(element);\n                    var facade = new DowngradeComponentAdapter(element, attrs, scope, ngModel, injector, $injector, $compile, $parse, componentFactory, wrapCallback);\n                    var projectableNodes = facade.compileContents();\n                    facade.createComponent(projectableNodes);\n                    facade.setupInputs(isNgUpgradeLite, info.propagateDigest);\n                    facade.setupOutputs();\n                    facade.registerCleanup();\n                    injectorPromise.resolve(facade.getInjector());\n                    if (ranAsync) {\n                        // If this is run async, it is possible that it is not run inside a\n                        // digest and initial input values will not be detected.\n                        scope.$evalAsync(function () { });\n                    }\n                };\n                var downgradeFn = !isNgUpgradeLite ? doDowngrade : function (pInjector, mInjector) {\n                    if (!ngZone) {\n                        ngZone = pInjector.get(NgZone);\n                    }\n                    wrapCallback(function () { return doDowngrade(pInjector, mInjector); })();\n                };\n                // NOTE:\n                // Not using `ParentInjectorPromise.all()` (which is inherited from `SyncPromise`), because\n                // Closure Compiler (or some related tool) complains:\n                // `TypeError: ...$src$downgrade_component_ParentInjectorPromise.all is not a function`\n                SyncPromise.all([finalParentInjector, finalModuleInjector])\n                    .then(function (_a) {\n                    var _b = __read(_a, 2), pInjector = _b[0], mInjector = _b[1];\n                    return downgradeFn(pInjector, mInjector);\n                });\n                ranAsync = true;\n            }\n        };\n    };\n    // bracket-notation because of closure - see #14441\n    directiveFactory['$inject'] = [$COMPILE, $INJECTOR, $PARSE];\n    return directiveFactory;\n}\n/**\n * Synchronous promise-like object to wrap parent injectors,\n * to preserve the synchronous nature of AngularJS's `$compile`.\n */\nvar ParentInjectorPromise = /** @class */ (function (_super) {\n    __extends(ParentInjectorPromise, _super);\n    function ParentInjectorPromise(element) {\n        var _this = _super.call(this) || this;\n        _this.element = element;\n        _this.injectorKey = controllerKey(INJECTOR_KEY);\n        // Store the promise on the element.\n        element.data(_this.injectorKey, _this);\n        return _this;\n    }\n    ParentInjectorPromise.prototype.resolve = function (injector) {\n        // Store the real injector on the element.\n        this.element.data(this.injectorKey, injector);\n        // Release the element to prevent memory leaks.\n        this.element = null;\n        // Resolve the promise.\n        _super.prototype.resolve.call(this, injector);\n    };\n    return ParentInjectorPromise;\n}(SyncPromise));\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @description\n *\n * A helper function to allow an Angular service to be accessible from AngularJS.\n *\n * *Part of the [upgrade/static](api?query=upgrade%2Fstatic)\n * library for hybrid upgrade apps that support AoT compilation*\n *\n * This helper function returns a factory function that provides access to the Angular\n * service identified by the `token` parameter.\n *\n * @usageNotes\n * ### Examples\n *\n * First ensure that the service to be downgraded is provided in an `NgModule`\n * that will be part of the upgrade application. For example, let's assume we have\n * defined `HeroesService`\n *\n * {@example upgrade/static/ts/full/module.ts region=\"ng2-heroes-service\"}\n *\n * and that we have included this in our upgrade app `NgModule`\n *\n * {@example upgrade/static/ts/full/module.ts region=\"ng2-module\"}\n *\n * Now we can register the `downgradeInjectable` factory function for the service\n * on an AngularJS module.\n *\n * {@example upgrade/static/ts/full/module.ts region=\"downgrade-ng2-heroes-service\"}\n *\n * Inside an AngularJS component's controller we can get hold of the\n * downgraded service via the name we gave when downgrading.\n *\n * {@example upgrade/static/ts/full/module.ts region=\"example-app\"}\n *\n * <div class=\"alert is-important\">\n *\n *   When using `downgradeModule()`, downgraded injectables will not be available until the Angular\n *   module that provides them is instantiated. In order to be safe, you need to ensure that the\n *   downgraded injectables are not used anywhere _outside_ the part of the app where it is\n *   guaranteed that their module has been instantiated.\n *\n *   For example, it is _OK_ to use a downgraded service in an upgraded component that is only used\n *   from a downgraded Angular component provided by the same Angular module as the injectable, but\n *   it is _not OK_ to use it in an AngularJS component that may be used independently of Angular or\n *   use it in a downgraded Angular component from a different module.\n *\n * </div>\n *\n * @param token an `InjectionToken` that identifies a service provided from Angular.\n * @param downgradedModule the name of the downgraded module (if any) that the injectable\n * \"belongs to\", as returned by a call to `downgradeModule()`. It is the module, whose injector will\n * be used for instantiating the injectable.<br />\n * (This option is only necessary when using `downgradeModule()` to downgrade more than one Angular\n * module.)\n *\n * @returns a [factory function](https://docs.angularjs.org/guide/di) that can be\n * used to register the service on an AngularJS module.\n *\n * @publicApi\n */\nfunction downgradeInjectable(token, downgradedModule) {\n    if (downgradedModule === void 0) { downgradedModule = ''; }\n    var factory = function ($injector) {\n        var injectorKey = \"\" + INJECTOR_KEY + downgradedModule;\n        var injectableName = isFunction(token) ? getTypeName(token) : String(token);\n        var attemptedAction = \"instantiating injectable '\" + injectableName + \"'\";\n        validateInjectionKey($injector, downgradedModule, injectorKey, attemptedAction);\n        var injector = $injector.get(injectorKey);\n        return injector.get(token);\n    };\n    factory['$inject'] = [$INJECTOR];\n    return factory;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @publicApi\n */\nvar VERSION = new Version('8.2.14');\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// We have to do a little dance to get the ng1 injector into the module injector.\n// We store the ng1 injector so that the provider in the module injector can access it\n// Then we \"get\" the ng1 injector from the module injector, which triggers the provider to read\n// the stored injector and release the reference to it.\nvar tempInjectorRef = null;\nfunction setTempInjectorRef(injector) {\n    tempInjectorRef = injector;\n}\nfunction injectorFactory() {\n    if (!tempInjectorRef) {\n        throw new Error('Trying to get the AngularJS injector before it being set.');\n    }\n    var injector = tempInjectorRef;\n    tempInjectorRef = null; // clear the value to prevent memory leaks\n    return injector;\n}\nfunction rootScopeFactory(i) {\n    return i.get('$rootScope');\n}\nfunction compileFactory(i) {\n    return i.get('$compile');\n}\nfunction parseFactory(i) {\n    return i.get('$parse');\n}\nvar angular1Providers = [\n    // We must use exported named functions for the ng2 factories to keep the compiler happy:\n    // > Metadata collected contains an error that will be reported at runtime:\n    // >   Function calls are not supported.\n    // >   Consider replacing the function or lambda with a reference to an exported function\n    { provide: '$injector', useFactory: injectorFactory, deps: [] },\n    { provide: '$rootScope', useFactory: rootScopeFactory, deps: ['$injector'] },\n    { provide: '$compile', useFactory: compileFactory, deps: ['$injector'] },\n    { provide: '$parse', useFactory: parseFactory, deps: ['$injector'] }\n];\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar NgAdapterInjector = /** @class */ (function () {\n    function NgAdapterInjector(modInjector) {\n        this.modInjector = modInjector;\n    }\n    // When Angular locate a service in the component injector tree, the not found value is set to\n    // `NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR`. In such a case we should not walk up to the module\n    // injector.\n    // AngularJS only supports a single tree and should always check the module injector.\n    NgAdapterInjector.prototype.get = function (token, notFoundValue) {\n        if (notFoundValue === ɵNOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) {\n            return notFoundValue;\n        }\n        return this.modInjector.get(token, notFoundValue);\n    };\n    return NgAdapterInjector;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar moduleUid = 0;\n/**\n * @description\n *\n * A helper function for creating an AngularJS module that can bootstrap an Angular module\n * \"on-demand\" (possibly lazily) when a {@link downgradeComponent downgraded component} needs to be\n * instantiated.\n *\n * *Part of the [upgrade/static](api?query=upgrade/static) library for hybrid upgrade apps that\n * support AoT compilation.*\n *\n * It allows loading/bootstrapping the Angular part of a hybrid application lazily and not having to\n * pay the cost up-front. For example, you can have an AngularJS application that uses Angular for\n * specific routes and only instantiate the Angular modules if/when the user visits one of these\n * routes.\n *\n * The Angular module will be bootstrapped once (when requested for the first time) and the same\n * reference will be used from that point onwards.\n *\n * `downgradeModule()` requires either an `NgModuleFactory` or a function:\n * - `NgModuleFactory`: If you pass an `NgModuleFactory`, it will be used to instantiate a module\n *   using `platformBrowser`'s {@link PlatformRef#bootstrapModuleFactory bootstrapModuleFactory()}.\n * - `Function`: If you pass a function, it is expected to return a promise resolving to an\n *   `NgModuleRef`. The function is called with an array of extra {@link StaticProvider Providers}\n *   that are expected to be available from the returned `NgModuleRef`'s `Injector`.\n *\n * `downgradeModule()` returns the name of the created AngularJS wrapper module. You can use it to\n * declare a dependency in your main AngularJS module.\n *\n * {@example upgrade/static/ts/lite/module.ts region=\"basic-how-to\"}\n *\n * For more details on how to use `downgradeModule()` see\n * [Upgrading for Performance](guide/upgrade-performance).\n *\n * @usageNotes\n *\n * Apart from `UpgradeModule`, you can use the rest of the `upgrade/static` helpers as usual to\n * build a hybrid application. Note that the Angular pieces (e.g. downgraded services) will not be\n * available until the downgraded module has been bootstrapped, i.e. by instantiating a downgraded\n * component.\n *\n * <div class=\"alert is-important\">\n *\n *   You cannot use `downgradeModule()` and `UpgradeModule` in the same hybrid application.<br />\n *   Use one or the other.\n *\n * </div>\n *\n * ### Differences with `UpgradeModule`\n *\n * Besides their different API, there are two important internal differences between\n * `downgradeModule()` and `UpgradeModule` that affect the behavior of hybrid applications:\n *\n * 1. Unlike `UpgradeModule`, `downgradeModule()` does not bootstrap the main AngularJS module\n *    inside the {@link NgZone Angular zone}.\n * 2. Unlike `UpgradeModule`, `downgradeModule()` does not automatically run a\n *    [$digest()](https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$digest) when changes are\n *    detected in the Angular part of the application.\n *\n * What this means is that applications using `UpgradeModule` will run change detection more\n * frequently in order to ensure that both frameworks are properly notified about possible changes.\n * This will inevitably result in more change detection runs than necessary.\n *\n * `downgradeModule()`, on the other side, does not try to tie the two change detection systems as\n * tightly, restricting the explicit change detection runs only to cases where it knows it is\n * necessary (e.g. when the inputs of a downgraded component change). This improves performance,\n * especially in change-detection-heavy applications, but leaves it up to the developer to manually\n * notify each framework as needed.\n *\n * For a more detailed discussion of the differences and their implications, see\n * [Upgrading for Performance](guide/upgrade-performance).\n *\n * <div class=\"alert is-helpful\">\n *\n *   You can manually trigger a change detection run in AngularJS using\n *   [scope.$apply(...)](https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$apply) or\n *   [$rootScope.$digest()](https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$digest).\n *\n *   You can manually trigger a change detection run in Angular using {@link NgZone#run\n *   ngZone.run(...)}.\n *\n * </div>\n *\n * ### Downgrading multiple modules\n *\n * It is possible to downgrade multiple modules and include them in an AngularJS application. In\n * that case, each downgraded module will be bootstrapped when an associated downgraded component or\n * injectable needs to be instantiated.\n *\n * Things to keep in mind, when downgrading multiple modules:\n *\n * - Each downgraded component/injectable needs to be explicitly associated with a downgraded\n *   module. See `downgradeComponent()` and `downgradeInjectable()` for more details.\n *\n * - If you want some injectables to be shared among all downgraded modules, you can provide them as\n *   `StaticProvider`s, when creating the `PlatformRef` (e.g. via `platformBrowser` or\n *   `platformBrowserDynamic`).\n *\n * - When using {@link PlatformRef#bootstrapmodule `bootstrapModule()`} or\n *   {@link PlatformRef#bootstrapmodulefactory `bootstrapModuleFactory()`} to bootstrap the\n *   downgraded modules, each one is considered a \"root\" module. As a consequence, a new instance\n *   will be created for every injectable provided in `\"root\"` (via\n *   {@link Injectable#providedIn `providedIn`}).\n *   If this is not your intention, you can have a shared module (that will act as act as the \"root\"\n *   module) and create all downgraded modules using that module's injector:\n *\n *   {@example upgrade/static/ts/lite-multi-shared/module.ts region=\"shared-root-module\"}\n *\n * @publicApi\n */\nfunction downgradeModule(moduleFactoryOrBootstrapFn) {\n    var lazyModuleName = UPGRADE_MODULE_NAME + \".lazy\" + ++moduleUid;\n    var lazyModuleRefKey = \"\" + LAZY_MODULE_REF + lazyModuleName;\n    var lazyInjectorKey = \"\" + INJECTOR_KEY + lazyModuleName;\n    var bootstrapFn = isFunction(moduleFactoryOrBootstrapFn) ?\n        moduleFactoryOrBootstrapFn :\n        function (extraProviders) {\n            return platformBrowser(extraProviders).bootstrapModuleFactory(moduleFactoryOrBootstrapFn);\n        };\n    var injector;\n    // Create an ng1 module to bootstrap.\n    module_(lazyModuleName, [])\n        .constant(UPGRADE_APP_TYPE_KEY, 3 /* Lite */)\n        .factory(INJECTOR_KEY, [lazyInjectorKey, identity])\n        .factory(lazyInjectorKey, function () {\n        if (!injector) {\n            throw new Error('Trying to get the Angular injector before bootstrapping the corresponding ' +\n                'Angular module.');\n        }\n        return injector;\n    })\n        .factory(LAZY_MODULE_REF, [lazyModuleRefKey, identity])\n        .factory(lazyModuleRefKey, [\n        $INJECTOR,\n        function ($injector) {\n            setTempInjectorRef($injector);\n            var result = {\n                promise: bootstrapFn(angular1Providers).then(function (ref) {\n                    injector = result.injector = new NgAdapterInjector(ref.injector);\n                    injector.get($INJECTOR);\n                    return injector;\n                })\n            };\n            return result;\n        }\n    ])\n        .config([\n        $INJECTOR, $PROVIDE,\n        function ($injector, $provide) {\n            $provide.constant(DOWNGRADED_MODULE_COUNT_KEY, getDowngradedModuleCount($injector) + 1);\n        }\n    ]);\n    return lazyModuleName;\n}\nfunction identity(x) {\n    return x;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Constants\nvar REQUIRE_PREFIX_RE = /^(\\^\\^?)?(\\?)?(\\^\\^?)?/;\n// Classes\nvar UpgradeHelper = /** @class */ (function () {\n    function UpgradeHelper(injector, name, elementRef, directive) {\n        this.injector = injector;\n        this.name = name;\n        this.$injector = injector.get($INJECTOR);\n        this.$compile = this.$injector.get($COMPILE);\n        this.$controller = this.$injector.get($CONTROLLER);\n        this.element = elementRef.nativeElement;\n        this.$element = element(this.element);\n        this.directive = directive || UpgradeHelper.getDirective(this.$injector, name);\n    }\n    UpgradeHelper.getDirective = function ($injector, name) {\n        var directives = $injector.get(name + 'Directive');\n        if (directives.length > 1) {\n            throw new Error(\"Only support single directive definition for: \" + name);\n        }\n        var directive = directives[0];\n        // AngularJS will transform `link: xyz` to `compile: () => xyz`. So we can only tell there was a\n        // user-defined `compile` if there is no `link`. In other cases, we will just ignore `compile`.\n        if (directive.compile && !directive.link)\n            notSupported(name, 'compile');\n        if (directive.replace)\n            notSupported(name, 'replace');\n        if (directive.terminal)\n            notSupported(name, 'terminal');\n        return directive;\n    };\n    UpgradeHelper.getTemplate = function ($injector, directive, fetchRemoteTemplate, $element) {\n        if (fetchRemoteTemplate === void 0) { fetchRemoteTemplate = false; }\n        if (directive.template !== undefined) {\n            return getOrCall(directive.template, $element);\n        }\n        else if (directive.templateUrl) {\n            var $templateCache_1 = $injector.get($TEMPLATE_CACHE);\n            var url_1 = getOrCall(directive.templateUrl, $element);\n            var template = $templateCache_1.get(url_1);\n            if (template !== undefined) {\n                return template;\n            }\n            else if (!fetchRemoteTemplate) {\n                throw new Error('loading directive templates asynchronously is not supported');\n            }\n            return new Promise(function (resolve, reject) {\n                var $httpBackend = $injector.get($HTTP_BACKEND);\n                $httpBackend('GET', url_1, null, function (status, response) {\n                    if (status === 200) {\n                        resolve($templateCache_1.put(url_1, response));\n                    }\n                    else {\n                        reject(\"GET component template from '\" + url_1 + \"' returned '\" + status + \": \" + response + \"'\");\n                    }\n                });\n            });\n        }\n        else {\n            throw new Error(\"Directive '\" + directive.name + \"' is not a component, it is missing template.\");\n        }\n    };\n    UpgradeHelper.prototype.buildController = function (controllerType, $scope) {\n        // TODO: Document that we do not pre-assign bindings on the controller instance.\n        // Quoted properties below so that this code can be optimized with Closure Compiler.\n        var locals = { '$scope': $scope, '$element': this.$element };\n        var controller = this.$controller(controllerType, locals, null, this.directive.controllerAs);\n        this.$element.data(controllerKey(this.directive.name), controller);\n        return controller;\n    };\n    UpgradeHelper.prototype.compileTemplate = function (template) {\n        if (template === undefined) {\n            template =\n                UpgradeHelper.getTemplate(this.$injector, this.directive, false, this.$element);\n        }\n        return this.compileHtml(template);\n    };\n    UpgradeHelper.prototype.onDestroy = function ($scope, controllerInstance) {\n        if (controllerInstance && isFunction(controllerInstance.$onDestroy)) {\n            controllerInstance.$onDestroy();\n        }\n        $scope.$destroy();\n        // Clean the jQuery/jqLite data on the component+child elements.\n        // Equivelent to how jQuery/jqLite invoke `cleanData` on an Element (this.element)\n        //  https://github.com/jquery/jquery/blob/e743cbd28553267f955f71ea7248377915613fd9/src/manipulation.js#L223\n        //  https://github.com/angular/angular.js/blob/26ddc5f830f902a3d22f4b2aab70d86d4d688c82/src/jqLite.js#L306-L312\n        // `cleanData` will invoke the AngularJS `$destroy` DOM event\n        //  https://github.com/angular/angular.js/blob/26ddc5f830f902a3d22f4b2aab70d86d4d688c82/src/Angular.js#L1911-L1924\n        element.cleanData([this.element]);\n        element.cleanData(this.element.querySelectorAll('*'));\n    };\n    UpgradeHelper.prototype.prepareTransclusion = function () {\n        var _this = this;\n        var transclude = this.directive.transclude;\n        var contentChildNodes = this.extractChildNodes();\n        var attachChildrenFn = function (scope, cloneAttachFn) {\n            // Since AngularJS v1.5.8, `cloneAttachFn` will try to destroy the transclusion scope if\n            // `$template` is empty. Since the transcluded content comes from Angular, not AngularJS,\n            // there will be no transclusion scope here.\n            // Provide a dummy `scope.$destroy()` method to prevent `cloneAttachFn` from throwing.\n            scope = scope || { $destroy: function () { return undefined; } };\n            return cloneAttachFn($template, scope);\n        };\n        var $template = contentChildNodes;\n        if (transclude) {\n            var slots_1 = Object.create(null);\n            if (typeof transclude === 'object') {\n                $template = [];\n                var slotMap_1 = Object.create(null);\n                var filledSlots_1 = Object.create(null);\n                // Parse the element selectors.\n                Object.keys(transclude).forEach(function (slotName) {\n                    var selector = transclude[slotName];\n                    var optional = selector.charAt(0) === '?';\n                    selector = optional ? selector.substring(1) : selector;\n                    slotMap_1[selector] = slotName;\n                    slots_1[slotName] = null; // `null`: Defined but not yet filled.\n                    filledSlots_1[slotName] = optional; // Consider optional slots as filled.\n                });\n                // Add the matching elements into their slot.\n                contentChildNodes.forEach(function (node) {\n                    var slotName = slotMap_1[directiveNormalize(node.nodeName.toLowerCase())];\n                    if (slotName) {\n                        filledSlots_1[slotName] = true;\n                        slots_1[slotName] = slots_1[slotName] || [];\n                        slots_1[slotName].push(node);\n                    }\n                    else {\n                        $template.push(node);\n                    }\n                });\n                // Check for required slots that were not filled.\n                Object.keys(filledSlots_1).forEach(function (slotName) {\n                    if (!filledSlots_1[slotName]) {\n                        throw new Error(\"Required transclusion slot '\" + slotName + \"' on directive: \" + _this.name);\n                    }\n                });\n                Object.keys(slots_1).filter(function (slotName) { return slots_1[slotName]; }).forEach(function (slotName) {\n                    var nodes = slots_1[slotName];\n                    slots_1[slotName] = function (scope, cloneAttach) {\n                        return cloneAttach(nodes, scope);\n                    };\n                });\n            }\n            // Attach `$$slots` to default slot transclude fn.\n            attachChildrenFn.$$slots = slots_1;\n            // AngularJS v1.6+ ignores empty or whitespace-only transcluded text nodes. But Angular\n            // removes all text content after the first interpolation and updates it later, after\n            // evaluating the expressions. This would result in AngularJS failing to recognize text\n            // nodes that start with an interpolation as transcluded content and use the fallback\n            // content instead.\n            // To avoid this issue, we add a\n            // [zero-width non-joiner character](https://en.wikipedia.org/wiki/Zero-width_non-joiner)\n            // to empty text nodes (which can only be a result of Angular removing their initial content).\n            // NOTE: Transcluded text content that starts with whitespace followed by an interpolation\n            //       will still fail to be detected by AngularJS v1.6+\n            $template.forEach(function (node) {\n                if (node.nodeType === Node.TEXT_NODE && !node.nodeValue) {\n                    node.nodeValue = '\\u200C';\n                }\n            });\n        }\n        return attachChildrenFn;\n    };\n    UpgradeHelper.prototype.resolveAndBindRequiredControllers = function (controllerInstance) {\n        var directiveRequire = this.getDirectiveRequire();\n        var requiredControllers = this.resolveRequire(directiveRequire);\n        if (controllerInstance && this.directive.bindToController && isMap(directiveRequire)) {\n            var requiredControllersMap_1 = requiredControllers;\n            Object.keys(requiredControllersMap_1).forEach(function (key) {\n                controllerInstance[key] = requiredControllersMap_1[key];\n            });\n        }\n        return requiredControllers;\n    };\n    UpgradeHelper.prototype.compileHtml = function (html) {\n        this.element.innerHTML = html;\n        return this.$compile(this.element.childNodes);\n    };\n    UpgradeHelper.prototype.extractChildNodes = function () {\n        var childNodes = [];\n        var childNode;\n        while (childNode = this.element.firstChild) {\n            this.element.removeChild(childNode);\n            childNodes.push(childNode);\n        }\n        return childNodes;\n    };\n    UpgradeHelper.prototype.getDirectiveRequire = function () {\n        var require = this.directive.require || (this.directive.controller && this.directive.name);\n        if (isMap(require)) {\n            Object.keys(require).forEach(function (key) {\n                var value = require[key];\n                var match = value.match(REQUIRE_PREFIX_RE);\n                var name = value.substring(match[0].length);\n                if (!name) {\n                    require[key] = match[0] + key;\n                }\n            });\n        }\n        return require;\n    };\n    UpgradeHelper.prototype.resolveRequire = function (require, controllerInstance) {\n        var _this = this;\n        if (!require) {\n            return null;\n        }\n        else if (Array.isArray(require)) {\n            return require.map(function (req) { return _this.resolveRequire(req); });\n        }\n        else if (typeof require === 'object') {\n            var value_1 = {};\n            Object.keys(require).forEach(function (key) { return value_1[key] = _this.resolveRequire(require[key]); });\n            return value_1;\n        }\n        else if (typeof require === 'string') {\n            var match = require.match(REQUIRE_PREFIX_RE);\n            var inheritType = match[1] || match[3];\n            var name_1 = require.substring(match[0].length);\n            var isOptional = !!match[2];\n            var searchParents = !!inheritType;\n            var startOnParent = inheritType === '^^';\n            var ctrlKey = controllerKey(name_1);\n            var elem = startOnParent ? this.$element.parent() : this.$element;\n            var value = searchParents ? elem.inheritedData(ctrlKey) : elem.data(ctrlKey);\n            if (!value && !isOptional) {\n                throw new Error(\"Unable to find required '\" + require + \"' in upgraded directive '\" + this.name + \"'.\");\n            }\n            return value;\n        }\n        else {\n            throw new Error(\"Unrecognized 'require' syntax on upgraded directive '\" + this.name + \"': \" + require);\n        }\n    };\n    return UpgradeHelper;\n}());\nfunction getOrCall(property) {\n    var args = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        args[_i - 1] = arguments[_i];\n    }\n    return isFunction(property) ? property.apply(void 0, __spread(args)) : property;\n}\n// NOTE: Only works for `typeof T !== 'object'`.\nfunction isMap(value) {\n    return value && !Array.isArray(value) && typeof value === 'object';\n}\nfunction notSupported(name, feature) {\n    throw new Error(\"Upgraded directive '\" + name + \"' contains unsupported feature: '\" + feature + \"'.\");\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar NOT_SUPPORTED = 'NOT_SUPPORTED';\nvar INITIAL_VALUE$1 = {\n    __UNINITIALIZED__: true\n};\nvar Bindings = /** @class */ (function () {\n    function Bindings() {\n        this.twoWayBoundProperties = [];\n        this.twoWayBoundLastValues = [];\n        this.expressionBoundProperties = [];\n        this.propertyToOutputMap = {};\n    }\n    return Bindings;\n}());\n/**\n * @description\n *\n * A helper class that allows an AngularJS component to be used from Angular.\n *\n * *Part of the [upgrade/static](api?query=upgrade%2Fstatic)\n * library for hybrid upgrade apps that support AoT compilation.*\n *\n * This helper class should be used as a base class for creating Angular directives\n * that wrap AngularJS components that need to be \"upgraded\".\n *\n * @usageNotes\n * ### Examples\n *\n * Let's assume that you have an AngularJS component called `ng1Hero` that needs\n * to be made available in Angular templates.\n *\n * {@example upgrade/static/ts/full/module.ts region=\"ng1-hero\"}\n *\n * We must create a `Directive` that will make this AngularJS component\n * available inside Angular templates.\n *\n * {@example upgrade/static/ts/full/module.ts region=\"ng1-hero-wrapper\"}\n *\n * In this example you can see that we must derive from the `UpgradeComponent`\n * base class but also provide an {@link Directive `@Directive`} decorator. This is\n * because the AoT compiler requires that this information is statically available at\n * compile time.\n *\n * Note that we must do the following:\n * * specify the directive's selector (`ng1-hero`)\n * * specify all inputs and outputs that the AngularJS component expects\n * * derive from `UpgradeComponent`\n * * call the base class from the constructor, passing\n *   * the AngularJS name of the component (`ng1Hero`)\n *   * the `ElementRef` and `Injector` for the component wrapper\n *\n * @publicApi\n */\nvar UpgradeComponent = /** @class */ (function () {\n    /**\n     * Create a new `UpgradeComponent` instance. You should not normally need to do this.\n     * Instead you should derive a new class from this one and call the super constructor\n     * from the base class.\n     *\n     * {@example upgrade/static/ts/full/module.ts region=\"ng1-hero-wrapper\" }\n     *\n     * * The `name` parameter should be the name of the AngularJS directive.\n     * * The `elementRef` and `injector` parameters should be acquired from Angular by dependency\n     *   injection into the base class constructor.\n     */\n    function UpgradeComponent(name, elementRef, injector) {\n        this.name = name;\n        this.elementRef = elementRef;\n        this.injector = injector;\n        this.helper = new UpgradeHelper(injector, name, elementRef);\n        this.$injector = this.helper.$injector;\n        this.element = this.helper.element;\n        this.$element = this.helper.$element;\n        this.directive = this.helper.directive;\n        this.bindings = this.initializeBindings(this.directive);\n        // We ask for the AngularJS scope from the Angular injector, since\n        // we will put the new component scope onto the new injector for each component\n        var $parentScope = injector.get($SCOPE);\n        // QUESTION 1: Should we create an isolated scope if the scope is only true?\n        // QUESTION 2: Should we make the scope accessible through `$element.scope()/isolateScope()`?\n        this.$componentScope = $parentScope.$new(!!this.directive.scope);\n        this.initializeOutputs();\n    }\n    UpgradeComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        // Collect contents, insert and compile template\n        var attachChildNodes = this.helper.prepareTransclusion();\n        var linkFn = this.helper.compileTemplate();\n        // Instantiate controller\n        var controllerType = this.directive.controller;\n        var bindToController = this.directive.bindToController;\n        if (controllerType) {\n            this.controllerInstance = this.helper.buildController(controllerType, this.$componentScope);\n        }\n        else if (bindToController) {\n            throw new Error(\"Upgraded directive '\" + this.directive.name + \"' specifies 'bindToController' but no controller.\");\n        }\n        // Set up outputs\n        this.bindingDestination = bindToController ? this.controllerInstance : this.$componentScope;\n        this.bindOutputs();\n        // Require other controllers\n        var requiredControllers = this.helper.resolveAndBindRequiredControllers(this.controllerInstance);\n        // Hook: $onChanges\n        if (this.pendingChanges) {\n            this.forwardChanges(this.pendingChanges);\n            this.pendingChanges = null;\n        }\n        // Hook: $onInit\n        if (this.controllerInstance && isFunction(this.controllerInstance.$onInit)) {\n            this.controllerInstance.$onInit();\n        }\n        // Hook: $doCheck\n        if (this.controllerInstance && isFunction(this.controllerInstance.$doCheck)) {\n            var callDoCheck = function () { return _this.controllerInstance.$doCheck(); };\n            this.unregisterDoCheckWatcher = this.$componentScope.$parent.$watch(callDoCheck);\n            callDoCheck();\n        }\n        // Linking\n        var link = this.directive.link;\n        var preLink = (typeof link == 'object') && link.pre;\n        var postLink = (typeof link == 'object') ? link.post : link;\n        var attrs = NOT_SUPPORTED;\n        var transcludeFn = NOT_SUPPORTED;\n        if (preLink) {\n            preLink(this.$componentScope, this.$element, attrs, requiredControllers, transcludeFn);\n        }\n        linkFn(this.$componentScope, null, { parentBoundTranscludeFn: attachChildNodes });\n        if (postLink) {\n            postLink(this.$componentScope, this.$element, attrs, requiredControllers, transcludeFn);\n        }\n        // Hook: $postLink\n        if (this.controllerInstance && isFunction(this.controllerInstance.$postLink)) {\n            this.controllerInstance.$postLink();\n        }\n    };\n    UpgradeComponent.prototype.ngOnChanges = function (changes) {\n        if (!this.bindingDestination) {\n            this.pendingChanges = changes;\n        }\n        else {\n            this.forwardChanges(changes);\n        }\n    };\n    UpgradeComponent.prototype.ngDoCheck = function () {\n        var _this = this;\n        var twoWayBoundProperties = this.bindings.twoWayBoundProperties;\n        var twoWayBoundLastValues = this.bindings.twoWayBoundLastValues;\n        var propertyToOutputMap = this.bindings.propertyToOutputMap;\n        twoWayBoundProperties.forEach(function (propName, idx) {\n            var newValue = _this.bindingDestination[propName];\n            var oldValue = twoWayBoundLastValues[idx];\n            if (!ɵlooseIdentical(newValue, oldValue)) {\n                var outputName = propertyToOutputMap[propName];\n                var eventEmitter = _this[outputName];\n                eventEmitter.emit(newValue);\n                twoWayBoundLastValues[idx] = newValue;\n            }\n        });\n    };\n    UpgradeComponent.prototype.ngOnDestroy = function () {\n        if (isFunction(this.unregisterDoCheckWatcher)) {\n            this.unregisterDoCheckWatcher();\n        }\n        this.helper.onDestroy(this.$componentScope, this.controllerInstance);\n    };\n    UpgradeComponent.prototype.initializeBindings = function (directive) {\n        var _this = this;\n        var btcIsObject = typeof directive.bindToController === 'object';\n        if (btcIsObject && Object.keys(directive.scope).length) {\n            throw new Error(\"Binding definitions on scope and controller at the same time is not supported.\");\n        }\n        var context = (btcIsObject) ? directive.bindToController : directive.scope;\n        var bindings = new Bindings();\n        if (typeof context == 'object') {\n            Object.keys(context).forEach(function (propName) {\n                var definition = context[propName];\n                var bindingType = definition.charAt(0);\n                // QUESTION: What about `=*`? Ignore? Throw? Support?\n                switch (bindingType) {\n                    case '@':\n                    case '<':\n                        // We don't need to do anything special. They will be defined as inputs on the\n                        // upgraded component facade and the change propagation will be handled by\n                        // `ngOnChanges()`.\n                        break;\n                    case '=':\n                        bindings.twoWayBoundProperties.push(propName);\n                        bindings.twoWayBoundLastValues.push(INITIAL_VALUE$1);\n                        bindings.propertyToOutputMap[propName] = propName + 'Change';\n                        break;\n                    case '&':\n                        bindings.expressionBoundProperties.push(propName);\n                        bindings.propertyToOutputMap[propName] = propName;\n                        break;\n                    default:\n                        var json = JSON.stringify(context);\n                        throw new Error(\"Unexpected mapping '\" + bindingType + \"' in '\" + json + \"' in '\" + _this.name + \"' directive.\");\n                }\n            });\n        }\n        return bindings;\n    };\n    UpgradeComponent.prototype.initializeOutputs = function () {\n        var _this = this;\n        // Initialize the outputs for `=` and `&` bindings\n        this.bindings.twoWayBoundProperties.concat(this.bindings.expressionBoundProperties)\n            .forEach(function (propName) {\n            var outputName = _this.bindings.propertyToOutputMap[propName];\n            _this[outputName] = new EventEmitter();\n        });\n    };\n    UpgradeComponent.prototype.bindOutputs = function () {\n        var _this = this;\n        // Bind `&` bindings to the corresponding outputs\n        this.bindings.expressionBoundProperties.forEach(function (propName) {\n            var outputName = _this.bindings.propertyToOutputMap[propName];\n            var emitter = _this[outputName];\n            _this.bindingDestination[propName] = function (value) { return emitter.emit(value); };\n        });\n    };\n    UpgradeComponent.prototype.forwardChanges = function (changes) {\n        var _this = this;\n        // Forward input changes to `bindingDestination`\n        Object.keys(changes).forEach(function (propName) { return _this.bindingDestination[propName] = changes[propName].currentValue; });\n        if (isFunction(this.bindingDestination.$onChanges)) {\n            this.bindingDestination.$onChanges(changes);\n        }\n    };\n    return UpgradeComponent;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @description\n *\n * An `NgModule`, which you import to provide AngularJS core services,\n * and has an instance method used to bootstrap the hybrid upgrade application.\n *\n * *Part of the [upgrade/static](api?query=upgrade/static)\n * library for hybrid upgrade apps that support AoT compilation*\n *\n * The `upgrade/static` package contains helpers that allow AngularJS and Angular components\n * to be used together inside a hybrid upgrade application, which supports AoT compilation.\n *\n * Specifically, the classes and functions in the `upgrade/static` module allow the following:\n *\n * 1. Creation of an Angular directive that wraps and exposes an AngularJS component so\n *    that it can be used in an Angular template. See `UpgradeComponent`.\n * 2. Creation of an AngularJS directive that wraps and exposes an Angular component so\n *    that it can be used in an AngularJS template. See `downgradeComponent`.\n * 3. Creation of an Angular root injector provider that wraps and exposes an AngularJS\n *    service so that it can be injected into an Angular context. See\n *    {@link UpgradeModule#upgrading-an-angular-1-service Upgrading an AngularJS service} below.\n * 4. Creation of an AngularJS service that wraps and exposes an Angular injectable\n *    so that it can be injected into an AngularJS context. See `downgradeInjectable`.\n * 3. Bootstrapping of a hybrid Angular application which contains both of the frameworks\n *    coexisting in a single application.\n *\n * @usageNotes\n *\n * ```ts\n * import {UpgradeModule} from '@angular/upgrade/static';\n * ```\n *\n * See also the {@link UpgradeModule#examples examples} below.\n *\n * ### Mental Model\n *\n * When reasoning about how a hybrid application works it is useful to have a mental model which\n * describes what is happening and explains what is happening at the lowest level.\n *\n * 1. There are two independent frameworks running in a single application, each framework treats\n *    the other as a black box.\n * 2. Each DOM element on the page is owned exactly by one framework. Whichever framework\n *    instantiated the element is the owner. Each framework only updates/interacts with its own\n *    DOM elements and ignores others.\n * 3. AngularJS directives always execute inside the AngularJS framework codebase regardless of\n *    where they are instantiated.\n * 4. Angular components always execute inside the Angular framework codebase regardless of\n *    where they are instantiated.\n * 5. An AngularJS component can be \"upgraded\"\" to an Angular component. This is achieved by\n *    defining an Angular directive, which bootstraps the AngularJS component at its location\n *    in the DOM. See `UpgradeComponent`.\n * 6. An Angular component can be \"downgraded\" to an AngularJS component. This is achieved by\n *    defining an AngularJS directive, which bootstraps the Angular component at its location\n *    in the DOM. See `downgradeComponent`.\n * 7. Whenever an \"upgraded\"/\"downgraded\" component is instantiated the host element is owned by\n *    the framework doing the instantiation. The other framework then instantiates and owns the\n *    view for that component.\n *    1. This implies that the component bindings will always follow the semantics of the\n *       instantiation framework.\n *    2. The DOM attributes are parsed by the framework that owns the current template. So\n *       attributes in AngularJS templates must use kebab-case, while AngularJS templates must use\n *       camelCase.\n *    3. However the template binding syntax will always use the Angular style, e.g. square\n *       brackets (`[...]`) for property binding.\n * 8. Angular is bootstrapped first; AngularJS is bootstrapped second. AngularJS always owns the\n *    root component of the application.\n * 9. The new application is running in an Angular zone, and therefore it no longer needs calls to\n *    `$apply()`.\n *\n * ### The `UpgradeModule` class\n *\n * This class is an `NgModule`, which you import to provide AngularJS core services,\n * and has an instance method used to bootstrap the hybrid upgrade application.\n *\n * * Core AngularJS services\n *   Importing this `NgModule` will add providers for the core\n *   [AngularJS services](https://docs.angularjs.org/api/ng/service) to the root injector.\n *\n * * Bootstrap\n *   The runtime instance of this class contains a {@link UpgradeModule#bootstrap `bootstrap()`}\n *   method, which you use to bootstrap the top level AngularJS module onto an element in the\n *   DOM for the hybrid upgrade app.\n *\n *   It also contains properties to access the {@link UpgradeModule#injector root injector}, the\n *   bootstrap `NgZone` and the\n *   [AngularJS $injector](https://docs.angularjs.org/api/auto/service/$injector).\n *\n * ### Examples\n *\n * Import the `UpgradeModule` into your top level {@link NgModule Angular `NgModule`}.\n *\n * {@example upgrade/static/ts/full/module.ts region='ng2-module'}\n *\n * Then inject `UpgradeModule` into your Angular `NgModule` and use it to bootstrap the top level\n * [AngularJS module](https://docs.angularjs.org/api/ng/type/angular.Module) in the\n * `ngDoBootstrap()` method.\n *\n * {@example upgrade/static/ts/full/module.ts region='bootstrap-ng1'}\n *\n * Finally, kick off the whole process, by bootstraping your top level Angular `NgModule`.\n *\n * {@example upgrade/static/ts/full/module.ts region='bootstrap-ng2'}\n *\n * {@a upgrading-an-angular-1-service}\n * ### Upgrading an AngularJS service\n *\n * There is no specific API for upgrading an AngularJS service. Instead you should just follow the\n * following recipe:\n *\n * Let's say you have an AngularJS service:\n *\n * {@example upgrade/static/ts/full/module.ts region=\"ng1-text-formatter-service\"}\n *\n * Then you should define an Angular provider to be included in your `NgModule` `providers`\n * property.\n *\n * {@example upgrade/static/ts/full/module.ts region=\"upgrade-ng1-service\"}\n *\n * Then you can use the \"upgraded\" AngularJS service by injecting it into an Angular component\n * or service.\n *\n * {@example upgrade/static/ts/full/module.ts region=\"use-ng1-upgraded-service\"}\n *\n * @publicApi\n */\nvar UpgradeModule = /** @class */ (function () {\n    function UpgradeModule(\n    /** The root `Injector` for the upgrade application. */\n    injector, \n    /** The bootstrap zone for the upgrade application */\n    ngZone) {\n        this.ngZone = ngZone;\n        this.injector = new NgAdapterInjector(injector);\n    }\n    /**\n     * Bootstrap an AngularJS application from this NgModule\n     * @param element the element on which to bootstrap the AngularJS application\n     * @param [modules] the AngularJS modules to bootstrap for this application\n     * @param [config] optional extra AngularJS bootstrap configuration\n     */\n    UpgradeModule.prototype.bootstrap = function (element$1, modules, config /*angular.IAngularBootstrapConfig*/) {\n        var _this = this;\n        if (modules === void 0) { modules = []; }\n        var INIT_MODULE_NAME = UPGRADE_MODULE_NAME + '.init';\n        // Create an ng1 module to bootstrap\n        var initModule = module_(INIT_MODULE_NAME, [])\n            .constant(UPGRADE_APP_TYPE_KEY, 2 /* Static */)\n            .value(INJECTOR_KEY, this.injector)\n            .factory(LAZY_MODULE_REF, [INJECTOR_KEY, function (injector) { return ({ injector: injector }); }])\n            .config([\n            $PROVIDE, $INJECTOR,\n            function ($provide, $injector) {\n                if ($injector.has($$TESTABILITY)) {\n                    $provide.decorator($$TESTABILITY, [\n                        $DELEGATE,\n                        function (testabilityDelegate) {\n                            var originalWhenStable = testabilityDelegate.whenStable;\n                            var injector = _this.injector;\n                            // Cannot use arrow function below because we need the context\n                            var newWhenStable = function (callback) {\n                                originalWhenStable.call(testabilityDelegate, function () {\n                                    var ng2Testability = injector.get(Testability);\n                                    if (ng2Testability.isStable()) {\n                                        callback();\n                                    }\n                                    else {\n                                        ng2Testability.whenStable(newWhenStable.bind(testabilityDelegate, callback));\n                                    }\n                                });\n                            };\n                            testabilityDelegate.whenStable = newWhenStable;\n                            return testabilityDelegate;\n                        }\n                    ]);\n                }\n                if ($injector.has($INTERVAL)) {\n                    $provide.decorator($INTERVAL, [\n                        $DELEGATE,\n                        function (intervalDelegate) {\n                            // Wrap the $interval service so that setInterval is called outside NgZone,\n                            // but the callback is still invoked within it. This is so that $interval\n                            // won't block stability, which preserves the behavior from AngularJS.\n                            var wrappedInterval = function (fn, delay, count, invokeApply) {\n                                var pass = [];\n                                for (var _i = 4; _i < arguments.length; _i++) {\n                                    pass[_i - 4] = arguments[_i];\n                                }\n                                return _this.ngZone.runOutsideAngular(function () {\n                                    return intervalDelegate.apply(void 0, __spread([function () {\n                                            var args = [];\n                                            for (var _i = 0; _i < arguments.length; _i++) {\n                                                args[_i] = arguments[_i];\n                                            }\n                                            // Run callback in the next VM turn - $interval calls\n                                            // $rootScope.$apply, and running the callback in NgZone will\n                                            // cause a '$digest already in progress' error if it's in the\n                                            // same vm turn.\n                                            setTimeout(function () { _this.ngZone.run(function () { return fn.apply(void 0, __spread(args)); }); });\n                                        }, delay, count, invokeApply], pass));\n                                });\n                            };\n                            wrappedInterval['cancel'] = intervalDelegate.cancel;\n                            return wrappedInterval;\n                        }\n                    ]);\n                }\n            }\n        ])\n            .run([\n            $INJECTOR,\n            function ($injector) {\n                _this.$injector = $injector;\n                // Initialize the ng1 $injector provider\n                setTempInjectorRef($injector);\n                _this.injector.get($INJECTOR);\n                // Put the injector on the DOM, so that it can be \"required\"\n                element(element$1).data(controllerKey(INJECTOR_KEY), _this.injector);\n                // Wire up the ng1 rootScope to run a digest cycle whenever the zone settles\n                // We need to do this in the next tick so that we don't prevent the bootup\n                // stabilizing\n                setTimeout(function () {\n                    var $rootScope = $injector.get('$rootScope');\n                    var subscription = _this.ngZone.onMicrotaskEmpty.subscribe(function () {\n                        if ($rootScope.$$phase) {\n                            if (isDevMode()) {\n                                console.warn('A digest was triggered while one was already in progress. This may mean that something is triggering digests outside the Angular zone.');\n                            }\n                            return $rootScope.$evalAsync();\n                        }\n                        return $rootScope.$digest();\n                    });\n                    $rootScope.$on('$destroy', function () { subscription.unsubscribe(); });\n                }, 0);\n            }\n        ]);\n        var upgradeModule = module_(UPGRADE_MODULE_NAME, [INIT_MODULE_NAME].concat(modules));\n        // Make sure resumeBootstrap() only exists if the current bootstrap is deferred\n        var windowAngular = window['angular'];\n        windowAngular.resumeBootstrap = undefined;\n        // Bootstrap the AngularJS application inside our zone\n        this.ngZone.run(function () { bootstrap(element$1, [upgradeModule.name], config); });\n        // Patch resumeBootstrap() to run inside the ngZone\n        if (windowAngular.resumeBootstrap) {\n            var originalResumeBootstrap_1 = windowAngular.resumeBootstrap;\n            var ngZone_1 = this.ngZone;\n            windowAngular.resumeBootstrap = function () {\n                var _this = this;\n                var args = arguments;\n                windowAngular.resumeBootstrap = originalResumeBootstrap_1;\n                return ngZone_1.run(function () { return windowAngular.resumeBootstrap.apply(_this, args); });\n            };\n        }\n    };\n    UpgradeModule = __decorate([\n        NgModule({ providers: [angular1Providers] }),\n        __metadata(\"design:paramtypes\", [Injector,\n            NgZone])\n    ], UpgradeModule);\n    return UpgradeModule;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// This file only re-exports items to appear in the public api. Keep it that way.\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { angular1Providers as ɵangular_packages_upgrade_static_static_e, compileFactory as ɵangular_packages_upgrade_static_static_c, injectorFactory as ɵangular_packages_upgrade_static_static_a, parseFactory as ɵangular_packages_upgrade_static_static_d, rootScopeFactory as ɵangular_packages_upgrade_static_static_b, getAngularJSGlobal, getAngularLib, setAngularJSGlobal, setAngularLib, downgradeComponent, downgradeInjectable, VERSION, downgradeModule, UpgradeComponent, UpgradeModule };\n//# sourceMappingURL=static.js.map\n"],"names":["noNg","Error","noNgElement","cleanData","angular","bootstrap","module","element","injector","version","undefined","resumeBootstrap","getTestability","window","hasOwnProperty","_a","setAngularLib","ng","setAngularJSGlobal","getAngularLib","getAngularJSGlobal","module_","prefix","dependencies","e","nodes","INJECTOR_KEY","PropertyBinding","prop","attr","this","parseBinding","prototype","bracketAttr","parenAttr","bracketParenAttr","capitalAttr","charAt","toUpperCase","substr","onAttr","bindAttr","bindonAttr","DIRECTIVE_PREFIX_REGEXP","DIRECTIVE_SPECIAL_CHARS_REGEXP","controllerKey","name","getTypeName","type","overriddenName","toString","split","getDowngradedModuleCount","$injector","has","get","getUpgradeAppType","isFunction","value","validateInjectionKey","downgradedModule","injectionKey","attemptedAction","upgradeAppType","downgradedModuleCount","_matches","INITIAL_VALUE","__UNINITIALIZED__","DowngradeComponentAdapter","attrs","scope","ngModel","parentInjector","$compile","$parse","componentFactory","wrapCallback","implementsOnChanges","inputChangeCount","inputChanges","componentScope","$new","compileContents","_this","compiledProjectableNodes","linkFns","groupProjectableNodes","map","empty","forEach","linkFn","clone","push","append","createComponent","projectableNodes","providers","provide","useValue","childInjector","Injector","create","parent","componentRef","viewChangeDetector","ChangeDetectorRef","changeDetector","changeDetectorRef","component","instance","testability","Testability","TestabilityRegistry","registerApplication","location","nativeElement","writeValue","registerOnChange","supportsNgModel","$render","$viewValue","$setViewValue","bind","registerOnTouched","$setTouched","setupInputs","manuallyAttachView","propagateDigest","inputs","_loop_1","i","prevValue","input","propName","templateName","expr","observeFn_1","currValue","val1","val2","updateInput","$observe","unwatch_1","this_1","$watch","watchFn","length","detectChanges","componentType","ngOnChanges","markForCheck","unwatch_2","ApplicationRef","attachView","hostView","setupOutputs","outputs","j","output","substring","subscribeToOutput","isAssignment","getter","setter","assign","emitter","subscribe","next","v","$event","registerCleanup","testabilityRegistry","destroyComponentRef","destroy","destroyed","on","$destroy","$on","unregisterApplication","getInjector","SimpleChange","ngContentSelectors","ii","jj","node","ngContentIndex","findMatchingNgContentIndex","groupNodesBySelector","contents","ngContentIndices","wildcardNgContentIndex","selector","matchesSelector","sort","el","elProto","Element","matches","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","nodeType","Node","ELEMENT_NODE","call","SyncPromise","resolved","callbacks","all","valuesOrPromises","aggrPromise","resolvedCount","results","resolve","idx","p","obj","then","callback","downgradeComponent","info","directiveFactory","ngZone","isNgUpgradeLite","cb","NgZone","isInAngularZone","run","hasMultipleDowngradedModules","restrict","terminal","require","link","required","moduleInjector","ranAsync","lazyModuleRefKey","lazyModuleRef","promise","finalParentInjector","finalModuleInjector","doDowngrade","ComponentFactoryResolver","resolveComponentFactory","injectorPromise","ParentInjectorPromise","facade","$evalAsync","downgradeFn","pInjector","mInjector","_b","__read","_super","injectorKey","data","__extends","downgradeInjectable","token","factory","injectableName","String","VERSION","Version","tempInjectorRef","setTempInjectorRef","injectorFactory","rootScopeFactory","compileFactory","parseFactory","angular1Providers","useFactory","deps","NgAdapterInjector","modInjector","notFoundValue","ɵNOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR","moduleUid","downgradeModule","moduleFactoryOrBootstrapFn","lazyModuleName","UPGRADE_MODULE_NAME","lazyInjectorKey","bootstrapFn","extraProviders","platformBrowser","bootstrapModuleFactory","constant","identity","result","ref","config","$provide","x","REQUIRE_PREFIX_RE","UpgradeHelper","elementRef","directive","$controller","$element","getDirective","directives","compile","notSupported","replace","getTemplate","fetchRemoteTemplate","template","getOrCall","templateUrl","$templateCache_1","url_1","Promise","reject","$httpBackend","status","response","put","buildController","controllerType","$scope","locals","controller","controllerAs","compileTemplate","compileHtml","onDestroy","controllerInstance","$onDestroy","querySelectorAll","prepareTransclusion","transclude","contentChildNodes","extractChildNodes","attachChildrenFn","cloneAttachFn","$template","slots_1","Object","slotMap_1","filledSlots_1","keys","slotName","optional","nodeName","toLowerCase","_","letter","filter","cloneAttach","$$slots","TEXT_NODE","nodeValue","resolveAndBindRequiredControllers","directiveRequire","getDirectiveRequire","requiredControllers","resolveRequire","bindToController","isMap","requiredControllersMap_1","key","html","innerHTML","childNodes","childNode","firstChild","removeChild","match","Array","isArray","req","value_1","inheritType","name_1","isOptional","searchParents","startOnParent","ctrlKey","elem","inheritedData","property","args","_i","arguments","apply","__spread","feature","INITIAL_VALUE$1","Bindings","twoWayBoundProperties","twoWayBoundLastValues","expressionBoundProperties","propertyToOutputMap","UpgradeComponent","helper","bindings","initializeBindings","$parentScope","$componentScope","initializeOutputs","ngOnInit","attachChildNodes","bindingDestination","bindOutputs","pendingChanges","forwardChanges","$onInit","$doCheck","callDoCheck","unregisterDoCheckWatcher","$parent","preLink","pre","postLink","post","parentBoundTranscludeFn","$postLink","changes","ngDoCheck","newValue","oldValue","ɵlooseIdentical","outputName","emit","ngOnDestroy","btcIsObject","context","bindingType","json","JSON","stringify","concat","EventEmitter","currentValue","$onChanges","UpgradeModule","element$1","modules","INIT_MODULE_NAME","upgradeModule","decorator","testabilityDelegate","originalWhenStable","whenStable","newWhenStable","ng2Testability","isStable","intervalDelegate","wrappedInterval","fn","delay","count","invokeApply","pass","runOutsideAngular","setTimeout","cancel","$rootScope","subscription","onMicrotaskEmpty","$$phase","isDevMode","console","warn","$digest","unsubscribe","windowAngular","originalResumeBootstrap_1","ngZone_1","__decorate","NgModule","__metadata"],"mappings":"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"}