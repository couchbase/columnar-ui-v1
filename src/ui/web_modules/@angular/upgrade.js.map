{"version":3,"file":"upgrade.js","sources":["../../node_modules/@angular/upgrade/fesm5/upgrade.js"],"sourcesContent":["/**\n * @license Angular v8.2.14\n * (c) 2010-2019 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { Version, Injector, ChangeDetectorRef, Testability, TestabilityRegistry, ApplicationRef, SimpleChange, NgZone, ComponentFactoryResolver, Directive, Inject, ElementRef, EventEmitter, Compiler, resolveForwardRef, NgModule, isDevMode } from '@angular/core';\nimport { __read, __extends, __spread, __decorate, __assign, __param, __metadata } from 'tslib';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @publicApi\n */\nvar VERSION = new Version('8.2.14');\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction noNg() {\n    throw new Error('AngularJS v1.x is not loaded!');\n}\nvar noNgElement = (function () { return noNg(); });\nnoNgElement.cleanData = noNg;\nvar angular = {\n    bootstrap: noNg,\n    module: noNg,\n    element: noNgElement,\n    injector: noNg,\n    version: undefined,\n    resumeBootstrap: noNg,\n    getTestability: noNg\n};\ntry {\n    if (window.hasOwnProperty('angular')) {\n        angular = window.angular;\n    }\n}\ncatch (_a) {\n    // ignore in CJS mode.\n}\n/**\n * @deprecated Use `setAngularJSGlobal` instead.\n *\n * @publicApi\n */\nfunction setAngularLib(ng) {\n    setAngularJSGlobal(ng);\n}\n/**\n * @deprecated Use `getAngularJSGlobal` instead.\n *\n * @publicApi\n */\nfunction getAngularLib() {\n    return getAngularJSGlobal();\n}\n/**\n * Resets the AngularJS global.\n *\n * Used when AngularJS is loaded lazily, and not available on `window`.\n *\n * @publicApi\n */\nfunction setAngularJSGlobal(ng) {\n    angular = ng;\n}\n/**\n * Returns the current AngularJS global.\n *\n * @publicApi\n */\nfunction getAngularJSGlobal() {\n    return angular;\n}\nvar bootstrap = function (e, modules, config) {\n    return angular.bootstrap(e, modules, config);\n};\n// Do not declare as `module` to avoid webpack bug\n// (see https://github.com/angular/angular/issues/30050).\nvar module_ = function (prefix, dependencies) {\n    return angular.module(prefix, dependencies);\n};\nvar element = (function (e) { return angular.element(e); });\nelement.cleanData = function (nodes) { return angular.element.cleanData(nodes); };\nvar injector = function (modules, strictDi) { return angular.injector(modules, strictDi); };\nvar resumeBootstrap = function () { return angular.resumeBootstrap(); };\nvar getTestability = function (e) { return angular.getTestability(e); };\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar $COMPILE = '$compile';\nvar $CONTROLLER = '$controller';\nvar $DELEGATE = '$delegate';\nvar $EXCEPTION_HANDLER = '$exceptionHandler';\nvar $HTTP_BACKEND = '$httpBackend';\nvar $INJECTOR = '$injector';\nvar $INTERVAL = '$interval';\nvar $PARSE = '$parse';\nvar $PROVIDE = '$provide';\nvar $ROOT_SCOPE = '$rootScope';\nvar $SCOPE = '$scope';\nvar $TEMPLATE_CACHE = '$templateCache';\nvar $TEMPLATE_REQUEST = '$templateRequest';\nvar $$TESTABILITY = '$$testability';\nvar COMPILER_KEY = '$$angularCompiler';\nvar DOWNGRADED_MODULE_COUNT_KEY = '$$angularDowngradedModuleCount';\nvar GROUP_PROJECTABLE_NODES_KEY = '$$angularGroupProjectableNodes';\nvar INJECTOR_KEY = '$$angularInjector';\nvar LAZY_MODULE_REF = '$$angularLazyModuleRef';\nvar NG_ZONE_KEY = '$$angularNgZone';\nvar UPGRADE_APP_TYPE_KEY = '$$angularUpgradeAppType';\nvar REQUIRE_INJECTOR = '?^^' + INJECTOR_KEY;\nvar REQUIRE_NG_MODEL = '?ngModel';\nvar UPGRADE_MODULE_NAME = '$$UpgradeModule';\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A `PropertyBinding` represents a mapping between a property name\n * and an attribute name. It is parsed from a string of the form\n * `\"prop: attr\"`; or simply `\"propAndAttr\" where the property\n * and attribute have the same identifier.\n */\nvar PropertyBinding = /** @class */ (function () {\n    function PropertyBinding(prop, attr) {\n        this.prop = prop;\n        this.attr = attr;\n        this.parseBinding();\n    }\n    PropertyBinding.prototype.parseBinding = function () {\n        this.bracketAttr = \"[\" + this.attr + \"]\";\n        this.parenAttr = \"(\" + this.attr + \")\";\n        this.bracketParenAttr = \"[(\" + this.attr + \")]\";\n        var capitalAttr = this.attr.charAt(0).toUpperCase() + this.attr.substr(1);\n        this.onAttr = \"on\" + capitalAttr;\n        this.bindAttr = \"bind\" + capitalAttr;\n        this.bindonAttr = \"bindon\" + capitalAttr;\n    };\n    return PropertyBinding;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar DIRECTIVE_PREFIX_REGEXP = /^(?:x|data)[:\\-_]/i;\nvar DIRECTIVE_SPECIAL_CHARS_REGEXP = /[:\\-_]+(.)/g;\nfunction onError(e) {\n    // TODO: (misko): We seem to not have a stack trace here!\n    if (console.error) {\n        console.error(e, e.stack);\n    }\n    else {\n        // tslint:disable-next-line:no-console\n        console.log(e, e.stack);\n    }\n    throw e;\n}\nfunction controllerKey(name) {\n    return '$' + name + 'Controller';\n}\nfunction directiveNormalize(name) {\n    return name.replace(DIRECTIVE_PREFIX_REGEXP, '')\n        .replace(DIRECTIVE_SPECIAL_CHARS_REGEXP, function (_, letter) { return letter.toUpperCase(); });\n}\nfunction getTypeName(type) {\n    // Return the name of the type or the first line of its stringified version.\n    return type.overriddenName || type.name || type.toString().split('\\n')[0];\n}\nfunction getDowngradedModuleCount($injector) {\n    return $injector.has(DOWNGRADED_MODULE_COUNT_KEY) ? $injector.get(DOWNGRADED_MODULE_COUNT_KEY) :\n        0;\n}\nfunction getUpgradeAppType($injector) {\n    return $injector.has(UPGRADE_APP_TYPE_KEY) ? $injector.get(UPGRADE_APP_TYPE_KEY) :\n        0 /* None */;\n}\nfunction isFunction(value) {\n    return typeof value === 'function';\n}\nfunction validateInjectionKey($injector, downgradedModule, injectionKey, attemptedAction) {\n    var upgradeAppType = getUpgradeAppType($injector);\n    var downgradedModuleCount = getDowngradedModuleCount($injector);\n    // Check for common errors.\n    switch (upgradeAppType) {\n        case 1 /* Dynamic */:\n        case 2 /* Static */:\n            if (downgradedModule) {\n                throw new Error(\"Error while \" + attemptedAction + \": 'downgradedModule' unexpectedly specified.\\n\" +\n                    'You should not specify a value for \\'downgradedModule\\', unless you are downgrading ' +\n                    'more than one Angular module (via \\'downgradeModule()\\').');\n            }\n            break;\n        case 3 /* Lite */:\n            if (!downgradedModule && (downgradedModuleCount >= 2)) {\n                throw new Error(\"Error while \" + attemptedAction + \": 'downgradedModule' not specified.\\n\" +\n                    'This application contains more than one downgraded Angular module, thus you need to ' +\n                    'always specify \\'downgradedModule\\' when downgrading components and injectables.');\n            }\n            if (!$injector.has(injectionKey)) {\n                throw new Error(\"Error while \" + attemptedAction + \": Unable to find the specified downgraded module.\\n\" +\n                    'Did you forget to downgrade an Angular module or include it in the AngularJS ' +\n                    'application?');\n            }\n            break;\n        default:\n            throw new Error(\"Error while \" + attemptedAction + \": Not a valid '@angular/upgrade' application.\\n\" +\n                'Did you forget to downgrade an Angular module or include it in the AngularJS ' +\n                'application?');\n    }\n}\nvar Deferred = /** @class */ (function () {\n    function Deferred() {\n        var _this = this;\n        this.promise = new Promise(function (res, rej) {\n            _this.resolve = res;\n            _this.reject = rej;\n        });\n    }\n    return Deferred;\n}());\n/**\n * @return Whether the passed-in component implements the subset of the\n *     `ControlValueAccessor` interface needed for AngularJS `ng-model`\n *     compatibility.\n */\nfunction supportsNgModel(component) {\n    return typeof component.writeValue === 'function' &&\n        typeof component.registerOnChange === 'function';\n}\n/**\n * Glue the AngularJS `NgModelController` (if it exists) to the component\n * (if it implements the needed subset of the `ControlValueAccessor` interface).\n */\nfunction hookupNgModel(ngModel, component) {\n    if (ngModel && supportsNgModel(component)) {\n        ngModel.$render = function () { component.writeValue(ngModel.$viewValue); };\n        component.registerOnChange(ngModel.$setViewValue.bind(ngModel));\n        if (typeof component.registerOnTouched === 'function') {\n            component.registerOnTouched(ngModel.$setTouched.bind(ngModel));\n        }\n    }\n}\n/**\n * Test two values for strict equality, accounting for the fact that `NaN !== NaN`.\n */\nfunction strictEquals(val1, val2) {\n    return val1 === val2 || (val1 !== val1 && val2 !== val2);\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar INITIAL_VALUE = {\n    __UNINITIALIZED__: true\n};\nvar DowngradeComponentAdapter = /** @class */ (function () {\n    function DowngradeComponentAdapter(element, attrs, scope, ngModel, parentInjector, $injector, $compile, $parse, componentFactory, wrapCallback) {\n        this.element = element;\n        this.attrs = attrs;\n        this.scope = scope;\n        this.ngModel = ngModel;\n        this.parentInjector = parentInjector;\n        this.$injector = $injector;\n        this.$compile = $compile;\n        this.$parse = $parse;\n        this.componentFactory = componentFactory;\n        this.wrapCallback = wrapCallback;\n        this.implementsOnChanges = false;\n        this.inputChangeCount = 0;\n        this.inputChanges = {};\n        this.componentScope = scope.$new();\n    }\n    DowngradeComponentAdapter.prototype.compileContents = function () {\n        var _this = this;\n        var compiledProjectableNodes = [];\n        var projectableNodes = this.groupProjectableNodes();\n        var linkFns = projectableNodes.map(function (nodes) { return _this.$compile(nodes); });\n        this.element.empty();\n        linkFns.forEach(function (linkFn) {\n            linkFn(_this.scope, function (clone) {\n                compiledProjectableNodes.push(clone);\n                _this.element.append(clone);\n            });\n        });\n        return compiledProjectableNodes;\n    };\n    DowngradeComponentAdapter.prototype.createComponent = function (projectableNodes) {\n        var providers = [{ provide: $SCOPE, useValue: this.componentScope }];\n        var childInjector = Injector.create({ providers: providers, parent: this.parentInjector, name: 'DowngradeComponentAdapter' });\n        this.componentRef =\n            this.componentFactory.create(childInjector, projectableNodes, this.element[0]);\n        this.viewChangeDetector = this.componentRef.injector.get(ChangeDetectorRef);\n        this.changeDetector = this.componentRef.changeDetectorRef;\n        this.component = this.componentRef.instance;\n        // testability hook is commonly added during component bootstrap in\n        // packages/core/src/application_ref.bootstrap()\n        // in downgraded application, component creation will take place here as well as adding the\n        // testability hook.\n        var testability = this.componentRef.injector.get(Testability, null);\n        if (testability) {\n            this.componentRef.injector.get(TestabilityRegistry)\n                .registerApplication(this.componentRef.location.nativeElement, testability);\n        }\n        hookupNgModel(this.ngModel, this.component);\n    };\n    DowngradeComponentAdapter.prototype.setupInputs = function (manuallyAttachView, propagateDigest) {\n        var _this = this;\n        if (propagateDigest === void 0) { propagateDigest = true; }\n        var attrs = this.attrs;\n        var inputs = this.componentFactory.inputs || [];\n        var _loop_1 = function (i) {\n            var input = new PropertyBinding(inputs[i].propName, inputs[i].templateName);\n            var expr = null;\n            if (attrs.hasOwnProperty(input.attr)) {\n                var observeFn_1 = (function (prop) {\n                    var prevValue = INITIAL_VALUE;\n                    return function (currValue) {\n                        // Initially, both `$observe()` and `$watch()` will call this function.\n                        if (!strictEquals(prevValue, currValue)) {\n                            if (prevValue === INITIAL_VALUE) {\n                                prevValue = currValue;\n                            }\n                            _this.updateInput(prop, prevValue, currValue);\n                            prevValue = currValue;\n                        }\n                    };\n                })(input.prop);\n                attrs.$observe(input.attr, observeFn_1);\n                // Use `$watch()` (in addition to `$observe()`) in order to initialize the input in time\n                // for `ngOnChanges()`. This is necessary if we are already in a `$digest`, which means that\n                // `ngOnChanges()` (which is called by a watcher) will run before the `$observe()` callback.\n                var unwatch_1 = this_1.componentScope.$watch(function () {\n                    unwatch_1();\n                    unwatch_1 = null;\n                    observeFn_1(attrs[input.attr]);\n                });\n            }\n            else if (attrs.hasOwnProperty(input.bindAttr)) {\n                expr = attrs[input.bindAttr];\n            }\n            else if (attrs.hasOwnProperty(input.bracketAttr)) {\n                expr = attrs[input.bracketAttr];\n            }\n            else if (attrs.hasOwnProperty(input.bindonAttr)) {\n                expr = attrs[input.bindonAttr];\n            }\n            else if (attrs.hasOwnProperty(input.bracketParenAttr)) {\n                expr = attrs[input.bracketParenAttr];\n            }\n            if (expr != null) {\n                var watchFn = (function (prop) { return function (currValue, prevValue) {\n                    return _this.updateInput(prop, prevValue, currValue);\n                }; })(input.prop);\n                this_1.componentScope.$watch(expr, watchFn);\n            }\n        };\n        var this_1 = this;\n        for (var i = 0; i < inputs.length; i++) {\n            _loop_1(i);\n        }\n        // Invoke `ngOnChanges()` and Change Detection (when necessary)\n        var detectChanges = function () { return _this.changeDetector.detectChanges(); };\n        var prototype = this.componentFactory.componentType.prototype;\n        this.implementsOnChanges = !!(prototype && prototype.ngOnChanges);\n        this.componentScope.$watch(function () { return _this.inputChangeCount; }, this.wrapCallback(function () {\n            // Invoke `ngOnChanges()`\n            if (_this.implementsOnChanges) {\n                var inputChanges = _this.inputChanges;\n                _this.inputChanges = {};\n                _this.component.ngOnChanges(inputChanges);\n            }\n            _this.viewChangeDetector.markForCheck();\n            // If opted out of propagating digests, invoke change detection when inputs change.\n            if (!propagateDigest) {\n                detectChanges();\n            }\n        }));\n        // If not opted out of propagating digests, invoke change detection on every digest\n        if (propagateDigest) {\n            this.componentScope.$watch(this.wrapCallback(detectChanges));\n        }\n        // If necessary, attach the view so that it will be dirty-checked.\n        // (Allow time for the initial input values to be set and `ngOnChanges()` to be called.)\n        if (manuallyAttachView || !propagateDigest) {\n            var unwatch_2 = this.componentScope.$watch(function () {\n                unwatch_2();\n                unwatch_2 = null;\n                var appRef = _this.parentInjector.get(ApplicationRef);\n                appRef.attachView(_this.componentRef.hostView);\n            });\n        }\n    };\n    DowngradeComponentAdapter.prototype.setupOutputs = function () {\n        var attrs = this.attrs;\n        var outputs = this.componentFactory.outputs || [];\n        for (var j = 0; j < outputs.length; j++) {\n            var output = new PropertyBinding(outputs[j].propName, outputs[j].templateName);\n            var bindonAttr = output.bindonAttr.substring(0, output.bindonAttr.length - 6);\n            var bracketParenAttr = \"[(\" + output.bracketParenAttr.substring(2, output.bracketParenAttr.length - 8) + \")]\";\n            // order below is important - first update bindings then evaluate expressions\n            if (attrs.hasOwnProperty(bindonAttr)) {\n                this.subscribeToOutput(output, attrs[bindonAttr], true);\n            }\n            if (attrs.hasOwnProperty(bracketParenAttr)) {\n                this.subscribeToOutput(output, attrs[bracketParenAttr], true);\n            }\n            if (attrs.hasOwnProperty(output.onAttr)) {\n                this.subscribeToOutput(output, attrs[output.onAttr]);\n            }\n            if (attrs.hasOwnProperty(output.parenAttr)) {\n                this.subscribeToOutput(output, attrs[output.parenAttr]);\n            }\n        }\n    };\n    DowngradeComponentAdapter.prototype.subscribeToOutput = function (output, expr, isAssignment) {\n        var _this = this;\n        if (isAssignment === void 0) { isAssignment = false; }\n        var getter = this.$parse(expr);\n        var setter = getter.assign;\n        if (isAssignment && !setter) {\n            throw new Error(\"Expression '\" + expr + \"' is not assignable!\");\n        }\n        var emitter = this.component[output.prop];\n        if (emitter) {\n            emitter.subscribe({\n                next: isAssignment ? function (v) { return setter(_this.scope, v); } :\n                    function (v) { return getter(_this.scope, { '$event': v }); }\n            });\n        }\n        else {\n            throw new Error(\"Missing emitter '\" + output.prop + \"' on component '\" + getTypeName(this.componentFactory.componentType) + \"'!\");\n        }\n    };\n    DowngradeComponentAdapter.prototype.registerCleanup = function () {\n        var _this = this;\n        var testabilityRegistry = this.componentRef.injector.get(TestabilityRegistry);\n        var destroyComponentRef = this.wrapCallback(function () { return _this.componentRef.destroy(); });\n        var destroyed = false;\n        this.element.on('$destroy', function () { return _this.componentScope.$destroy(); });\n        this.componentScope.$on('$destroy', function () {\n            if (!destroyed) {\n                destroyed = true;\n                testabilityRegistry.unregisterApplication(_this.componentRef.location.nativeElement);\n                destroyComponentRef();\n            }\n        });\n    };\n    DowngradeComponentAdapter.prototype.getInjector = function () { return this.componentRef.injector; };\n    DowngradeComponentAdapter.prototype.updateInput = function (prop, prevValue, currValue) {\n        if (this.implementsOnChanges) {\n            this.inputChanges[prop] = new SimpleChange(prevValue, currValue, prevValue === currValue);\n        }\n        this.inputChangeCount++;\n        this.component[prop] = currValue;\n    };\n    DowngradeComponentAdapter.prototype.groupProjectableNodes = function () {\n        var ngContentSelectors = this.componentFactory.ngContentSelectors;\n        return groupNodesBySelector(ngContentSelectors, this.element.contents());\n    };\n    return DowngradeComponentAdapter;\n}());\n/**\n * Group a set of DOM nodes into `ngContent` groups, based on the given content selectors.\n */\nfunction groupNodesBySelector(ngContentSelectors, nodes) {\n    var projectableNodes = [];\n    var wildcardNgContentIndex;\n    for (var i = 0, ii = ngContentSelectors.length; i < ii; ++i) {\n        projectableNodes[i] = [];\n    }\n    for (var j = 0, jj = nodes.length; j < jj; ++j) {\n        var node = nodes[j];\n        var ngContentIndex = findMatchingNgContentIndex(node, ngContentSelectors);\n        if (ngContentIndex != null) {\n            projectableNodes[ngContentIndex].push(node);\n        }\n    }\n    return projectableNodes;\n}\nfunction findMatchingNgContentIndex(element, ngContentSelectors) {\n    var ngContentIndices = [];\n    var wildcardNgContentIndex = -1;\n    for (var i = 0; i < ngContentSelectors.length; i++) {\n        var selector = ngContentSelectors[i];\n        if (selector === '*') {\n            wildcardNgContentIndex = i;\n        }\n        else {\n            if (matchesSelector(element, selector)) {\n                ngContentIndices.push(i);\n            }\n        }\n    }\n    ngContentIndices.sort();\n    if (wildcardNgContentIndex !== -1) {\n        ngContentIndices.push(wildcardNgContentIndex);\n    }\n    return ngContentIndices.length ? ngContentIndices[0] : null;\n}\nvar _matches;\nfunction matchesSelector(el, selector) {\n    if (!_matches) {\n        var elProto = Element.prototype;\n        _matches = elProto.matches || elProto.matchesSelector || elProto.mozMatchesSelector ||\n            elProto.msMatchesSelector || elProto.oMatchesSelector || elProto.webkitMatchesSelector;\n    }\n    return el.nodeType === Node.ELEMENT_NODE ? _matches.call(el, selector) : false;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction isThenable(obj) {\n    return !!obj && isFunction(obj.then);\n}\n/**\n * Synchronous, promise-like object.\n */\nvar SyncPromise = /** @class */ (function () {\n    function SyncPromise() {\n        this.resolved = false;\n        this.callbacks = [];\n    }\n    SyncPromise.all = function (valuesOrPromises) {\n        var aggrPromise = new SyncPromise();\n        var resolvedCount = 0;\n        var results = [];\n        var resolve = function (idx, value) {\n            results[idx] = value;\n            if (++resolvedCount === valuesOrPromises.length)\n                aggrPromise.resolve(results);\n        };\n        valuesOrPromises.forEach(function (p, idx) {\n            if (isThenable(p)) {\n                p.then(function (v) { return resolve(idx, v); });\n            }\n            else {\n                resolve(idx, p);\n            }\n        });\n        return aggrPromise;\n    };\n    SyncPromise.prototype.resolve = function (value) {\n        // Do nothing, if already resolved.\n        if (this.resolved)\n            return;\n        this.value = value;\n        this.resolved = true;\n        // Run the queued callbacks.\n        this.callbacks.forEach(function (callback) { return callback(value); });\n        this.callbacks.length = 0;\n    };\n    SyncPromise.prototype.then = function (callback) {\n        if (this.resolved) {\n            callback(this.value);\n        }\n        else {\n            this.callbacks.push(callback);\n        }\n    };\n    return SyncPromise;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @description\n *\n * A helper function that allows an Angular component to be used from AngularJS.\n *\n * *Part of the [upgrade/static](api?query=upgrade%2Fstatic)\n * library for hybrid upgrade apps that support AoT compilation*\n *\n * This helper function returns a factory function to be used for registering\n * an AngularJS wrapper directive for \"downgrading\" an Angular component.\n *\n * @usageNotes\n * ### Examples\n *\n * Let's assume that you have an Angular component called `ng2Heroes` that needs\n * to be made available in AngularJS templates.\n *\n * {@example upgrade/static/ts/full/module.ts region=\"ng2-heroes\"}\n *\n * We must create an AngularJS [directive](https://docs.angularjs.org/guide/directive)\n * that will make this Angular component available inside AngularJS templates.\n * The `downgradeComponent()` function returns a factory function that we\n * can use to define the AngularJS directive that wraps the \"downgraded\" component.\n *\n * {@example upgrade/static/ts/full/module.ts region=\"ng2-heroes-wrapper\"}\n *\n * @param info contains information about the Component that is being downgraded:\n *\n * - `component: Type<any>`: The type of the Component that will be downgraded\n * - `downgradedModule?: string`: The name of the downgraded module (if any) that the component\n *   \"belongs to\", as returned by a call to `downgradeModule()`. It is the module, whose\n *   corresponding Angular module will be bootstrapped, when the component needs to be instantiated.\n *   <br />\n *   (This option is only necessary when using `downgradeModule()` to downgrade more than one\n *   Angular module.)\n * - `propagateDigest?: boolean`: Whether to perform {@link ChangeDetectorRef#detectChanges\n *   change detection} on the component on every\n *   [$digest](https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$digest). If set to `false`,\n *   change detection will still be performed when any of the component's inputs changes.\n *   (Default: true)\n *\n * @returns a factory function that can be used to register the component in an\n * AngularJS module.\n *\n * @publicApi\n */\nfunction downgradeComponent(info) {\n    var directiveFactory = function ($compile, $injector, $parse) {\n        // When using `downgradeModule()`, we need to handle certain things specially. For example:\n        // - We always need to attach the component view to the `ApplicationRef` for it to be\n        //   dirty-checked.\n        // - We need to ensure callbacks to Angular APIs (e.g. change detection) are run inside the\n        //   Angular zone.\n        //   NOTE: This is not needed, when using `UpgradeModule`, because `$digest()` will be run\n        //         inside the Angular zone (except if explicitly escaped, in which case we shouldn't\n        //         force it back in).\n        var isNgUpgradeLite = getUpgradeAppType($injector) === 3 /* Lite */;\n        var wrapCallback = !isNgUpgradeLite ? function (cb) { return cb; } : function (cb) { return function () { return NgZone.isInAngularZone() ? cb() : ngZone.run(cb); }; };\n        var ngZone;\n        // When downgrading multiple modules, special handling is needed wrt injectors.\n        var hasMultipleDowngradedModules = isNgUpgradeLite && (getDowngradedModuleCount($injector) > 1);\n        return {\n            restrict: 'E',\n            terminal: true,\n            require: [REQUIRE_INJECTOR, REQUIRE_NG_MODEL],\n            link: function (scope, element, attrs, required) {\n                // We might have to compile the contents asynchronously, because this might have been\n                // triggered by `UpgradeNg1ComponentAdapterBuilder`, before the Angular templates have\n                // been compiled.\n                var ngModel = required[1];\n                var parentInjector = required[0];\n                var moduleInjector = undefined;\n                var ranAsync = false;\n                if (!parentInjector || hasMultipleDowngradedModules) {\n                    var downgradedModule = info.downgradedModule || '';\n                    var lazyModuleRefKey = \"\" + LAZY_MODULE_REF + downgradedModule;\n                    var attemptedAction = \"instantiating component '\" + getTypeName(info.component) + \"'\";\n                    validateInjectionKey($injector, downgradedModule, lazyModuleRefKey, attemptedAction);\n                    var lazyModuleRef = $injector.get(lazyModuleRefKey);\n                    moduleInjector = lazyModuleRef.injector || lazyModuleRef.promise;\n                }\n                // Notes:\n                //\n                // There are two injectors: `finalModuleInjector` and `finalParentInjector` (they might be\n                // the same instance, but that is irrelevant):\n                // - `finalModuleInjector` is used to retrieve `ComponentFactoryResolver`, thus it must be\n                //   on the same tree as the `NgModule` that declares this downgraded component.\n                // - `finalParentInjector` is used for all other injection purposes.\n                //   (Note that Angular knows to only traverse the component-tree part of that injector,\n                //   when looking for an injectable and then switch to the module injector.)\n                //\n                // There are basically three cases:\n                // - If there is no parent component (thus no `parentInjector`), we bootstrap the downgraded\n                //   `NgModule` and use its injector as both `finalModuleInjector` and\n                //   `finalParentInjector`.\n                // - If there is a parent component (and thus a `parentInjector`) and we are sure that it\n                //   belongs to the same `NgModule` as this downgraded component (e.g. because there is only\n                //   one downgraded module, we use that `parentInjector` as both `finalModuleInjector` and\n                //   `finalParentInjector`.\n                // - If there is a parent component, but it may belong to a different `NgModule`, then we\n                //   use the `parentInjector` as `finalParentInjector` and this downgraded component's\n                //   declaring `NgModule`'s injector as `finalModuleInjector`.\n                //   Note 1: If the `NgModule` is already bootstrapped, we just get its injector (we don't\n                //           bootstrap again).\n                //   Note 2: It is possible that (while there are multiple downgraded modules) this\n                //           downgraded component and its parent component both belong to the same NgModule.\n                //           In that case, we could have used the `parentInjector` as both\n                //           `finalModuleInjector` and `finalParentInjector`, but (for simplicity) we are\n                //           treating this case as if they belong to different `NgModule`s. That doesn't\n                //           really affect anything, since `parentInjector` has `moduleInjector` as ancestor\n                //           and trying to resolve `ComponentFactoryResolver` from either one will return\n                //           the same instance.\n                // If there is a parent component, use its injector as parent injector.\n                // If this is a \"top-level\" Angular component, use the module injector.\n                var finalParentInjector = parentInjector || moduleInjector;\n                // If this is a \"top-level\" Angular component or the parent component may belong to a\n                // different `NgModule`, use the module injector for module-specific dependencies.\n                // If there is a parent component that belongs to the same `NgModule`, use its injector.\n                var finalModuleInjector = moduleInjector || parentInjector;\n                var doDowngrade = function (injector, moduleInjector) {\n                    // Retrieve `ComponentFactoryResolver` from the injector tied to the `NgModule` this\n                    // component belongs to.\n                    var componentFactoryResolver = moduleInjector.get(ComponentFactoryResolver);\n                    var componentFactory = componentFactoryResolver.resolveComponentFactory(info.component);\n                    if (!componentFactory) {\n                        throw new Error(\"Expecting ComponentFactory for: \" + getTypeName(info.component));\n                    }\n                    var injectorPromise = new ParentInjectorPromise(element);\n                    var facade = new DowngradeComponentAdapter(element, attrs, scope, ngModel, injector, $injector, $compile, $parse, componentFactory, wrapCallback);\n                    var projectableNodes = facade.compileContents();\n                    facade.createComponent(projectableNodes);\n                    facade.setupInputs(isNgUpgradeLite, info.propagateDigest);\n                    facade.setupOutputs();\n                    facade.registerCleanup();\n                    injectorPromise.resolve(facade.getInjector());\n                    if (ranAsync) {\n                        // If this is run async, it is possible that it is not run inside a\n                        // digest and initial input values will not be detected.\n                        scope.$evalAsync(function () { });\n                    }\n                };\n                var downgradeFn = !isNgUpgradeLite ? doDowngrade : function (pInjector, mInjector) {\n                    if (!ngZone) {\n                        ngZone = pInjector.get(NgZone);\n                    }\n                    wrapCallback(function () { return doDowngrade(pInjector, mInjector); })();\n                };\n                // NOTE:\n                // Not using `ParentInjectorPromise.all()` (which is inherited from `SyncPromise`), because\n                // Closure Compiler (or some related tool) complains:\n                // `TypeError: ...$src$downgrade_component_ParentInjectorPromise.all is not a function`\n                SyncPromise.all([finalParentInjector, finalModuleInjector])\n                    .then(function (_a) {\n                    var _b = __read(_a, 2), pInjector = _b[0], mInjector = _b[1];\n                    return downgradeFn(pInjector, mInjector);\n                });\n                ranAsync = true;\n            }\n        };\n    };\n    // bracket-notation because of closure - see #14441\n    directiveFactory['$inject'] = [$COMPILE, $INJECTOR, $PARSE];\n    return directiveFactory;\n}\n/**\n * Synchronous promise-like object to wrap parent injectors,\n * to preserve the synchronous nature of AngularJS's `$compile`.\n */\nvar ParentInjectorPromise = /** @class */ (function (_super) {\n    __extends(ParentInjectorPromise, _super);\n    function ParentInjectorPromise(element) {\n        var _this = _super.call(this) || this;\n        _this.element = element;\n        _this.injectorKey = controllerKey(INJECTOR_KEY);\n        // Store the promise on the element.\n        element.data(_this.injectorKey, _this);\n        return _this;\n    }\n    ParentInjectorPromise.prototype.resolve = function (injector) {\n        // Store the real injector on the element.\n        this.element.data(this.injectorKey, injector);\n        // Release the element to prevent memory leaks.\n        this.element = null;\n        // Resolve the promise.\n        _super.prototype.resolve.call(this, injector);\n    };\n    return ParentInjectorPromise;\n}(SyncPromise));\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @description\n *\n * A helper function to allow an Angular service to be accessible from AngularJS.\n *\n * *Part of the [upgrade/static](api?query=upgrade%2Fstatic)\n * library for hybrid upgrade apps that support AoT compilation*\n *\n * This helper function returns a factory function that provides access to the Angular\n * service identified by the `token` parameter.\n *\n * @usageNotes\n * ### Examples\n *\n * First ensure that the service to be downgraded is provided in an `NgModule`\n * that will be part of the upgrade application. For example, let's assume we have\n * defined `HeroesService`\n *\n * {@example upgrade/static/ts/full/module.ts region=\"ng2-heroes-service\"}\n *\n * and that we have included this in our upgrade app `NgModule`\n *\n * {@example upgrade/static/ts/full/module.ts region=\"ng2-module\"}\n *\n * Now we can register the `downgradeInjectable` factory function for the service\n * on an AngularJS module.\n *\n * {@example upgrade/static/ts/full/module.ts region=\"downgrade-ng2-heroes-service\"}\n *\n * Inside an AngularJS component's controller we can get hold of the\n * downgraded service via the name we gave when downgrading.\n *\n * {@example upgrade/static/ts/full/module.ts region=\"example-app\"}\n *\n * <div class=\"alert is-important\">\n *\n *   When using `downgradeModule()`, downgraded injectables will not be available until the Angular\n *   module that provides them is instantiated. In order to be safe, you need to ensure that the\n *   downgraded injectables are not used anywhere _outside_ the part of the app where it is\n *   guaranteed that their module has been instantiated.\n *\n *   For example, it is _OK_ to use a downgraded service in an upgraded component that is only used\n *   from a downgraded Angular component provided by the same Angular module as the injectable, but\n *   it is _not OK_ to use it in an AngularJS component that may be used independently of Angular or\n *   use it in a downgraded Angular component from a different module.\n *\n * </div>\n *\n * @param token an `InjectionToken` that identifies a service provided from Angular.\n * @param downgradedModule the name of the downgraded module (if any) that the injectable\n * \"belongs to\", as returned by a call to `downgradeModule()`. It is the module, whose injector will\n * be used for instantiating the injectable.<br />\n * (This option is only necessary when using `downgradeModule()` to downgrade more than one Angular\n * module.)\n *\n * @returns a [factory function](https://docs.angularjs.org/guide/di) that can be\n * used to register the service on an AngularJS module.\n *\n * @publicApi\n */\nfunction downgradeInjectable(token, downgradedModule) {\n    if (downgradedModule === void 0) { downgradedModule = ''; }\n    var factory = function ($injector) {\n        var injectorKey = \"\" + INJECTOR_KEY + downgradedModule;\n        var injectableName = isFunction(token) ? getTypeName(token) : String(token);\n        var attemptedAction = \"instantiating injectable '\" + injectableName + \"'\";\n        validateInjectionKey($injector, downgradedModule, injectorKey, attemptedAction);\n        var injector = $injector.get(injectorKey);\n        return injector.get(token);\n    };\n    factory['$inject'] = [$INJECTOR];\n    return factory;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Constants\nvar REQUIRE_PREFIX_RE = /^(\\^\\^?)?(\\?)?(\\^\\^?)?/;\n// Classes\nvar UpgradeHelper = /** @class */ (function () {\n    function UpgradeHelper(injector, name, elementRef, directive) {\n        this.injector = injector;\n        this.name = name;\n        this.$injector = injector.get($INJECTOR);\n        this.$compile = this.$injector.get($COMPILE);\n        this.$controller = this.$injector.get($CONTROLLER);\n        this.element = elementRef.nativeElement;\n        this.$element = element(this.element);\n        this.directive = directive || UpgradeHelper.getDirective(this.$injector, name);\n    }\n    UpgradeHelper.getDirective = function ($injector, name) {\n        var directives = $injector.get(name + 'Directive');\n        if (directives.length > 1) {\n            throw new Error(\"Only support single directive definition for: \" + name);\n        }\n        var directive = directives[0];\n        // AngularJS will transform `link: xyz` to `compile: () => xyz`. So we can only tell there was a\n        // user-defined `compile` if there is no `link`. In other cases, we will just ignore `compile`.\n        if (directive.compile && !directive.link)\n            notSupported(name, 'compile');\n        if (directive.replace)\n            notSupported(name, 'replace');\n        if (directive.terminal)\n            notSupported(name, 'terminal');\n        return directive;\n    };\n    UpgradeHelper.getTemplate = function ($injector, directive, fetchRemoteTemplate, $element) {\n        if (fetchRemoteTemplate === void 0) { fetchRemoteTemplate = false; }\n        if (directive.template !== undefined) {\n            return getOrCall(directive.template, $element);\n        }\n        else if (directive.templateUrl) {\n            var $templateCache_1 = $injector.get($TEMPLATE_CACHE);\n            var url_1 = getOrCall(directive.templateUrl, $element);\n            var template = $templateCache_1.get(url_1);\n            if (template !== undefined) {\n                return template;\n            }\n            else if (!fetchRemoteTemplate) {\n                throw new Error('loading directive templates asynchronously is not supported');\n            }\n            return new Promise(function (resolve, reject) {\n                var $httpBackend = $injector.get($HTTP_BACKEND);\n                $httpBackend('GET', url_1, null, function (status, response) {\n                    if (status === 200) {\n                        resolve($templateCache_1.put(url_1, response));\n                    }\n                    else {\n                        reject(\"GET component template from '\" + url_1 + \"' returned '\" + status + \": \" + response + \"'\");\n                    }\n                });\n            });\n        }\n        else {\n            throw new Error(\"Directive '\" + directive.name + \"' is not a component, it is missing template.\");\n        }\n    };\n    UpgradeHelper.prototype.buildController = function (controllerType, $scope) {\n        // TODO: Document that we do not pre-assign bindings on the controller instance.\n        // Quoted properties below so that this code can be optimized with Closure Compiler.\n        var locals = { '$scope': $scope, '$element': this.$element };\n        var controller = this.$controller(controllerType, locals, null, this.directive.controllerAs);\n        this.$element.data(controllerKey(this.directive.name), controller);\n        return controller;\n    };\n    UpgradeHelper.prototype.compileTemplate = function (template) {\n        if (template === undefined) {\n            template =\n                UpgradeHelper.getTemplate(this.$injector, this.directive, false, this.$element);\n        }\n        return this.compileHtml(template);\n    };\n    UpgradeHelper.prototype.onDestroy = function ($scope, controllerInstance) {\n        if (controllerInstance && isFunction(controllerInstance.$onDestroy)) {\n            controllerInstance.$onDestroy();\n        }\n        $scope.$destroy();\n        // Clean the jQuery/jqLite data on the component+child elements.\n        // Equivelent to how jQuery/jqLite invoke `cleanData` on an Element (this.element)\n        //  https://github.com/jquery/jquery/blob/e743cbd28553267f955f71ea7248377915613fd9/src/manipulation.js#L223\n        //  https://github.com/angular/angular.js/blob/26ddc5f830f902a3d22f4b2aab70d86d4d688c82/src/jqLite.js#L306-L312\n        // `cleanData` will invoke the AngularJS `$destroy` DOM event\n        //  https://github.com/angular/angular.js/blob/26ddc5f830f902a3d22f4b2aab70d86d4d688c82/src/Angular.js#L1911-L1924\n        element.cleanData([this.element]);\n        element.cleanData(this.element.querySelectorAll('*'));\n    };\n    UpgradeHelper.prototype.prepareTransclusion = function () {\n        var _this = this;\n        var transclude = this.directive.transclude;\n        var contentChildNodes = this.extractChildNodes();\n        var attachChildrenFn = function (scope, cloneAttachFn) {\n            // Since AngularJS v1.5.8, `cloneAttachFn` will try to destroy the transclusion scope if\n            // `$template` is empty. Since the transcluded content comes from Angular, not AngularJS,\n            // there will be no transclusion scope here.\n            // Provide a dummy `scope.$destroy()` method to prevent `cloneAttachFn` from throwing.\n            scope = scope || { $destroy: function () { return undefined; } };\n            return cloneAttachFn($template, scope);\n        };\n        var $template = contentChildNodes;\n        if (transclude) {\n            var slots_1 = Object.create(null);\n            if (typeof transclude === 'object') {\n                $template = [];\n                var slotMap_1 = Object.create(null);\n                var filledSlots_1 = Object.create(null);\n                // Parse the element selectors.\n                Object.keys(transclude).forEach(function (slotName) {\n                    var selector = transclude[slotName];\n                    var optional = selector.charAt(0) === '?';\n                    selector = optional ? selector.substring(1) : selector;\n                    slotMap_1[selector] = slotName;\n                    slots_1[slotName] = null; // `null`: Defined but not yet filled.\n                    filledSlots_1[slotName] = optional; // Consider optional slots as filled.\n                });\n                // Add the matching elements into their slot.\n                contentChildNodes.forEach(function (node) {\n                    var slotName = slotMap_1[directiveNormalize(node.nodeName.toLowerCase())];\n                    if (slotName) {\n                        filledSlots_1[slotName] = true;\n                        slots_1[slotName] = slots_1[slotName] || [];\n                        slots_1[slotName].push(node);\n                    }\n                    else {\n                        $template.push(node);\n                    }\n                });\n                // Check for required slots that were not filled.\n                Object.keys(filledSlots_1).forEach(function (slotName) {\n                    if (!filledSlots_1[slotName]) {\n                        throw new Error(\"Required transclusion slot '\" + slotName + \"' on directive: \" + _this.name);\n                    }\n                });\n                Object.keys(slots_1).filter(function (slotName) { return slots_1[slotName]; }).forEach(function (slotName) {\n                    var nodes = slots_1[slotName];\n                    slots_1[slotName] = function (scope, cloneAttach) {\n                        return cloneAttach(nodes, scope);\n                    };\n                });\n            }\n            // Attach `$$slots` to default slot transclude fn.\n            attachChildrenFn.$$slots = slots_1;\n            // AngularJS v1.6+ ignores empty or whitespace-only transcluded text nodes. But Angular\n            // removes all text content after the first interpolation and updates it later, after\n            // evaluating the expressions. This would result in AngularJS failing to recognize text\n            // nodes that start with an interpolation as transcluded content and use the fallback\n            // content instead.\n            // To avoid this issue, we add a\n            // [zero-width non-joiner character](https://en.wikipedia.org/wiki/Zero-width_non-joiner)\n            // to empty text nodes (which can only be a result of Angular removing their initial content).\n            // NOTE: Transcluded text content that starts with whitespace followed by an interpolation\n            //       will still fail to be detected by AngularJS v1.6+\n            $template.forEach(function (node) {\n                if (node.nodeType === Node.TEXT_NODE && !node.nodeValue) {\n                    node.nodeValue = '\\u200C';\n                }\n            });\n        }\n        return attachChildrenFn;\n    };\n    UpgradeHelper.prototype.resolveAndBindRequiredControllers = function (controllerInstance) {\n        var directiveRequire = this.getDirectiveRequire();\n        var requiredControllers = this.resolveRequire(directiveRequire);\n        if (controllerInstance && this.directive.bindToController && isMap(directiveRequire)) {\n            var requiredControllersMap_1 = requiredControllers;\n            Object.keys(requiredControllersMap_1).forEach(function (key) {\n                controllerInstance[key] = requiredControllersMap_1[key];\n            });\n        }\n        return requiredControllers;\n    };\n    UpgradeHelper.prototype.compileHtml = function (html) {\n        this.element.innerHTML = html;\n        return this.$compile(this.element.childNodes);\n    };\n    UpgradeHelper.prototype.extractChildNodes = function () {\n        var childNodes = [];\n        var childNode;\n        while (childNode = this.element.firstChild) {\n            this.element.removeChild(childNode);\n            childNodes.push(childNode);\n        }\n        return childNodes;\n    };\n    UpgradeHelper.prototype.getDirectiveRequire = function () {\n        var require = this.directive.require || (this.directive.controller && this.directive.name);\n        if (isMap(require)) {\n            Object.keys(require).forEach(function (key) {\n                var value = require[key];\n                var match = value.match(REQUIRE_PREFIX_RE);\n                var name = value.substring(match[0].length);\n                if (!name) {\n                    require[key] = match[0] + key;\n                }\n            });\n        }\n        return require;\n    };\n    UpgradeHelper.prototype.resolveRequire = function (require, controllerInstance) {\n        var _this = this;\n        if (!require) {\n            return null;\n        }\n        else if (Array.isArray(require)) {\n            return require.map(function (req) { return _this.resolveRequire(req); });\n        }\n        else if (typeof require === 'object') {\n            var value_1 = {};\n            Object.keys(require).forEach(function (key) { return value_1[key] = _this.resolveRequire(require[key]); });\n            return value_1;\n        }\n        else if (typeof require === 'string') {\n            var match = require.match(REQUIRE_PREFIX_RE);\n            var inheritType = match[1] || match[3];\n            var name_1 = require.substring(match[0].length);\n            var isOptional = !!match[2];\n            var searchParents = !!inheritType;\n            var startOnParent = inheritType === '^^';\n            var ctrlKey = controllerKey(name_1);\n            var elem = startOnParent ? this.$element.parent() : this.$element;\n            var value = searchParents ? elem.inheritedData(ctrlKey) : elem.data(ctrlKey);\n            if (!value && !isOptional) {\n                throw new Error(\"Unable to find required '\" + require + \"' in upgraded directive '\" + this.name + \"'.\");\n            }\n            return value;\n        }\n        else {\n            throw new Error(\"Unrecognized 'require' syntax on upgraded directive '\" + this.name + \"': \" + require);\n        }\n    };\n    return UpgradeHelper;\n}());\nfunction getOrCall(property) {\n    var args = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        args[_i - 1] = arguments[_i];\n    }\n    return isFunction(property) ? property.apply(void 0, __spread(args)) : property;\n}\n// NOTE: Only works for `typeof T !== 'object'`.\nfunction isMap(value) {\n    return value && !Array.isArray(value) && typeof value === 'object';\n}\nfunction notSupported(name, feature) {\n    throw new Error(\"Upgraded directive '\" + name + \"' contains unsupported feature: '\" + feature + \"'.\");\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar CAMEL_CASE = /([A-Z])/g;\nvar INITIAL_VALUE$1 = {\n    __UNINITIALIZED__: true\n};\nvar NOT_SUPPORTED = 'NOT_SUPPORTED';\nvar UpgradeNg1ComponentAdapterBuilder = /** @class */ (function () {\n    function UpgradeNg1ComponentAdapterBuilder(name) {\n        this.name = name;\n        this.inputs = [];\n        this.inputsRename = [];\n        this.outputs = [];\n        this.outputsRename = [];\n        this.propertyOutputs = [];\n        this.checkProperties = [];\n        this.propertyMap = {};\n        this.directive = null;\n        var selector = name.replace(CAMEL_CASE, function (all, next) { return '-' + next.toLowerCase(); });\n        var self = this;\n        // Note: There is a bug in TS 2.4 that prevents us from\n        // inlining this into @Directive\n        // TODO(tbosch): find or file a bug against TypeScript for this.\n        var directive = { selector: selector, inputs: this.inputsRename, outputs: this.outputsRename };\n        var MyClass = /** @class */ (function (_super) {\n            __extends(MyClass, _super);\n            function MyClass(scope, injector, elementRef) {\n                var _this = this;\n                _this = _super.call(this, new UpgradeHelper(injector, name, elementRef, self.directive || undefined), scope, self.template, self.inputs, self.outputs, self.propertyOutputs, self.checkProperties, self.propertyMap) || this;\n                return _this;\n            }\n            MyClass = __decorate([\n                Directive(__assign({ jit: true }, directive)),\n                __param(0, Inject($SCOPE)),\n                __metadata(\"design:paramtypes\", [Object, Injector, ElementRef])\n            ], MyClass);\n            return MyClass;\n        }(UpgradeNg1ComponentAdapter));\n        this.type = MyClass;\n    }\n    UpgradeNg1ComponentAdapterBuilder.prototype.extractBindings = function () {\n        var _this = this;\n        var btcIsObject = typeof this.directive.bindToController === 'object';\n        if (btcIsObject && Object.keys(this.directive.scope).length) {\n            throw new Error(\"Binding definitions on scope and controller at the same time are not supported.\");\n        }\n        var context = (btcIsObject) ? this.directive.bindToController : this.directive.scope;\n        if (typeof context == 'object') {\n            Object.keys(context).forEach(function (propName) {\n                var definition = context[propName];\n                var bindingType = definition.charAt(0);\n                var bindingOptions = definition.charAt(1);\n                var attrName = definition.substring(bindingOptions === '?' ? 2 : 1) || propName;\n                // QUESTION: What about `=*`? Ignore? Throw? Support?\n                var inputName = \"input_\" + attrName;\n                var inputNameRename = inputName + \": \" + attrName;\n                var outputName = \"output_\" + attrName;\n                var outputNameRename = outputName + \": \" + attrName;\n                var outputNameRenameChange = outputNameRename + \"Change\";\n                switch (bindingType) {\n                    case '@':\n                    case '<':\n                        _this.inputs.push(inputName);\n                        _this.inputsRename.push(inputNameRename);\n                        _this.propertyMap[inputName] = propName;\n                        break;\n                    case '=':\n                        _this.inputs.push(inputName);\n                        _this.inputsRename.push(inputNameRename);\n                        _this.propertyMap[inputName] = propName;\n                        _this.outputs.push(outputName);\n                        _this.outputsRename.push(outputNameRenameChange);\n                        _this.propertyMap[outputName] = propName;\n                        _this.checkProperties.push(propName);\n                        _this.propertyOutputs.push(outputName);\n                        break;\n                    case '&':\n                        _this.outputs.push(outputName);\n                        _this.outputsRename.push(outputNameRename);\n                        _this.propertyMap[outputName] = propName;\n                        break;\n                    default:\n                        var json = JSON.stringify(context);\n                        throw new Error(\"Unexpected mapping '\" + bindingType + \"' in '\" + json + \"' in '\" + _this.name + \"' directive.\");\n                }\n            });\n        }\n    };\n    /**\n     * Upgrade ng1 components into Angular.\n     */\n    UpgradeNg1ComponentAdapterBuilder.resolve = function (exportedComponents, $injector) {\n        var promises = Object.keys(exportedComponents).map(function (name) {\n            var exportedComponent = exportedComponents[name];\n            exportedComponent.directive = UpgradeHelper.getDirective($injector, name);\n            exportedComponent.extractBindings();\n            return Promise\n                .resolve(UpgradeHelper.getTemplate($injector, exportedComponent.directive, true))\n                .then(function (template) { return exportedComponent.template = template; });\n        });\n        return Promise.all(promises);\n    };\n    return UpgradeNg1ComponentAdapterBuilder;\n}());\nvar UpgradeNg1ComponentAdapter = /** @class */ (function () {\n    function UpgradeNg1ComponentAdapter(helper, scope, template, inputs, outputs, propOuts, checkProperties, propertyMap) {\n        this.helper = helper;\n        this.template = template;\n        this.inputs = inputs;\n        this.outputs = outputs;\n        this.propOuts = propOuts;\n        this.checkProperties = checkProperties;\n        this.propertyMap = propertyMap;\n        this.controllerInstance = null;\n        this.destinationObj = null;\n        this.checkLastValues = [];\n        this.$element = null;\n        this.directive = helper.directive;\n        this.element = helper.element;\n        this.$element = helper.$element;\n        this.componentScope = scope.$new(!!this.directive.scope);\n        var controllerType = this.directive.controller;\n        if (this.directive.bindToController && controllerType) {\n            this.controllerInstance = this.helper.buildController(controllerType, this.componentScope);\n            this.destinationObj = this.controllerInstance;\n        }\n        else {\n            this.destinationObj = this.componentScope;\n        }\n        for (var i = 0; i < inputs.length; i++) {\n            this[inputs[i]] = null;\n        }\n        for (var j = 0; j < outputs.length; j++) {\n            var emitter = this[outputs[j]] = new EventEmitter();\n            if (this.propOuts.indexOf(outputs[j]) === -1) {\n                this.setComponentProperty(outputs[j], (function (emitter) { return function (value) { return emitter.emit(value); }; })(emitter));\n            }\n        }\n        for (var k = 0; k < propOuts.length; k++) {\n            this.checkLastValues.push(INITIAL_VALUE$1);\n        }\n    }\n    UpgradeNg1ComponentAdapter.prototype.ngOnInit = function () {\n        // Collect contents, insert and compile template\n        var attachChildNodes = this.helper.prepareTransclusion();\n        var linkFn = this.helper.compileTemplate(this.template);\n        // Instantiate controller (if not already done so)\n        var controllerType = this.directive.controller;\n        var bindToController = this.directive.bindToController;\n        if (controllerType && !bindToController) {\n            this.controllerInstance = this.helper.buildController(controllerType, this.componentScope);\n        }\n        // Require other controllers\n        var requiredControllers = this.helper.resolveAndBindRequiredControllers(this.controllerInstance);\n        // Hook: $onInit\n        if (this.controllerInstance && isFunction(this.controllerInstance.$onInit)) {\n            this.controllerInstance.$onInit();\n        }\n        // Linking\n        var link = this.directive.link;\n        var preLink = (typeof link == 'object') && link.pre;\n        var postLink = (typeof link == 'object') ? link.post : link;\n        var attrs = NOT_SUPPORTED;\n        var transcludeFn = NOT_SUPPORTED;\n        if (preLink) {\n            preLink(this.componentScope, this.$element, attrs, requiredControllers, transcludeFn);\n        }\n        linkFn(this.componentScope, null, { parentBoundTranscludeFn: attachChildNodes });\n        if (postLink) {\n            postLink(this.componentScope, this.$element, attrs, requiredControllers, transcludeFn);\n        }\n        // Hook: $postLink\n        if (this.controllerInstance && isFunction(this.controllerInstance.$postLink)) {\n            this.controllerInstance.$postLink();\n        }\n    };\n    UpgradeNg1ComponentAdapter.prototype.ngOnChanges = function (changes) {\n        var _this = this;\n        var ng1Changes = {};\n        Object.keys(changes).forEach(function (name) {\n            var change = changes[name];\n            _this.setComponentProperty(name, change.currentValue);\n            ng1Changes[_this.propertyMap[name]] = change;\n        });\n        if (isFunction(this.destinationObj.$onChanges)) {\n            this.destinationObj.$onChanges(ng1Changes);\n        }\n    };\n    UpgradeNg1ComponentAdapter.prototype.ngDoCheck = function () {\n        var _this = this;\n        var destinationObj = this.destinationObj;\n        var lastValues = this.checkLastValues;\n        var checkProperties = this.checkProperties;\n        var propOuts = this.propOuts;\n        checkProperties.forEach(function (propName, i) {\n            var value = destinationObj[propName];\n            var last = lastValues[i];\n            if (!strictEquals(last, value)) {\n                var eventEmitter = _this[propOuts[i]];\n                eventEmitter.emit(lastValues[i] = value);\n            }\n        });\n        if (this.controllerInstance && isFunction(this.controllerInstance.$doCheck)) {\n            this.controllerInstance.$doCheck();\n        }\n    };\n    UpgradeNg1ComponentAdapter.prototype.ngOnDestroy = function () { this.helper.onDestroy(this.componentScope, this.controllerInstance); };\n    UpgradeNg1ComponentAdapter.prototype.setComponentProperty = function (name, value) {\n        this.destinationObj[this.propertyMap[name]] = value;\n    };\n    return UpgradeNg1ComponentAdapter;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar upgradeCount = 0;\n/**\n * Use `UpgradeAdapter` to allow AngularJS and Angular to coexist in a single application.\n *\n * The `UpgradeAdapter` allows:\n * 1. creation of Angular component from AngularJS component directive\n *    (See [UpgradeAdapter#upgradeNg1Component()])\n * 2. creation of AngularJS directive from Angular component.\n *    (See [UpgradeAdapter#downgradeNg2Component()])\n * 3. Bootstrapping of a hybrid Angular application which contains both of the frameworks\n *    coexisting in a single application.\n *\n * @usageNotes\n * ### Mental Model\n *\n * When reasoning about how a hybrid application works it is useful to have a mental model which\n * describes what is happening and explains what is happening at the lowest level.\n *\n * 1. There are two independent frameworks running in a single application, each framework treats\n *    the other as a black box.\n * 2. Each DOM element on the page is owned exactly by one framework. Whichever framework\n *    instantiated the element is the owner. Each framework only updates/interacts with its own\n *    DOM elements and ignores others.\n * 3. AngularJS directives always execute inside AngularJS framework codebase regardless of\n *    where they are instantiated.\n * 4. Angular components always execute inside Angular framework codebase regardless of\n *    where they are instantiated.\n * 5. An AngularJS component can be upgraded to an Angular component. This creates an\n *    Angular directive, which bootstraps the AngularJS component directive in that location.\n * 6. An Angular component can be downgraded to an AngularJS component directive. This creates\n *    an AngularJS directive, which bootstraps the Angular component in that location.\n * 7. Whenever an adapter component is instantiated the host element is owned by the framework\n *    doing the instantiation. The other framework then instantiates and owns the view for that\n *    component. This implies that component bindings will always follow the semantics of the\n *    instantiation framework. The syntax is always that of Angular syntax.\n * 8. AngularJS is always bootstrapped first and owns the bottom most view.\n * 9. The new application is running in Angular zone, and therefore it no longer needs calls to\n *    `$apply()`.\n *\n * ### Example\n *\n * ```\n * const adapter = new UpgradeAdapter(forwardRef(() => MyNg2Module), myCompilerOptions);\n * const module = angular.module('myExample', []);\n * module.directive('ng2Comp', adapter.downgradeNg2Component(Ng2Component));\n *\n * module.directive('ng1Hello', function() {\n *   return {\n *      scope: { title: '=' },\n *      template: 'ng1[Hello {{title}}!](<span ng-transclude></span>)'\n *   };\n * });\n *\n *\n * @Component({\n *   selector: 'ng2-comp',\n *   inputs: ['name'],\n *   template: 'ng2[<ng1-hello [title]=\"name\">transclude</ng1-hello>](<ng-content></ng-content>)',\n *   directives:\n * })\n * class Ng2Component {\n * }\n *\n * @NgModule({\n *   declarations: [Ng2Component, adapter.upgradeNg1Component('ng1Hello')],\n *   imports: [BrowserModule]\n * })\n * class MyNg2Module {}\n *\n *\n * document.body.innerHTML = '<ng2-comp name=\"World\">project</ng2-comp>';\n *\n * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n *   expect(document.body.textContent).toEqual(\n *       \"ng2[ng1[Hello World!](transclude)](project)\");\n * });\n *\n * ```\n *\n * @deprecated Deprecated since v5. Use `upgrade/static` instead, which also supports\n * [Ahead-of-Time compilation](guide/aot-compiler).\n * @publicApi\n */\nvar UpgradeAdapter = /** @class */ (function () {\n    function UpgradeAdapter(ng2AppModule, compilerOptions) {\n        this.ng2AppModule = ng2AppModule;\n        this.compilerOptions = compilerOptions;\n        this.idPrefix = \"NG2_UPGRADE_\" + upgradeCount++ + \"_\";\n        this.downgradedComponents = [];\n        /**\n         * An internal map of ng1 components which need to up upgraded to ng2.\n         *\n         * We can't upgrade until injector is instantiated and we can retrieve the component metadata.\n         * For this reason we keep a list of components to upgrade until ng1 injector is bootstrapped.\n         *\n         * @internal\n         */\n        this.ng1ComponentsToBeUpgraded = {};\n        this.upgradedProviders = [];\n        this.moduleRef = null;\n        if (!ng2AppModule) {\n            throw new Error('UpgradeAdapter cannot be instantiated without an NgModule of the Angular app.');\n        }\n    }\n    /**\n     * Allows Angular Component to be used from AngularJS.\n     *\n     * Use `downgradeNg2Component` to create an AngularJS Directive Definition Factory from\n     * Angular Component. The adapter will bootstrap Angular component from within the\n     * AngularJS template.\n     *\n     * @usageNotes\n     * ### Mental Model\n     *\n     * 1. The component is instantiated by being listed in AngularJS template. This means that the\n     *    host element is controlled by AngularJS, but the component's view will be controlled by\n     *    Angular.\n     * 2. Even thought the component is instantiated in AngularJS, it will be using Angular\n     *    syntax. This has to be done, this way because we must follow Angular components do not\n     *    declare how the attributes should be interpreted.\n     * 3. `ng-model` is controlled by AngularJS and communicates with the downgraded Angular component\n     *    by way of the `ControlValueAccessor` interface from @angular/forms. Only components that\n     *    implement this interface are eligible.\n     *\n     * ### Supported Features\n     *\n     * - Bindings:\n     *   - Attribute: `<comp name=\"World\">`\n     *   - Interpolation:  `<comp greeting=\"Hello {{name}}!\">`\n     *   - Expression:  `<comp [name]=\"username\">`\n     *   - Event:  `<comp (close)=\"doSomething()\">`\n     *   - ng-model: `<comp ng-model=\"name\">`\n     * - Content projection: yes\n     *\n     * ### Example\n     *\n     * ```\n     * const adapter = new UpgradeAdapter(forwardRef(() => MyNg2Module));\n     * const module = angular.module('myExample', []);\n     * module.directive('greet', adapter.downgradeNg2Component(Greeter));\n     *\n     * @Component({\n     *   selector: 'greet',\n     *   template: '{{salutation}} {{name}}! - <ng-content></ng-content>'\n     * })\n     * class Greeter {\n     *   @Input() salutation: string;\n     *   @Input() name: string;\n     * }\n     *\n     * @NgModule({\n     *   declarations: [Greeter],\n     *   imports: [BrowserModule]\n     * })\n     * class MyNg2Module {}\n     *\n     * document.body.innerHTML =\n     *   'ng1 template: <greet salutation=\"Hello\" [name]=\"world\">text</greet>';\n     *\n     * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n     *   expect(document.body.textContent).toEqual(\"ng1 template: Hello world! - text\");\n     * });\n     * ```\n     */\n    UpgradeAdapter.prototype.downgradeNg2Component = function (component) {\n        this.downgradedComponents.push(component);\n        return downgradeComponent({ component: component });\n    };\n    /**\n     * Allows AngularJS Component to be used from Angular.\n     *\n     * Use `upgradeNg1Component` to create an Angular component from AngularJS Component\n     * directive. The adapter will bootstrap AngularJS component from within the Angular\n     * template.\n     *\n     * @usageNotes\n     * ### Mental Model\n     *\n     * 1. The component is instantiated by being listed in Angular template. This means that the\n     *    host element is controlled by Angular, but the component's view will be controlled by\n     *    AngularJS.\n     *\n     * ### Supported Features\n     *\n     * - Bindings:\n     *   - Attribute: `<comp name=\"World\">`\n     *   - Interpolation:  `<comp greeting=\"Hello {{name}}!\">`\n     *   - Expression:  `<comp [name]=\"username\">`\n     *   - Event:  `<comp (close)=\"doSomething()\">`\n     * - Transclusion: yes\n     * - Only some of the features of\n     *   [Directive Definition Object](https://docs.angularjs.org/api/ng/service/$compile) are\n     *   supported:\n     *   - `compile`: not supported because the host element is owned by Angular, which does\n     *     not allow modifying DOM structure during compilation.\n     *   - `controller`: supported. (NOTE: injection of `$attrs` and `$transclude` is not supported.)\n     *   - `controllerAs`: supported.\n     *   - `bindToController`: supported.\n     *   - `link`: supported. (NOTE: only pre-link function is supported.)\n     *   - `name`: supported.\n     *   - `priority`: ignored.\n     *   - `replace`: not supported.\n     *   - `require`: supported.\n     *   - `restrict`: must be set to 'E'.\n     *   - `scope`: supported.\n     *   - `template`: supported.\n     *   - `templateUrl`: supported.\n     *   - `terminal`: ignored.\n     *   - `transclude`: supported.\n     *\n     *\n     * ### Example\n     *\n     * ```\n     * const adapter = new UpgradeAdapter(forwardRef(() => MyNg2Module));\n     * const module = angular.module('myExample', []);\n     *\n     * module.directive('greet', function() {\n     *   return {\n     *     scope: {salutation: '=', name: '=' },\n     *     template: '{{salutation}} {{name}}! - <span ng-transclude></span>'\n     *   };\n     * });\n     *\n     * module.directive('ng2', adapter.downgradeNg2Component(Ng2Component));\n     *\n     * @Component({\n     *   selector: 'ng2',\n     *   template: 'ng2 template: <greet salutation=\"Hello\" [name]=\"world\">text</greet>'\n     * })\n     * class Ng2Component {\n     * }\n     *\n     * @NgModule({\n     *   declarations: [Ng2Component, adapter.upgradeNg1Component('greet')],\n     *   imports: [BrowserModule]\n     * })\n     * class MyNg2Module {}\n     *\n     * document.body.innerHTML = '<ng2></ng2>';\n     *\n     * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n     *   expect(document.body.textContent).toEqual(\"ng2 template: Hello world! - text\");\n     * });\n     * ```\n     */\n    UpgradeAdapter.prototype.upgradeNg1Component = function (name) {\n        if (this.ng1ComponentsToBeUpgraded.hasOwnProperty(name)) {\n            return this.ng1ComponentsToBeUpgraded[name].type;\n        }\n        else {\n            return (this.ng1ComponentsToBeUpgraded[name] = new UpgradeNg1ComponentAdapterBuilder(name))\n                .type;\n        }\n    };\n    /**\n     * Registers the adapter's AngularJS upgrade module for unit testing in AngularJS.\n     * Use this instead of `angular.mock.module()` to load the upgrade module into\n     * the AngularJS testing injector.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```\n     * const upgradeAdapter = new UpgradeAdapter(MyNg2Module);\n     *\n     * // configure the adapter with upgrade/downgrade components and services\n     * upgradeAdapter.downgradeNg2Component(MyComponent);\n     *\n     * let upgradeAdapterRef: UpgradeAdapterRef;\n     * let $compile, $rootScope;\n     *\n     * // We must register the adapter before any calls to `inject()`\n     * beforeEach(() => {\n     *   upgradeAdapterRef = upgradeAdapter.registerForNg1Tests(['heroApp']);\n     * });\n     *\n     * beforeEach(inject((_$compile_, _$rootScope_) => {\n     *   $compile = _$compile_;\n     *   $rootScope = _$rootScope_;\n     * }));\n     *\n     * it(\"says hello\", (done) => {\n     *   upgradeAdapterRef.ready(() => {\n     *     const element = $compile(\"<my-component></my-component>\")($rootScope);\n     *     $rootScope.$apply();\n     *     expect(element.html()).toContain(\"Hello World\");\n     *     done();\n     *   })\n     * });\n     *\n     * ```\n     *\n     * @param modules any AngularJS modules that the upgrade module should depend upon\n     * @returns an `UpgradeAdapterRef`, which lets you register a `ready()` callback to\n     * run assertions once the Angular components are ready to test through AngularJS.\n     */\n    UpgradeAdapter.prototype.registerForNg1Tests = function (modules) {\n        var _this = this;\n        var windowNgMock = window['angular'].mock;\n        if (!windowNgMock || !windowNgMock.module) {\n            throw new Error('Failed to find \\'angular.mock.module\\'.');\n        }\n        this.declareNg1Module(modules);\n        windowNgMock.module(this.ng1Module.name);\n        var upgrade = new UpgradeAdapterRef();\n        this.ng2BootstrapDeferred.promise.then(function (ng1Injector) { upgrade._bootstrapDone(_this.moduleRef, ng1Injector); }, onError);\n        return upgrade;\n    };\n    /**\n     * Bootstrap a hybrid AngularJS / Angular application.\n     *\n     * This `bootstrap` method is a direct replacement (takes same arguments) for AngularJS\n     * [`bootstrap`](https://docs.angularjs.org/api/ng/function/angular.bootstrap) method. Unlike\n     * AngularJS, this bootstrap is asynchronous.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```\n     * const adapter = new UpgradeAdapter(MyNg2Module);\n     * const module = angular.module('myExample', []);\n     * module.directive('ng2', adapter.downgradeNg2Component(Ng2));\n     *\n     * module.directive('ng1', function() {\n     *   return {\n     *      scope: { title: '=' },\n     *      template: 'ng1[Hello {{title}}!](<span ng-transclude></span>)'\n     *   };\n     * });\n     *\n     *\n     * @Component({\n     *   selector: 'ng2',\n     *   inputs: ['name'],\n     *   template: 'ng2[<ng1 [title]=\"name\">transclude</ng1>](<ng-content></ng-content>)'\n     * })\n     * class Ng2 {\n     * }\n     *\n     * @NgModule({\n     *   declarations: [Ng2, adapter.upgradeNg1Component('ng1')],\n     *   imports: [BrowserModule]\n     * })\n     * class MyNg2Module {}\n     *\n     * document.body.innerHTML = '<ng2 name=\"World\">project</ng2>';\n     *\n     * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n     *   expect(document.body.textContent).toEqual(\n     *       \"ng2[ng1[Hello World!](transclude)](project)\");\n     * });\n     * ```\n     */\n    UpgradeAdapter.prototype.bootstrap = function (element$1, modules, config) {\n        var _this = this;\n        this.declareNg1Module(modules);\n        var upgrade = new UpgradeAdapterRef();\n        // Make sure resumeBootstrap() only exists if the current bootstrap is deferred\n        var windowAngular = window /** TODO #???? */['angular'];\n        windowAngular.resumeBootstrap = undefined;\n        this.ngZone.run(function () { bootstrap(element$1, [_this.ng1Module.name], config); });\n        var ng1BootstrapPromise = new Promise(function (resolve) {\n            if (windowAngular.resumeBootstrap) {\n                var originalResumeBootstrap_1 = windowAngular.resumeBootstrap;\n                windowAngular.resumeBootstrap = function () {\n                    windowAngular.resumeBootstrap = originalResumeBootstrap_1;\n                    var r = windowAngular.resumeBootstrap.apply(this, arguments);\n                    resolve();\n                    return r;\n                };\n            }\n            else {\n                resolve();\n            }\n        });\n        Promise.all([this.ng2BootstrapDeferred.promise, ng1BootstrapPromise]).then(function (_a) {\n            var _b = __read(_a, 1), ng1Injector = _b[0];\n            element(element$1).data(controllerKey(INJECTOR_KEY), _this.moduleRef.injector);\n            _this.moduleRef.injector.get(NgZone).run(function () { upgrade._bootstrapDone(_this.moduleRef, ng1Injector); });\n        }, onError);\n        return upgrade;\n    };\n    /**\n     * Allows AngularJS service to be accessible from Angular.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```\n     * class Login { ... }\n     * class Server { ... }\n     *\n     * @Injectable()\n     * class Example {\n     *   constructor(@Inject('server') server, login: Login) {\n     *     ...\n     *   }\n     * }\n     *\n     * const module = angular.module('myExample', []);\n     * module.service('server', Server);\n     * module.service('login', Login);\n     *\n     * const adapter = new UpgradeAdapter(MyNg2Module);\n     * adapter.upgradeNg1Provider('server');\n     * adapter.upgradeNg1Provider('login', {asToken: Login});\n     *\n     * adapter.bootstrap(document.body, ['myExample']).ready((ref) => {\n     *   const example: Example = ref.ng2Injector.get(Example);\n     * });\n     *\n     * ```\n     */\n    UpgradeAdapter.prototype.upgradeNg1Provider = function (name, options) {\n        var token = options && options.asToken || name;\n        this.upgradedProviders.push({\n            provide: token,\n            useFactory: function ($injector) { return $injector.get(name); },\n            deps: [$INJECTOR]\n        });\n    };\n    /**\n     * Allows Angular service to be accessible from AngularJS.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```\n     * class Example {\n     * }\n     *\n     * const adapter = new UpgradeAdapter(MyNg2Module);\n     *\n     * const module = angular.module('myExample', []);\n     * module.factory('example', adapter.downgradeNg2Provider(Example));\n     *\n     * adapter.bootstrap(document.body, ['myExample']).ready((ref) => {\n     *   const example: Example = ref.ng1Injector.get('example');\n     * });\n     *\n     * ```\n     */\n    UpgradeAdapter.prototype.downgradeNg2Provider = function (token) { return downgradeInjectable(token); };\n    /**\n     * Declare the AngularJS upgrade module for this adapter without bootstrapping the whole\n     * hybrid application.\n     *\n     * This method is automatically called by `bootstrap()` and `registerForNg1Tests()`.\n     *\n     * @param modules The AngularJS modules that this upgrade module should depend upon.\n     * @returns The AngularJS upgrade module that is declared by this method\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```\n     * const upgradeAdapter = new UpgradeAdapter(MyNg2Module);\n     * upgradeAdapter.declareNg1Module(['heroApp']);\n     * ```\n     */\n    UpgradeAdapter.prototype.declareNg1Module = function (modules) {\n        var _this = this;\n        if (modules === void 0) { modules = []; }\n        var delayApplyExps = [];\n        var original$applyFn;\n        var rootScopePrototype;\n        var rootScope;\n        var upgradeAdapter = this;\n        var ng1Module = this.ng1Module = module_(this.idPrefix, modules);\n        var platformRef = platformBrowserDynamic();\n        this.ngZone = new NgZone({ enableLongStackTrace: Zone.hasOwnProperty('longStackTraceZoneSpec') });\n        this.ng2BootstrapDeferred = new Deferred();\n        ng1Module.constant(UPGRADE_APP_TYPE_KEY, 1 /* Dynamic */)\n            .factory(INJECTOR_KEY, function () { return _this.moduleRef.injector.get(Injector); })\n            .factory(LAZY_MODULE_REF, [INJECTOR_KEY, function (injector) { return ({ injector: injector }); }])\n            .constant(NG_ZONE_KEY, this.ngZone)\n            .factory(COMPILER_KEY, function () { return _this.moduleRef.injector.get(Compiler); })\n            .config([\n            '$provide', '$injector',\n            function (provide, ng1Injector) {\n                provide.decorator($ROOT_SCOPE, [\n                    '$delegate',\n                    function (rootScopeDelegate) {\n                        // Capture the root apply so that we can delay first call to $apply until we\n                        // bootstrap Angular and then we replay and restore the $apply.\n                        rootScopePrototype = rootScopeDelegate.constructor.prototype;\n                        if (rootScopePrototype.hasOwnProperty('$apply')) {\n                            original$applyFn = rootScopePrototype.$apply;\n                            rootScopePrototype.$apply = function (exp) { return delayApplyExps.push(exp); };\n                        }\n                        else {\n                            throw new Error('Failed to find \\'$apply\\' on \\'$rootScope\\'!');\n                        }\n                        return rootScope = rootScopeDelegate;\n                    }\n                ]);\n                if (ng1Injector.has($$TESTABILITY)) {\n                    provide.decorator($$TESTABILITY, [\n                        '$delegate',\n                        function (testabilityDelegate) {\n                            var originalWhenStable = testabilityDelegate.whenStable;\n                            // Cannot use arrow function below because we need the context\n                            var newWhenStable = function (callback) {\n                                originalWhenStable.call(this, function () {\n                                    var ng2Testability = upgradeAdapter.moduleRef.injector.get(Testability);\n                                    if (ng2Testability.isStable()) {\n                                        callback.apply(this, arguments);\n                                    }\n                                    else {\n                                        ng2Testability.whenStable(newWhenStable.bind(this, callback));\n                                    }\n                                });\n                            };\n                            testabilityDelegate.whenStable = newWhenStable;\n                            return testabilityDelegate;\n                        }\n                    ]);\n                }\n            }\n        ]);\n        ng1Module.run([\n            '$injector', '$rootScope',\n            function (ng1Injector, rootScope) {\n                UpgradeNg1ComponentAdapterBuilder.resolve(_this.ng1ComponentsToBeUpgraded, ng1Injector)\n                    .then(function () {\n                    // Note: There is a bug in TS 2.4 that prevents us from\n                    // inlining this into @NgModule\n                    // TODO(tbosch): find or file a bug against TypeScript for this.\n                    var ngModule = {\n                        providers: [\n                            { provide: $INJECTOR, useFactory: function () { return ng1Injector; } },\n                            { provide: $COMPILE, useFactory: function () { return ng1Injector.get($COMPILE); } },\n                            _this.upgradedProviders\n                        ],\n                        imports: [resolveForwardRef(_this.ng2AppModule)],\n                        entryComponents: _this.downgradedComponents\n                    };\n                    // At this point we have ng1 injector and we have prepared\n                    // ng1 components to be upgraded, we now can bootstrap ng2.\n                    var DynamicNgUpgradeModule = /** @class */ (function () {\n                        function DynamicNgUpgradeModule() {\n                        }\n                        DynamicNgUpgradeModule.prototype.ngDoBootstrap = function () { };\n                        DynamicNgUpgradeModule = __decorate([\n                            NgModule(__assign({ jit: true }, ngModule)),\n                            __metadata(\"design:paramtypes\", [])\n                        ], DynamicNgUpgradeModule);\n                        return DynamicNgUpgradeModule;\n                    }());\n                    platformRef\n                        .bootstrapModule(DynamicNgUpgradeModule, [_this.compilerOptions, { ngZone: _this.ngZone }])\n                        .then(function (ref) {\n                        _this.moduleRef = ref;\n                        _this.ngZone.run(function () {\n                            if (rootScopePrototype) {\n                                rootScopePrototype.$apply = original$applyFn; // restore original $apply\n                                while (delayApplyExps.length) {\n                                    rootScope.$apply(delayApplyExps.shift());\n                                }\n                                rootScopePrototype = null;\n                            }\n                        });\n                    })\n                        .then(function () { return _this.ng2BootstrapDeferred.resolve(ng1Injector); }, onError)\n                        .then(function () {\n                        var subscription = _this.ngZone.onMicrotaskEmpty.subscribe({\n                            next: function () {\n                                if (rootScope.$$phase) {\n                                    if (isDevMode()) {\n                                        console.warn('A digest was triggered while one was already in progress. This may mean that something is triggering digests outside the Angular zone.');\n                                    }\n                                    return rootScope.$evalAsync(function () { });\n                                }\n                                return rootScope.$digest();\n                            }\n                        });\n                        rootScope.$on('$destroy', function () { subscription.unsubscribe(); });\n                    });\n                })\n                    .catch(function (e) { return _this.ng2BootstrapDeferred.reject(e); });\n            }\n        ]);\n        return ng1Module;\n    };\n    return UpgradeAdapter;\n}());\n/**\n * Synchronous promise-like object to wrap parent injectors,\n * to preserve the synchronous nature of AngularJS's $compile.\n */\nvar ParentInjectorPromise$1 = /** @class */ (function () {\n    function ParentInjectorPromise(element) {\n        this.element = element;\n        this.callbacks = [];\n        // store the promise on the element\n        element.data(controllerKey(INJECTOR_KEY), this);\n    }\n    ParentInjectorPromise.prototype.then = function (callback) {\n        if (this.injector) {\n            callback(this.injector);\n        }\n        else {\n            this.callbacks.push(callback);\n        }\n    };\n    ParentInjectorPromise.prototype.resolve = function (injector) {\n        this.injector = injector;\n        // reset the element data to point to the real injector\n        this.element.data(controllerKey(INJECTOR_KEY), injector);\n        // clean out the element to prevent memory leaks\n        this.element = null;\n        // run all the queued callbacks\n        this.callbacks.forEach(function (callback) { return callback(injector); });\n        this.callbacks.length = 0;\n    };\n    return ParentInjectorPromise;\n}());\n/**\n * Use `UpgradeAdapterRef` to control a hybrid AngularJS / Angular application.\n *\n * @deprecated Deprecated since v5. Use `upgrade/static` instead, which also supports\n * [Ahead-of-Time compilation](guide/aot-compiler).\n * @publicApi\n */\nvar UpgradeAdapterRef = /** @class */ (function () {\n    function UpgradeAdapterRef() {\n        /* @internal */\n        this._readyFn = null;\n        this.ng1RootScope = null;\n        this.ng1Injector = null;\n        this.ng2ModuleRef = null;\n        this.ng2Injector = null;\n    }\n    /* @internal */\n    UpgradeAdapterRef.prototype._bootstrapDone = function (ngModuleRef, ng1Injector) {\n        this.ng2ModuleRef = ngModuleRef;\n        this.ng2Injector = ngModuleRef.injector;\n        this.ng1Injector = ng1Injector;\n        this.ng1RootScope = ng1Injector.get($ROOT_SCOPE);\n        this._readyFn && this._readyFn(this);\n    };\n    /**\n     * Register a callback function which is notified upon successful hybrid AngularJS / Angular\n     * application has been bootstrapped.\n     *\n     * The `ready` callback function is invoked inside the Angular zone, therefore it does not\n     * require a call to `$apply()`.\n     */\n    UpgradeAdapterRef.prototype.ready = function (fn) { this._readyFn = fn; };\n    /**\n     * Dispose of running hybrid AngularJS / Angular application.\n     */\n    UpgradeAdapterRef.prototype.dispose = function () {\n        this.ng1Injector.get($ROOT_SCOPE).$destroy();\n        this.ng2ModuleRef.destroy();\n    };\n    return UpgradeAdapterRef;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// This file only re-exports content of the `src` folder. Keep it that way.\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { VERSION, UpgradeAdapter, UpgradeAdapterRef };\n//# sourceMappingURL=upgrade.js.map\n"],"names":["VERSION","Version","noNg","Error","noNgElement","cleanData","angular","bootstrap","module","element","injector","version","undefined","resumeBootstrap","getTestability","window","hasOwnProperty","_a","e","nodes","INJECTOR_KEY","PropertyBinding","prop","attr","this","parseBinding","prototype","bracketAttr","parenAttr","bracketParenAttr","capitalAttr","charAt","toUpperCase","substr","onAttr","bindAttr","bindonAttr","DIRECTIVE_PREFIX_REGEXP","DIRECTIVE_SPECIAL_CHARS_REGEXP","onError","console","error","stack","log","controllerKey","name","getTypeName","type","overriddenName","toString","split","getDowngradedModuleCount","$injector","has","get","getUpgradeAppType","isFunction","value","validateInjectionKey","downgradedModule","injectionKey","attemptedAction","upgradeAppType","downgradedModuleCount","Deferred","_this","promise","Promise","res","rej","resolve","reject","strictEquals","val1","val2","_matches","INITIAL_VALUE","__UNINITIALIZED__","DowngradeComponentAdapter","attrs","scope","ngModel","parentInjector","$compile","$parse","componentFactory","wrapCallback","implementsOnChanges","inputChangeCount","inputChanges","componentScope","$new","compileContents","compiledProjectableNodes","linkFns","groupProjectableNodes","map","empty","forEach","linkFn","clone","push","append","createComponent","projectableNodes","providers","provide","useValue","childInjector","Injector","create","parent","componentRef","viewChangeDetector","ChangeDetectorRef","changeDetector","changeDetectorRef","component","instance","testability","Testability","TestabilityRegistry","registerApplication","location","nativeElement","writeValue","registerOnChange","supportsNgModel","$render","$viewValue","$setViewValue","bind","registerOnTouched","$setTouched","setupInputs","manuallyAttachView","propagateDigest","inputs","_loop_1","i","prevValue","input","propName","templateName","expr","observeFn_1","currValue","updateInput","$observe","unwatch_1","this_1","$watch","watchFn","length","detectChanges","componentType","ngOnChanges","markForCheck","unwatch_2","ApplicationRef","attachView","hostView","setupOutputs","outputs","j","output","substring","subscribeToOutput","isAssignment","getter","setter","assign","emitter","subscribe","next","v","$event","registerCleanup","testabilityRegistry","destroyComponentRef","destroy","destroyed","on","$destroy","$on","unregisterApplication","getInjector","SimpleChange","ngContentSelectors","ii","jj","node","ngContentIndex","findMatchingNgContentIndex","groupNodesBySelector","contents","ngContentIndices","wildcardNgContentIndex","selector","matchesSelector","sort","el","elProto","Element","matches","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","nodeType","Node","ELEMENT_NODE","call","SyncPromise","resolved","callbacks","all","valuesOrPromises","aggrPromise","resolvedCount","results","idx","p","obj","then","callback","ParentInjectorPromise","_super","injectorKey","data","__extends","REQUIRE_PREFIX_RE","UpgradeHelper","elementRef","directive","$controller","$element","getDirective","directives","compile","link","notSupported","replace","terminal","getTemplate","fetchRemoteTemplate","template","getOrCall","templateUrl","$templateCache_1","url_1","$httpBackend","status","response","put","buildController","controllerType","$scope","locals","controller","controllerAs","compileTemplate","compileHtml","onDestroy","controllerInstance","$onDestroy","querySelectorAll","prepareTransclusion","transclude","contentChildNodes","extractChildNodes","attachChildrenFn","cloneAttachFn","$template","slots_1","Object","slotMap_1","filledSlots_1","keys","slotName","optional","nodeName","toLowerCase","_","letter","filter","cloneAttach","$$slots","TEXT_NODE","nodeValue","resolveAndBindRequiredControllers","directiveRequire","getDirectiveRequire","requiredControllers","resolveRequire","bindToController","isMap","requiredControllersMap_1","key","html","innerHTML","childNodes","childNode","firstChild","removeChild","require","match","Array","isArray","req","value_1","inheritType","name_1","isOptional","searchParents","startOnParent","ctrlKey","elem","inheritedData","property","args","_i","arguments","apply","__spread","feature","CAMEL_CASE","INITIAL_VALUE$1","UpgradeNg1ComponentAdapterBuilder","inputsRename","outputsRename","propertyOutputs","checkProperties","propertyMap","self","MyClass","__decorate","Directive","__assign","jit","__param","Inject","__metadata","ElementRef","UpgradeNg1ComponentAdapter","extractBindings","btcIsObject","context","definition","bindingType","bindingOptions","attrName","inputName","inputNameRename","outputName","outputNameRename","outputNameRenameChange","json","JSON","stringify","exportedComponents","promises","exportedComponent","helper","propOuts","destinationObj","checkLastValues","EventEmitter","indexOf","setComponentProperty","emit","k","ngOnInit","attachChildNodes","$onInit","preLink","pre","postLink","post","parentBoundTranscludeFn","$postLink","changes","ng1Changes","change","currentValue","$onChanges","ngDoCheck","lastValues","$doCheck","ngOnDestroy","upgradeCount","UpgradeAdapter","ng2AppModule","compilerOptions","idPrefix","downgradedComponents","ng1ComponentsToBeUpgraded","upgradedProviders","moduleRef","downgradeNg2Component","info","directiveFactory","ngZone","isNgUpgradeLite","cb","NgZone","isInAngularZone","run","hasMultipleDowngradedModules","restrict","required","moduleInjector","ranAsync","lazyModuleRefKey","lazyModuleRef","finalParentInjector","finalModuleInjector","doDowngrade","ComponentFactoryResolver","resolveComponentFactory","injectorPromise","facade","$evalAsync","downgradeFn","pInjector","mInjector","_b","__read","upgradeNg1Component","registerForNg1Tests","modules","windowNgMock","mock","declareNg1Module","ng1Module","upgrade","UpgradeAdapterRef","ng2BootstrapDeferred","ng1Injector","_bootstrapDone","element$1","config","windowAngular","ng1BootstrapPromise","originalResumeBootstrap_1","r","upgradeNg1Provider","options","token","asToken","useFactory","deps","downgradeNg2Provider","factory","injectableName","String","downgradeInjectable","original$applyFn","rootScopePrototype","prefix","dependencies","delayApplyExps","upgradeAdapter","platformRef","platformBrowserDynamic","enableLongStackTrace","Zone","constant","Compiler","decorator","rootScopeDelegate","constructor","$apply","exp","testabilityDelegate","originalWhenStable","whenStable","newWhenStable","ng2Testability","isStable","rootScope","ngModule","imports","resolveForwardRef","entryComponents","DynamicNgUpgradeModule","ngDoBootstrap","NgModule","bootstrapModule","ref","shift","subscription","onMicrotaskEmpty","$$phase","isDevMode","warn","$digest","unsubscribe","catch","_readyFn","ng1RootScope","ng2ModuleRef","ng2Injector","ngModuleRef","ready","fn","dispose"],"mappings":"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"}