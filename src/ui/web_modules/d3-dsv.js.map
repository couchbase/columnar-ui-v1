{"version":3,"file":"d3-dsv.js","sources":["../node_modules/d3-dsv/src/dsv.js","../node_modules/d3-dsv/src/csv.js","../node_modules/d3-dsv/src/tsv.js","../node_modules/d3-dsv/src/autoType.js"],"sourcesContent":["var EOL = {},\n    EOF = {},\n    QUOTE = 34,\n    NEWLINE = 10,\n    RETURN = 13;\n\nfunction objectConverter(columns) {\n  return new Function(\"d\", \"return {\" + columns.map(function(name, i) {\n    return JSON.stringify(name) + \": d[\" + i + \"] || \\\"\\\"\";\n  }).join(\",\") + \"}\");\n}\n\nfunction customConverter(columns, f) {\n  var object = objectConverter(columns);\n  return function(row, i) {\n    return f(object(row), i, columns);\n  };\n}\n\n// Compute unique columns in order of discovery.\nfunction inferColumns(rows) {\n  var columnSet = Object.create(null),\n      columns = [];\n\n  rows.forEach(function(row) {\n    for (var column in row) {\n      if (!(column in columnSet)) {\n        columns.push(columnSet[column] = column);\n      }\n    }\n  });\n\n  return columns;\n}\n\nfunction pad(value, width) {\n  var s = value + \"\", length = s.length;\n  return length < width ? new Array(width - length + 1).join(0) + s : s;\n}\n\nfunction formatYear(year) {\n  return year < 0 ? \"-\" + pad(-year, 6)\n    : year > 9999 ? \"+\" + pad(year, 6)\n    : pad(year, 4);\n}\n\nfunction formatDate(date) {\n  var hours = date.getUTCHours(),\n      minutes = date.getUTCMinutes(),\n      seconds = date.getUTCSeconds(),\n      milliseconds = date.getUTCMilliseconds();\n  return isNaN(date) ? \"Invalid Date\"\n      : formatYear(date.getUTCFullYear(), 4) + \"-\" + pad(date.getUTCMonth() + 1, 2) + \"-\" + pad(date.getUTCDate(), 2)\n      + (milliseconds ? \"T\" + pad(hours, 2) + \":\" + pad(minutes, 2) + \":\" + pad(seconds, 2) + \".\" + pad(milliseconds, 3) + \"Z\"\n      : seconds ? \"T\" + pad(hours, 2) + \":\" + pad(minutes, 2) + \":\" + pad(seconds, 2) + \"Z\"\n      : minutes || hours ? \"T\" + pad(hours, 2) + \":\" + pad(minutes, 2) + \"Z\"\n      : \"\");\n}\n\nexport default function(delimiter) {\n  var reFormat = new RegExp(\"[\\\"\" + delimiter + \"\\n\\r]\"),\n      DELIMITER = delimiter.charCodeAt(0);\n\n  function parse(text, f) {\n    var convert, columns, rows = parseRows(text, function(row, i) {\n      if (convert) return convert(row, i - 1);\n      columns = row, convert = f ? customConverter(row, f) : objectConverter(row);\n    });\n    rows.columns = columns || [];\n    return rows;\n  }\n\n  function parseRows(text, f) {\n    var rows = [], // output rows\n        N = text.length,\n        I = 0, // current character index\n        n = 0, // current line number\n        t, // current token\n        eof = N <= 0, // current token followed by EOF?\n        eol = false; // current token followed by EOL?\n\n    // Strip the trailing newline.\n    if (text.charCodeAt(N - 1) === NEWLINE) --N;\n    if (text.charCodeAt(N - 1) === RETURN) --N;\n\n    function token() {\n      if (eof) return EOF;\n      if (eol) return eol = false, EOL;\n\n      // Unescape quotes.\n      var i, j = I, c;\n      if (text.charCodeAt(j) === QUOTE) {\n        while (I++ < N && text.charCodeAt(I) !== QUOTE || text.charCodeAt(++I) === QUOTE);\n        if ((i = I) >= N) eof = true;\n        else if ((c = text.charCodeAt(I++)) === NEWLINE) eol = true;\n        else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }\n        return text.slice(j + 1, i - 1).replace(/\"\"/g, \"\\\"\");\n      }\n\n      // Find next delimiter or newline.\n      while (I < N) {\n        if ((c = text.charCodeAt(i = I++)) === NEWLINE) eol = true;\n        else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }\n        else if (c !== DELIMITER) continue;\n        return text.slice(j, i);\n      }\n\n      // Return last token before EOF.\n      return eof = true, text.slice(j, N);\n    }\n\n    while ((t = token()) !== EOF) {\n      var row = [];\n      while (t !== EOL && t !== EOF) row.push(t), t = token();\n      if (f && (row = f(row, n++)) == null) continue;\n      rows.push(row);\n    }\n\n    return rows;\n  }\n\n  function preformatBody(rows, columns) {\n    return rows.map(function(row) {\n      return columns.map(function(column) {\n        return formatValue(row[column]);\n      }).join(delimiter);\n    });\n  }\n\n  function format(rows, columns) {\n    if (columns == null) columns = inferColumns(rows);\n    return [columns.map(formatValue).join(delimiter)].concat(preformatBody(rows, columns)).join(\"\\n\");\n  }\n\n  function formatBody(rows, columns) {\n    if (columns == null) columns = inferColumns(rows);\n    return preformatBody(rows, columns).join(\"\\n\");\n  }\n\n  function formatRows(rows) {\n    return rows.map(formatRow).join(\"\\n\");\n  }\n\n  function formatRow(row) {\n    return row.map(formatValue).join(delimiter);\n  }\n\n  function formatValue(value) {\n    return value == null ? \"\"\n        : value instanceof Date ? formatDate(value)\n        : reFormat.test(value += \"\") ? \"\\\"\" + value.replace(/\"/g, \"\\\"\\\"\") + \"\\\"\"\n        : value;\n  }\n\n  return {\n    parse: parse,\n    parseRows: parseRows,\n    format: format,\n    formatBody: formatBody,\n    formatRows: formatRows,\n    formatRow: formatRow,\n    formatValue: formatValue\n  };\n}\n","import dsv from \"./dsv.js\";\n\nvar csv = dsv(\",\");\n\nexport var csvParse = csv.parse;\nexport var csvParseRows = csv.parseRows;\nexport var csvFormat = csv.format;\nexport var csvFormatBody = csv.formatBody;\nexport var csvFormatRows = csv.formatRows;\nexport var csvFormatRow = csv.formatRow;\nexport var csvFormatValue = csv.formatValue;\n","import dsv from \"./dsv.js\";\n\nvar tsv = dsv(\"\\t\");\n\nexport var tsvParse = tsv.parse;\nexport var tsvParseRows = tsv.parseRows;\nexport var tsvFormat = tsv.format;\nexport var tsvFormatBody = tsv.formatBody;\nexport var tsvFormatRows = tsv.formatRows;\nexport var tsvFormatRow = tsv.formatRow;\nexport var tsvFormatValue = tsv.formatValue;\n","export default function autoType(object) {\n  for (var key in object) {\n    var value = object[key].trim(), number, m;\n    if (!value) value = null;\n    else if (value === \"true\") value = true;\n    else if (value === \"false\") value = false;\n    else if (value === \"NaN\") value = NaN;\n    else if (!isNaN(number = +value)) value = number;\n    else if (m = value.match(/^([-+]\\d{2})?\\d{4}(-\\d{2}(-\\d{2})?)?(T\\d{2}:\\d{2}(:\\d{2}(\\.\\d{3})?)?(Z|[-+]\\d{2}:\\d{2})?)?$/)) {\n      if (fixtz && !!m[4] && !m[7]) value = value.replace(/-/g, \"/\").replace(/T/, \" \");\n      value = new Date(value);\n    }\n    else continue;\n    object[key] = value;\n  }\n  return object;\n}\n\n// https://github.com/d3/d3-dsv/issues/45\nconst fixtz = new Date(\"2019-01-01T00:00\").getHours() || new Date(\"2019-07-01T00:00\").getHours();"],"names":["EOL","EOF","objectConverter","columns","Function","map","name","i","JSON","stringify","join","inferColumns","rows","columnSet","Object","create","forEach","row","column","push","pad","value","width","s","length","Array","formatDate","date","year","hours","getUTCHours","minutes","getUTCMinutes","seconds","getUTCSeconds","milliseconds","getUTCMilliseconds","isNaN","getUTCFullYear","getUTCMonth","getUTCDate","delimiter","reFormat","RegExp","DELIMITER","charCodeAt","parseRows","text","f","t","N","I","n","eof","eol","token","c","j","slice","replace","preformatBody","formatValue","formatRow","Date","test","parse","convert","object","customConverter","format","concat","formatBody","formatRows","csv","dsv","csvParse","csvParseRows","csvFormat","csvFormatBody","csvFormatRows","csvFormatRow","csvFormatValue","tsv","tsvParse","tsvParseRows","tsvFormat","tsvFormatBody","tsvFormatRows","tsvFormatRow","tsvFormatValue","autoType","key","number","m","trim","NaN","match","fixtz","getHours"],"mappings":"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"}